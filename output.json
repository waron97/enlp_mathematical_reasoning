[
  {
    "result": 39.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.28295111656189,
      "templates": [
        "For Halloween Debby and her sister combined the candy they received. Debby had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a Python function that returns the answer.",
        "For Halloween Debby and her sister combined the candy they received. Debby had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        39.0,
        39.0,
        39.0,
        39.0,
        39.0
      ],
      "completions": [
        [
          " \n\ndef remaining_candy(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef candyLeft(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candyLeft(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_candy(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef leftover_candy(A,B,C):\n    return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candyCombined(a,b,c): //a, b, and c represent the pieces of candy each person has\n  return (a + b) - c //returns the remaining candy after eating C pieces",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Debby and her sister combined the candy they received. Debby had 32 pieces of candy while her sister had 42. If they ate 35 pieces the first night, how many pieces do they have left? ",
      "final_answer": 39.0,
      "index": 0
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.550696849822998,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingCats(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numCatsLeft(A,B,C):\n  return A + B - C",
          "\n\nA - C + B = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_cats(a, b, c):\n    return a + b - c",
          "\n\nA + B - C = \nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 13 siamese cats and 5 house cats. During a sale they sold 10 cats. How many cats do they have left? ",
      "final_answer": 8.0,
      "index": 1
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.070836067199707,
      "templates": [
        "Luke was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a Python function that returns the answer.",
        "Luke was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_good_games(A, B, C):\n    return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A, B, C):\n  return A + B - C",
          "\n\nA + B - C =\nAnswer = A + B - C"
        ],
        [
          " \n\ndef calculate_games(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_game(A, B, C):\n  return (A+B)-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_good_games(A, B, C):\n  return A + B - C",
          "\n\nAnswer =A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Luke was trying to expand his game collection. He bought 2 games from a friend and bought 2 more at a garage sale. If 2 of the games didn't work, how many good games did he end up with? ",
      "final_answer": 2.0,
      "index": 2
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.23161005973816,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef extraApples(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extraFruit(A, B, C):\n    return (A + B) - C",
          "\nA+B-C=Answer\nAnswer = A+B-C"
        ],
        [
          "\n\ndef extraApples(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extraApples(A, B, C): \n  return A + B - C",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A,B,C):\n  return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extra_apples(a, b, c): \n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculateExtraApples(A,B,C):\n  return (A + B) - (C * 2)",
          "\n\nA - B + C = Answer\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria ordered 42 red apples and 7 green apples for students lunches. But, if only 9 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 40.0,
      "index": 3
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.185937881469727,
      "templates": [
        "Lana picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Lana pick?\nWrite a Python function that returns the answer.",
        "Lana picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Lana pick?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef extraFlowers(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C): \n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef flower_bouquets(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extraFlowers(a,b,c):\n  return (a+b)-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a, b, c):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Lana picked 36 tulips and 37 roses to make flower bouquets. If she only used 70 of the flowers though, how many extra flowers did Lana pick? ",
      "final_answer": 3.0,
      "index": 4
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 20,
      "duration": 13.949731826782227,
      "templates": [
        "Carol and her mom were picking carrots from their garden. Carol picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Carol and her mom were picking carrots from their garden. Carol picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef bad_carrots(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A+B-C"
        ],
        [
          " \n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrots(a,b,c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  bad_carrots = A + B - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  total = A + B\n  return total - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef count_bad_carrots(a, b, c):\n  return a+b-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n\ttotal = a + b\n\tbad = total - c\n\treturn bad \n\nprint(bad_carrots(6, 8, 3))\n# Output: 11",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Carol and her mom were picking carrots from their garden. Carol picked 29 and her mother picked 16. If only 38 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 7.0,
      "index": 5
    }
  },
  {
    "result": 19.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.772346019744873,
      "templates": [
        "Roger had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Roger had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        19.0,
        19.0,
        19.0,
        19.0,
        19.0
      ],
      "completions": [
        [
          "\n\ndef moneyNow(A, B, C):\n    return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_balance(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_money_owed(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_money(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef calculateMoney(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_money(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Roger had 16 dollars. For his birthday he got 28 more dollars but spent 25 on a new game. How much money does he have now? ",
      "final_answer": 19.0,
      "index": 6
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 18,
      "duration": 12.923101902008057,
      "templates": [
        "While on vacation, Megan took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Megan took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_pics_after_deletion(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pics (A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures (A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A+B-C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef picture_count(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef picturesLeft(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_photos(num_photos_zoo, num_photos_museum, num_photos_deleted):\n    remaining_photos = num_photos_zoo + num_photos_museum - num_photos_deleted\n    return remaining_photos\n\n# example\ncalculate_photos(30, 40, 5)\n# returns 65",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_pictures(a, b, c):\n  return a + b - c\n\nanswer = calculate_pictures(A, B, C)",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Megan took 15 pictures at the zoo and 18 at the museum. If she later deleted 31 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 2.0,
      "index": 7
    }
  },
  {
    "result": 11.0,
    "meta": {
      "n_calls": 24,
      "duration": 16.956321954727173,
      "templates": [
        "Rachel bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a Python function that returns the answer.",
        "Rachel bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        11.0,
        11.0,
        11.0,
        11.0,
        11.0
      ],
      "completions": [
        [
          "\n\ndef num_coloring_pics(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\n  def remaining_pictures(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef coloring_books(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_coloring(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingPictures(A, B, C): \n    return A + B - C",
          "\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pictures_left(colored, total):\n  return total - colored\n\nprint(pictures_left(C, A + B))",
          "\n\nAnswer = B - C"
        ],
        [
          "\n\ndef coloring_books(a, b, c):\n    return (a + b) - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef picture_coloring(A, B, C):\n  return A + B - C",
          "\nAnswer = C - (A + B)"
        ],
        [
          "\n\ndef get_remaining_pictures(a, b, c):\n    return (a + b) - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef calculatePicturesLeftToColor(a,b,c): \n    totalPictures = a + b \n    picturesLeftToColor = totalPictures - c \n    return picturesLeftToColor\n\nprint(calculatePicturesLeftToColor(A, B, C))",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef numColoring(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingPictures(a,b,c): \n  return (a+b)-c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Rachel bought two coloring books. One had 23 pictures and the other had 32. After one week she had already colored 44 of the pictures. How many pictures does she still have to color? ",
      "final_answer": 11.0,
      "index": 8
    }
  },
  {
    "result": 1.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.53858494758606,
      "templates": [
        "Ned had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Ned had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "completions": [
        [
          "\n\ndef numShirtsNotWashed(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef unfinishedShirts(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef shirts_left(A, B, C):\n    return (A + B - C)\n\nshirts_left(A, B, C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef missed_shirts(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numberUnwashedShirts(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef washing_clothes(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_unwashed(a, b, c):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Ned had to wash 9 short sleeve shirts and 21 long sleeve shirts before school. If he had only washed 29 of them by the time school started, how many did he not wash? ",
      "final_answer": 1.0,
      "index": 9
    }
  },
  {
    "result": 66.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.527777671813965,
      "templates": [
        "Oliver had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Oliver had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        66.0,
        66.0,
        66.0,
        66.0,
        66.0
      ],
      "completions": [
        [
          "\n\ndef un_washed_shirts(A, B, C):\n  return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsNotWashed(A, B, C):\n  return (A + B - C)",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef not_washed(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef laundry(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef findShirtsNotWashed(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef unwashedShirts(a, b, c):\n  return a + b - c;",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalShirts(a, b, c):\n  num_washed = c\n  num_unwashed = a + b - c\n  return num_unwashed\n\ntotalShirts(3, 5, 2)\n# Returns 4",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef how_many_not_washed(a,b,c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Oliver had to wash 39 short sleeve shirts and 47 long sleeve shirts before school. If he had only washed 20 of them by the time school started, how many did he not wash? ",
      "final_answer": 66.0,
      "index": 10
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 18,
      "duration": 12.130596160888672,
      "templates": [
        "For the school bake sale Wendy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a Python function that returns the answer.",
        "For the school bake sale Wendy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef pastries_sold(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef bake_sale(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastriesSold(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef PastriesSold(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pastries_sold(a, b):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastriesSold(a,b):\n  return a + b - c",
          "\n\nA + B - C = Answer\nAnswer = 10"
        ],
        [
          "\n\ndef calculate_pastries(a, b, c):\n  return (a+b)-c\n\n# Use the function\nnumber_sold = calculate_pastries(10, 12, 8)\n\nprint(f\"Wendy sold {number_sold} pastries.\")",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef pastriesSold(a,b):\n  return a+b-c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Wendy made pastries. She baked 4 cupcakes and 29 cookies. After the sale she had 24 to take back home. How many pastries did she sell? ",
      "final_answer": 9.0,
      "index": 11
    }
  },
  {
    "result": 22.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.877165794372559,
      "templates": [
        "While on vacation, Debby took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Debby took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        22.0,
        22.0,
        22.0,
        22.0,
        22.0
      ],
      "completions": [
        [
          "\n\ndef vacationPictures(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pictures_remaining(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef vacation_pictures(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_vac_pics(num_zoo_pics, num_museum_pics, num_deleted):\n  return num_zoo_pics + num_museum_pics - num_deleted",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Debby took 24 pictures at the zoo and 12 at the museum. If she later deleted 14 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 22.0,
      "index": 12
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.075904846191406,
      "templates": [
        "Katie picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Katie pick?\nWrite a Python function that returns the answer.",
        "Katie picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Katie pick?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef extra_flowers(A, B, C):\n    return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef extraFlowers(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Katie picked 3 tulips and 9 roses to make flower bouquets. If she only used 10 of the flowers though, how many extra flowers did Katie pick? ",
      "final_answer": 2.0,
      "index": 13
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 16,
      "duration": 10.9343101978302,
      "templates": [
        "Faye had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a Python function that returns the answer.",
        "Faye had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef homework(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homeworkProblems(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_homework_problems(a, b, c):\n  return (a + b) - c \n\nprint(num_homework_problems(a, b, c))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef unfinished_problems(math, science, finished):\n  return math + science - finished",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef how_many_problems(a,b,c):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Faye had 46 math problems and 9 science problems for homework. If she finished 40 of the problems at school, how many problems did she have to do for homework? ",
      "final_answer": 15.0,
      "index": 14
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.806737899780273,
      "templates": [
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_files(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numFilesLeft(A, B, C): \n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles( A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_files(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef flash_drive(A,B,C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flashFiles (a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Amy had 4 music files and 21 video files on her flash drive. If she deleted 23 of the files, how many files were still on her flash drive? ",
      "final_answer": 2.0,
      "index": 15
    }
  },
  {
    "result": 14.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.465529203414917,
      "templates": [
        "Ned was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a Python function that returns the answer.",
        "Ned was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        14.0,
        14.0,
        14.0,
        14.0,
        14.0
      ],
      "completions": [
        [
          "\n\ndef good_games(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef countGoodGames(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_good_games(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef goodGames(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Ned was trying to expand his game collection. He bought 11 games from a friend and bought 22 more at a garage sale. If 19 of the games didn't work, how many good games did he end up with? ",
      "final_answer": 14.0,
      "index": 16
    }
  },
  {
    "result": 86.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.640697717666626,
      "templates": [
        "Chloe was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a Python function that returns the answer.",
        "Chloe was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        86.0,
        86.0,
        86.0,
        86.0,
        86.0
      ],
      "completions": [
        [
          "\n\ndef end_game_score(A, B, C):\n  return A + B - C  # Chloe's total score \n  \nanswer = end_game_score(A, B, C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculateTotalScore(A, B, C):\n  return A + B - C\n\ntotalScore = calculateTotalScore(A, B, C)\nprint(totalScore)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef end_score(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef final_points(A, B, C):\n    # total points calculated by subtracting the last round's points from the sum of the first two round's points\n    total_points = A + B - C\n    # return total points\n    return total_points",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Chloe was playing a trivia game. In the first round she scored 40 points and in the second round she scored 50 points. In the last round she lost 4 points. How many points did she have at the end of the game? ",
      "final_answer": 86.0,
      "index": 17
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.038570880889893,
      "templates": [
        "At the arcade, Tom won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he spent C of his tickets on a hat, how many tickets does Tom have left?\nWrite a Python function that returns the answer.",
        "At the arcade, Tom won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he spent C of his tickets on a hat, how many tickets does Tom have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0,
        50.0,
        50.0,
        50.0,
        50.0
      ],
      "completions": [
        [
          "\n\ndef tickets_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets_remaining(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_tickets(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets_left(A, B, C): \n    return (A+B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets_left(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef tickets_left(a, b, c): \n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " At the arcade, Tom won 32 tickets playing 'whack a mole' and 25 tickets playing 'skee ball'. If he spent 7 of his tickets on a hat, how many tickets does Tom have left? ",
      "final_answer": 50.0,
      "index": 18
    }
  },
  {
    "result": 25.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.584882974624634,
      "templates": [
        "Bianca and her mom were picking carrots from their garden. Bianca picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Bianca and her mom were picking carrots from their garden. Bianca picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        25.0,
        25.0,
        25.0,
        25.0,
        25.0
      ],
      "completions": [
        [
          "\n\ndef carrots(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_bad_carrots(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Bianca and her mom were picking carrots from their garden. Bianca picked 26 and her mother picked 15. If only 16 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 25.0,
      "index": 19
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.225239038467407,
      "templates": [
        "For the school bake sale Katie made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a Python function that returns the answer.",
        "For the school bake sale Katie made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef pastries_sold(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bakeSale(A, B, C):\n  return A + B - C",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\nA = number of cupcakes\nB = number of cookies\nC = number of pastries taken back home\n\ndef bakeSale(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bakeSale(a, b, c): \n    return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bake_sale(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef PastriesSold(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = 5"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Katie made pastries. She baked 7 cupcakes and 5 cookies. After the sale she had 8 to take back home. How many pastries did she sell? ",
      "final_answer": 4.0,
      "index": 20
    }
  },
  {
    "result": 68.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.48774003982544,
      "templates": [
        "Zoe bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a Python function that returns the answer.",
        "Zoe bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        68.0,
        68.0,
        68.0,
        68.0
      ],
      "completions": [
        [
          " \n\ndef color_remaining(A, B, C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef to_color(A, B, C):\n  return A + B - C",
          " \nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef stillColoring(A, B, C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef uncolored_pictures(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef colors_left(A, B, C):\n  return A + B - C",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef numPictures(A, B, C):\n  remainingPictures = A + B - C\n  return remainingPictures",
          "\nAnswer = B - C"
        ]
      ]
    },
    "source": {
      "question": " Zoe bought two coloring books. One had 44 pictures and the other had 44. After one week she had already colored 20 of the pictures. How many pictures does she still have to color? ",
      "final_answer": 68.0,
      "index": 21
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.505666017532349,
      "templates": [
        "John was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a Python function that returns the answer.",
        "John was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\ndef good_games(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numGoodGames(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef goodGames(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A, B, C): \n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef goodGames(a, b, c): \n    return (a + b - c)",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " John was trying to expand his game collection. He bought 21 games from a friend and bought 8 more at a garage sale. If 23 of the games didn't work, how many good games did he end up with? ",
      "final_answer": 6.0,
      "index": 22
    }
  },
  {
    "result": 19.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.79161787033081,
      "templates": [
        "Henry had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Henry had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        19.0,
        19.0,
        19.0,
        19.0,
        19.0
      ],
      "completions": [
        [
          "\n\ndef money_after_birthday(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_money(A, B, C):\n    return A + B - C\n\nanswer = remaining_money(A, B, C)",
          "\n \nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculateTotal(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_amount(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_total_money(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_money(A, B, C):\n  total = A + B - C\n  return total",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Henry had 11 dollars. For his birthday he got 18 more dollars but spent 10 on a new game. How much money does he have now? ",
      "final_answer": 19.0,
      "index": 23
    }
  },
  {
    "result": 55.0,
    "meta": {
      "n_calls": 22,
      "duration": 16.695950984954834,
      "templates": [
        "While on vacation, Gwen took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Gwen took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        55.0,
        55.0,
        55.0,
        55.0,
        55.0
      ],
      "completions": [
        [
          "\n\ndef pictures_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_remaining_pics(A,B,C):\n    return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef countPictures(totalPictures, deletedPictures):\n  return totalPictures - deletedPictures\n\nanswer = countPictures(A+B, C)\nprint(answer)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_vacation_pics(n1,n2,n3):\n  return n1 + n2 - n3",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacationPictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef count_pictures(pictures):\n  return pictures - C\n\nprint(count_pictures(A + B))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_pictures(a, b, c):\n  return a+b-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pictures(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Gwen took 41 pictures at the zoo and 29 at the museum. If she later deleted 15 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 55.0,
      "index": 24
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 24,
      "duration": 16.00078296661377,
      "templates": [
        "Sam had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Sam had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef notWashed(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef shirtsNotWashed(A, B, C):\n  return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef missing_shirts(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef shirts_not_washed(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A+B-C"
        ],
        [
          "\n\ndef numNotWashed(A, B, C):\n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_shirts_not_washed(num_washed):\n  return (A + B) - num_washed",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsUnwashed(short, long, washed):\n  return (short + long - washed)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_shirts_not_washed(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_not_washed(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsNotWashed(a, b, c):\n  return (a + b - c)\n  \n# Example usage \nnumShirtsNotWashed(2, 4, 1) # Returns 5",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef unexamined_shirts(a, b, c):\n    return a + b - c",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef howManyNotWashed(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Sam had to wash 40 short sleeve shirts and 23 long sleeve shirts before school. If he had only washed 29 of them by the time school started, how many did he not wash? ",
      "final_answer": 34.0,
      "index": 25
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.915613889694214,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0,
        12.0,
        12.0,
        12.0,
        12.0
      ],
      "completions": [
        [
          "\n\ndef remaining_cats(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef num_cats_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = \nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cats_left(A, B, C):\n    return A + B - C",
          "\n\nA - C = Answer = A - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA - C = B\nAnswer = B"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 12 siamese cats and 20 house cats. During a sale they sold 20 cats. How many cats do they have left? ",
      "final_answer": 12.0,
      "index": 26
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 18,
      "duration": 12.51294994354248,
      "templates": [
        "Faye and her mom were picking carrots from their garden. Faye picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Faye and her mom were picking carrots from their garden. Faye picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef bad_carrots(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C): \n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef carrots(A, B, C):\n    return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pick_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots",
          "\nAnswer = A+B-C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n    totalCarrots = A + B\n    badCarrots = totalCarrots - C\n    return badCarrots",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Faye and her mom were picking carrots from their garden. Faye picked 23 and her mother picked 5. If only 12 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 16.0,
      "index": 27
    }
  },
  {
    "result": 73.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.06520700454712,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        73.0,
        73.0,
        73.0,
        73.0,
        73.0
      ],
      "completions": [
        [
          "\n\ndef extra_apples(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_fruit(A,B,C):\n  return (A+B)-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A + B - C)",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef calculateExtraApples(A, B, C):\n  return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extra_apples(A, B, C):\n  extra_apples = (A + B) - C\n  return extra_apples\n\n# Call the function\nextra_apples(10, 5, 3) \n# Output: 12",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria ordered 43 red apples and 32 green apples for students lunches. But, if only 2 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 73.0,
      "index": 28
    }
  },
  {
    "result": 17.0,
    "meta": {
      "n_calls": 14,
      "duration": 12.331262111663818,
      "templates": [
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a Python function that returns the answer.",
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        17.0,
        17.0,
        17.0,
        17.0,
        17.0
      ],
      "completions": [
        [
          "\n\ndef basketball_tryouts(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef calc_remaining_students(A, B, C):\n    return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\nA = int(input(\"How many girls were trying out: \"))\nB = int(input(\"How many boys were trying out: \"))\nC = int(input(\"How many of them got called back: \"))\n\ndef students_who_did_not_make_the_cut(A, B, C):\n  return A+B-C\n\nprint(students_who_did_not_make_the_cut(",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_not_called_back(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef basketball_team(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef basketball_team(a,b,c):\n    return a + b - c\n\nanswer = basketball_team(A,B,C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef noCallBack(a,b,c):\n  total_students = a + b\n  return total_students - c\n\nnoCallBack(a,b,c)",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " There were 39 girls and 4 boys trying out for the schools basketball team. If only 26 of them got called back, how many students didn't make the cut? ",
      "final_answer": 17.0,
      "index": 29
    }
  },
  {
    "result": 18.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.49247932434082,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        18.0,
        18.0,
        18.0,
        18.0,
        18.0
      ],
      "completions": [
        [
          "\n\ndef catsLeft(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_cats(A, B, C):\n  return (A + B - C)\n\nremaining_cats(A, B, C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n    return A + B - C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_sale(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\nA - C  + B = Answer\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA - C = B\nAnswer = A - C = B"
        ],
        [
          "\n\ndef numberOfCatsLeft(a, b, c):\n  return a + b - c",
          "\n\nA + B - C = Answer \nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 38 siamese cats and 25 house cats. During a sale they sold 45 cats. How many cats do they have left? ",
      "final_answer": 18.0,
      "index": 30
    }
  },
  {
    "result": 41.0,
    "meta": {
      "n_calls": 20,
      "duration": 15.682249069213867,
      "templates": [
        "For the school bake sale Paige made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a Python function that returns the answer.",
        "For the school bake sale Paige made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        41.0,
        41.0,
        41.0,
        41.0,
        41.0
      ],
      "completions": [
        [
          "\n\ndef calculate_sale_total(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastriesSold(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastriesSold(A,B,C):\n  return (A + B) - C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bakeSale(A,B):\n  return A + B - C",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pastriesSold(a,b):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bake_sale(a,b,c):\n  return a+b-c",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastriesSold(a, b):\n    return a + b - c\n\nanswer = pastriesSold(A, B, C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculatePastries(a,b,c):\n  return a + b - c",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n    return A + B - C",
          "\nA - C = Answer\nAnswer = A - C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Paige made pastries. She baked 36 cupcakes and 9 cookies. After the sale she had 4 to take back home. How many pastries did she sell? ",
      "final_answer": 41.0,
      "index": 31
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.357187986373901,
      "templates": [
        "Carol was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a Python function that returns the answer.",
        "Carol was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef final_score(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef end_score(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Carol was playing a trivia game. In the first round she scored 17 points and in the second round she scored 6 points. In the last round she lost 16 points. How many points did she have at the end of the game? ",
      "final_answer": 7.0,
      "index": 32
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.10921597480774,
      "templates": [
        "Gwen bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a Python function that returns the answer.",
        "Gwen bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef pictures_to_color():\n  A = 20\n  B = 30\n  C = 10\n  return (A + B) - C\n\nprint(pictures_to_color())\n\n# The answer is 40 pictures.",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C):\n    return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_coloring_pics_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remainingPictures (A,B,C):\n  return A + B - C",
          "\nAnswer = (A+B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remainingColoringPics(totalPics, coloredPics):\n  return totalPics - coloredPics\n\n#Example\nprint(remainingColoringPics(A + B, C))",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef uncolored_pictures(a,b,c):\n    return (a+b)-c",
          "\n\nAnswer = (A+B) - C"
        ],
        [
          "\n\ndef coloring_books(a, b, c):\n    return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef coloringBooks(A, B, C):\n  return (A+B)-C",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef numColors(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Gwen bought two coloring books. One had 10 pictures and the other had 39. After one week she had already colored 13 of the pictures. How many pictures does she still have to color? ",
      "final_answer": 36.0,
      "index": 33
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.99269986152649,
      "templates": [
        "For Halloween Janet and her sister combined the candy they received. Janet had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a Python function that returns the answer.",
        "For Halloween Janet and her sister combined the candy they received. Janet had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          " \n\ndef left_over_candy(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " Name the function candy_combine().\n\ndef candy_combine(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_left(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_remaining(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalCandyLeft(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy(A, B, C): \n  total_candy = A + B\n  return total_candy - C",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Janet and her sister combined the candy they received. Janet had 34 pieces of candy while her sister had 33. If they ate 4 pieces the first night, how many pieces do they have left? ",
      "final_answer": 63.0,
      "index": 34
    }
  },
  {
    "result": 13.0,
    "meta": {
      "n_calls": 18,
      "duration": 14.51604700088501,
      "templates": [
        "Haley and her mom were picking carrots from their garden. Haley picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Haley and her mom were picking carrots from their garden. Haley picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        13.0,
        13.0,
        13.0,
        13.0,
        13.0
      ],
      "completions": [
        [
          "\n\ndef badCarrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          " \nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A,B,C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrot_count(a, b, c):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef findBadCarrots(A, B, C):\n  totalCarrots = A + B\n  return totalCarrots - C\n\nanswer = findBadCarrots(A, B, C)\nprint(answer)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(a, b, c):\n  totalCarrots = a + b\n  badCarrots = totalCarrots - c\n  return badCarrots\n\nprint(badCarrots(4,6,2))\n# Output: 8",
          "\n\nA+B-C = Answer\nAnswer = 2"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n    return (a + b - c)\n\nprint(bad_carrots(A, B, C))",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Haley and her mom were picking carrots from their garden. Haley picked 39 and her mother picked 38. If only 64 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 13.0,
      "index": 35
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.409256935119629,
      "templates": [
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a Python function that returns the answer.",
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef basketball_cut(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_remaining_students(A,B,C):\n return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_students_not_called_back(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_not_called_back(A, B, C):\n  return ((A + B) - C)\n\nprint(num_not_called_back(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\n\ndef studentsNotCalledBack(A,B,C):\n    return (A+B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef basketball_team(A, B, C):\n  total = A + B\n  return total - C",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " There were 30 girls and 36 boys trying out for the schools basketball team. If only 10 of them got called back, how many students didn't make the cut? ",
      "final_answer": 56.0,
      "index": 36
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.199834823608398,
      "templates": [
        "Roger had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Roger had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef new_amount_of_money(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef amount_left(A, B, C):\n  return A + B - C\n\nprint(amount_left(10, 5, 3))\n# Output: 12",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef money_math(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_left(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef birthday_money(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Roger had 29 dollars. For his birthday he got 20 more dollars but spent 34 on a new game. How much money does he have now? ",
      "final_answer": 15.0,
      "index": 37
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 22,
      "duration": 18.297325134277344,
      "templates": [
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef number_of_shirts_not_washed(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_not_washed(A,B,C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef washShirts(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef NumberLeftToWash(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numberOfShirtsNotWashed(A, B, C):\n  return A + B - C",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\n\ndef undwashed_shirts(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef get_shirts_not_washed(a, b, c):\n  return a + b - c",
          "\n\nA + B - C = Answer\nAnswer =  A + B - C"
        ],
        [
          "\n\ndef remaining_shirts(a, b, c):\n  total = a + b\n  return total - c\n\nprint(remaining_shirts(2, 3, 1))\n# Output: 4",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_unwashed_shirts(short_sleeve, long_sleeve, washed):\n  return short_sleeve + long_sleeve - washed",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalShirts(short, long, washed):\n  total = short + long - washed\n  return total\n\nprint(totalShirts(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef unfinishedShirts(short, long, done):\n  return short + long - done",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Dave had to wash 29 short sleeve shirts and 11 long sleeve shirts before school. If he had only washed 35 of them by the time school started, how many did he not wash? ",
      "final_answer": 5.0,
      "index": 38
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.611530065536499,
      "templates": [
        "Edward was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a Python function that returns the answer.",
        "Edward was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          " \n\ndef good_games(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef num_good_games(A, B, C):\n return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef good_games(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numOfGoodGames(A, B, C):\n  return A + B - C",
          " \nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Edward was trying to expand his game collection. He bought 41 games from a friend and bought 14 more at a garage sale. If 31 of the games didn't work, how many good games did he end up with? ",
      "final_answer": 24.0,
      "index": 39
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.364716053009033,
      "templates": [
        "At the schools book fair Sam bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a Python function that returns the answer.",
        "At the schools book fair Sam bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef bookFair(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef book_fair_purchase(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef book_fair(A,B,C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef book_fair(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef new_books(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bookFair(a, b, c):\n    return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " At the schools book fair Sam bought 13 adventure books and 17 mystery books. If 15 of the books were used, how many new books did he buy? ",
      "final_answer": 15.0,
      "index": 40
    }
  },
  {
    "result": 14.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.7131452560424805,
      "templates": [
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        14.0,
        14.0,
        14.0,
        14.0,
        14.0
      ],
      "completions": [
        [
          "\n\ndef NumFiles(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numFilesRemaining(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef files_on_flash_drive(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numFiles(A, B, C):\n  return (A + B - C)\n\nprint(numFiles(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_files(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remainingFiles(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Amy had 26 music files and 36 video files on her flash drive. If she deleted 48 of the files, how many files were still on her flash drive? ",
      "final_answer": 14.0,
      "index": 41
    }
  },
  {
    "result": 1.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.4949791431427,
      "templates": [
        "Oliver had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Oliver had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "completions": [
        [
          "\n\ndef compute_money (A,B,C):\n  return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_calc(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_dollars(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_now(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_owed(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef money_with_birthday(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calc_money(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Oliver had 35 dollars. For his birthday he got 50 more dollars but spent 84 on a new game. How much money does he have now? ",
      "final_answer": 1.0,
      "index": 42
    }
  },
  {
    "result": 1.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.558701992034912,
      "templates": [
        "Emily was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a Python function that returns the answer.",
        "Emily was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "completions": [
        [
          "\n\ndef gamescore(A,B,C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef trivia_points(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef points_total(A, B, C):\n  return A+B-C",
          "\n\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef finalPoints(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef trivia_score(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef game_points(A,B,C):\n  total_points = A + B - C\n  return total_points\n  \nanswer = game_points(10,20,5)\nprint(answer)\n25",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Emily was playing a trivia game. In the first round she scored 16 points and in the second round she scored 33 points. In the last round she lost 48 points. How many points did she have at the end of the game? ",
      "final_answer": 1.0,
      "index": 43
    }
  },
  {
    "result": 11.0,
    "meta": {
      "n_calls": 24,
      "duration": 16.963317155838013,
      "templates": [
        "Paige had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a Python function that returns the answer.",
        "Paige had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        11.0,
        11.0,
        11.0,
        11.0
      ],
      "completions": [
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numProblems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          " \nAnswer = A+B-C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef homework_problems(math_problems, science_problems, finished_at_school):\n  return math_problems + science_problems - finished_at_school\n\nprint(homework_problems(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(a, b, c):\n  return a + b - c",
          " \nAnswer = A + B - C"
        ],
        [
          "\n\ndef do_homework( math_probs, sci_probs, done_probs):\n  return math_probs + sci_probs - done_probs",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef problem_solver(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(math, science, finished):\n  return math + science - finished",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(math, science, finished):\n  return math + science - finished",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef homework_problems(math, science, school):\n  return math + science - school",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Paige had 43 math problems and 12 science problems for homework. If she finished 44 of the problems at school, how many problems did she have to do for homework? ",
      "final_answer": 11.0,
      "index": 44
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.1883180141448975,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef extraFruit(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extraApples(A,B,C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " The school cafeteria ordered 33 red apples and 23 green apples for students lunches. But, if only 21 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 35.0,
      "index": 45
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.565966844558716,
      "templates": [
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef unwashed_shirts(A, B, C):\n    return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_left_unwashed(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsUnwashed(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_shirts(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_unwashed_shirts(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef unwashed_shirts(a, b, c):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsNotWashed(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Dave had to wash 9 short sleeve shirts and 27 long sleeve shirts before school. If he had only washed 20 of them by the time school started, how many did he not wash? ",
      "final_answer": 16.0,
      "index": 46
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.88998818397522,
      "templates": [
        "While on vacation, Rachel took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Rachel took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef numberPics(A,B,C): \n    return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pics(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef count_pictures(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calcpics(A, B, C):\n  result = A + B - C\n  return result\n\nprint(calcpics(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numberOfPicures(a,b,c):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef getNumRemaining(a, b, c):\n  return a + b - c\n\nprint(getNumRemaining(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numPictures(a, b, c):\n  return a+b-c\n  \nprint(numPictures(A, B, C))",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Rachel took 6 pictures at the zoo and 9 at the museum. If she later deleted 11 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 4.0,
      "index": 47
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.624235153198242,
      "templates": [
        "Vanessa and her mom were picking carrots from their garden. Vanessa picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Vanessa and her mom were picking carrots from their garden. Vanessa picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef badCarrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return (A + B - C)\n\nprint(badCarrots(A,B,C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrots(A,B, C):\n  bad_carrots = A + B - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef count_bad_carrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots\n\nprint(count_bad_carrots(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\n\ndef bad_carrots(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots\n\nbad_carrots(A, B, C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n    return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Vanessa and her mom were picking carrots from their garden. Vanessa picked 17 and her mother picked 14. If only 24 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 7.0,
      "index": 48
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.187469005584717,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef remainingCats(A, B, C): \n  return A + B - C",
          "\n\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingCats(A, B, C): \n  return A + B - C",
          "\n\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cats_remaining(A, B, C):\n  return (A + B) - C",
          "\n\nA - C = B \nAnswer = A - C = B"
        ],
        [
          "\n\ndef petStoreCats(A,B,C):\n     return A + B - C",
          "\nA + B - C = Answer =  A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA - C = B\nAnswer = B"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 41 siamese cats and 28 house cats. During a sale they sold 15 cats. How many cats do they have left? ",
      "final_answer": 54.0,
      "index": 49
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.815577030181885,
      "templates": [
        "At the schools book fair Sam bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a Python function that returns the answer.",
        "At the schools book fair Sam bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef numBooks(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numBooks(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef book_sales(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bookFair(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef SamsBooks(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " At the schools book fair Sam bought 13 adventure books and 17 mystery books. If 15 of the books were used, how many new books did he buy? ",
      "final_answer": 15.0,
      "index": 50
    }
  },
  {
    "result": 14.0,
    "meta": {
      "n_calls": 16,
      "duration": 10.999833106994629,
      "templates": [
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Amy had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        14.0,
        14.0,
        14.0,
        14.0,
        14.0
      ],
      "completions": [
        [
          "\n\ndef num_files(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles(A,B,C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalFiles(A, B, C): \n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remainingFiles(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_files(A,B,C):\n    return A + B - C\n\nremaining_files(A,B,C)",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remainingFile(a,b,c):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_files(a,b,c):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Amy had 26 music files and 36 video files on her flash drive. If she deleted 48 of the files, how many files were still on her flash drive? ",
      "final_answer": 14.0,
      "index": 51
    }
  },
  {
    "result": 1.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.937582015991211,
      "templates": [
        "Oliver had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Oliver had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "completions": [
        [
          "\n\ndef how_much(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_after_birthday(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef howMuchMoney(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef moneyAmount(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_money(A, B, C):\n    return A + B - C\n\nanswer = calculate_money(A, B, C)",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Oliver had 35 dollars. For his birthday he got 50 more dollars but spent 84 on a new game. How much money does he have now? ",
      "final_answer": 1.0,
      "index": 52
    }
  },
  {
    "result": 1.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.251250982284546,
      "templates": [
        "Emily was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a Python function that returns the answer.",
        "Emily was playing a trivia game. In the first round she scored A points and in the second round she scored B points. In the last round she lost C points. How many points did she have at the end of the game?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "completions": [
        [
          "\n\ndef total_score(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A+B-C)",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef gameScore(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Emily was playing a trivia game. In the first round she scored 16 points and in the second round she scored 33 points. In the last round she lost 48 points. How many points did she have at the end of the game? ",
      "final_answer": 1.0,
      "index": 53
    }
  },
  {
    "result": 11.0,
    "meta": {
      "n_calls": 24,
      "duration": 16.712816953659058,
      "templates": [
        "Paige had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a Python function that returns the answer.",
        "Paige had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        11.0,
        11.0,
        11.0,
        11.0,
        11.0
      ],
      "completions": [
        [
          "\n\ndef homework_problems(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef problemsLeft(A, B, C): \n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numProblems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\n\ndef get_homework(a, b, c): \n  return a + b - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_hw(math, science, finished_at_school):\n  return math + science - finished_at_school",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework(math, science, finished):\n  return math + science - finished",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(math_problems, science_problems, problems_finished):\n  return math_problems + science_problems - problems_finished",
          "\n\nAnswer = A + B - (C*2)"
        ],
        [
          "\n\ndef homework_problems(math, science, finished): \n  return math + science - finished",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(a, b, c):\n    return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Paige had 43 math problems and 12 science problems for homework. If she finished 44 of the problems at school, how many problems did she have to do for homework? ",
      "final_answer": 11.0,
      "index": 54
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.762419939041138,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef calculate_extra(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A+B)-C",
          "\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extra_apples(A, B, C):\n    total_apples = A + B\n    return total_apples - C\n    \nprint(extra_apples(A, B, C))",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria ordered 33 red apples and 23 green apples for students lunches. But, if only 21 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 35.0,
      "index": 55
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 18,
      "duration": 14.715110063552856,
      "templates": [
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Dave had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef numberNotWashed(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef not_washed(A, B, C):\n  return (A + B) - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_shirts_not_washed(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numOfUnwashed(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsNotWashed(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef unwashed_shirts(a,b,c):\n  return a + b - c",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef LeftoverShirts(a, b, c):\n\treturn (a + b) - c",
          "\n\nAnswer = 3 (A + B) - C"
        ],
        [
          "\n\ndef numUnwashedShirts(A,B,C):\n  numUnwashedShirts = A + B - C\n  return numUnwashedShirts",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_shirts(a, b, c):\n  return (a + b - c)\n\nanswer = calculate_shirts(a, b, c)\nprint(answer)",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Dave had to wash 9 short sleeve shirts and 27 long sleeve shirts before school. If he had only washed 20 of them by the time school started, how many did he not wash? ",
      "final_answer": 16.0,
      "index": 56
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 24,
      "duration": 17.239375114440918,
      "templates": [
        "While on vacation, Rachel took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Rachel took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef num_of_vacation_pics(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pictures_from_vacation(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef countPictures(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef RachelsVacationPics(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_vacation_pics(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_vacation_photos(a,b,c):\n    return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_pictures(A, B, C): \n  total_pictures = A + B - C\n  return total_pictures\n\nprint(calculate_pictures(A, B, C))  # Replace A, B, and C with the respective numbers.",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef vacation_photos(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pic_counter(a,b,c):\n  return a+b-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pictures(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_pictures(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef count_pictures(a, b, c):\n  return a + b - c\n  \ncount_pictures(A, B, C)",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Rachel took 6 pictures at the zoo and 9 at the museum. If she later deleted 11 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 4.0,
      "index": 57
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 14,
      "duration": 8.58568286895752,
      "templates": [
        "Vanessa and her mom were picking carrots from their garden. Vanessa picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Vanessa and her mom were picking carrots from their garden. Vanessa picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef BadCarrots(A, B, C):\n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return (A + B - C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_bad_carrots(a,b,c):\n\treturn (a+b)-c",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return (a+b-c)",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Vanessa and her mom were picking carrots from their garden. Vanessa picked 17 and her mother picked 14. If only 24 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 7.0,
      "index": 58
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.29245376586914,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef remaining_cats(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_cats(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_cats(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n\n  return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cats_left(A, B, C):\n    return (A+B) - C",
          "\n\nA - C = Answer = A - C"
        ],
        [
          "\n\ndef cats_left(a,b,c):\n  return a + b - c",
          "\n\nA + B - C = \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  cats_left = A + B - C\n  return cats_left\n\nprint(cats_left(A, B, C))",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 41 siamese cats and 28 house cats. During a sale they sold 15 cats. How many cats do they have left? ",
      "final_answer": 54.0,
      "index": 59
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.045973062515259,
      "templates": [
        "Janet picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Janet pick?\nWrite a Python function that returns the answer.",
        "Janet picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Janet pick?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef extraFlowers(A, B, C): \n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B)-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extra_flowers(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Janet picked 4 tulips and 11 roses to make flower bouquets. If she only used 11 of the flowers though, how many extra flowers did Janet pick? ",
      "final_answer": 4.0,
      "index": 60
    }
  },
  {
    "result": 33.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.238409042358398,
      "templates": [
        "Vanessa had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Vanessa had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        33.0,
        33.0,
        33.0,
        33.0,
        33.0
      ],
      "completions": [
        [
          "\n\ndef remaining_files(A, B, C):\n    return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingFiles(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef files_on_flash_drive(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef files_on_flash_drive(A, B, C):\n  return A + B - C",
          "\n\nA - B - C = Answer\nAnswer = A - B - C"
        ]
      ]
    },
    "source": {
      "question": " Vanessa had 13 music files and 30 video files on her flash drive. If she deleted 10 of the files, how many files were still on her flash drive? ",
      "final_answer": 33.0,
      "index": 61
    }
  },
  {
    "result": 23.0,
    "meta": {
      "n_calls": 38,
      "duration": 27.838491916656494,
      "templates": [
        "Debby bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a Python function that returns the answer.",
        "Debby bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        23.0,
        23.0
      ],
      "completions": [
        [
          "\n\ndef remainingPictures(A, B, C):\n  return (A+B)-C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_of_pictures_left(A, B, C):\n  return (A + B - C)  # returns the number of pictures left to color",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef coloring_books(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = C - (A+B)"
        ],
        [
          "\n\ndef remaining_pictures(a,b,c):\n  return a + b - c",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef remaining_pictures(total_pictures, colored):\n  return total_pictures - colored",
          "\nAnswer = (A+B) - C"
        ],
        [
          "\n\ndef remaining_coloring_pictures(total_pictures, pictures_colored):\n  return total_pictures - pictures_colored",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef number_of_pictures_remaining(a, b, c):\n  return (a + b) - c",
          "\nAnswer = B-C"
        ],
        [
          "\n\ndef remaining_coloring_pics(A, B, C):\n  return A + B - C",
          " \nAnswer = C - (A + B)"
        ],
        [
          " \n\ndef coloring_books(a, b, c):\n  return (a + b) - c",
          "\nAnswer = C - (A + B)"
        ],
        [
          "\n\ndef num_pictures_left(a, b, c):\n  return a + b - c",
          "\nAnswer = B-C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n  return (a + b) - c",
          "\n\nAnswer = C - (A + B)"
        ],
        [
          "\n\ndef num_of_coloring_pics(A, B, C):\n  total = A + B\n  remaining = total - C\n  return remaining",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef calculate_remaining_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C."
        ],
        [
          "\n\ndef remaining_coloring_images(num_pictures, num_colored):\n  return num_pictures - num_colored;",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_of_pictures(num_book_A, num_book_B, num_colored):\n    return (num_book_A + num_book_B - num_colored)",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef numOfPicturesLeft(a, b, c):\n  return a + b - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_coloring_pages(books, colored): \n  return (books * 2) - colored\n\nremaining_coloring_pages(A, B, C)",
          "\n\nAnswer = (A + B) - C"
        ]
      ]
    },
    "source": {
      "question": " Debby bought two coloring books. One had 16 pictures and the other had 40. After one week she had already colored 33 of the pictures. How many pictures does she still have to color? ",
      "final_answer": 23.0,
      "index": 62
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.171668291091919,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A + B) - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_fruit(A, B, C):\n    return A + B - C",
          "\nAnswer = A+B-C"
        ],
        [
          "\n\ndef extra_fruit(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef leftover_apples(A,B,C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef extra_apples(A,B,C):\n  if C == 0:\n    return A + B\n  elif C <= A:\n    return B\n  elif C <= A + B:\n    return A + B - C\n  else:\n    return 0\n\nprint(extra_apples(A,B,C))",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria ordered 8 red apples and 43 green apples for students lunches. But, if only 42 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 9.0,
      "index": 63
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.817042350769043,
      "templates": [
        "Edward started his own lawn mowing business. In the spring he made A dollars mowing lawns and in the summer he made B dollars. If he had to spend C dollars buying supplies, how much money did he end up with?\nWrite a Python function that returns the answer.",
        "Edward started his own lawn mowing business. In the spring he made A dollars mowing lawns and in the summer he made B dollars. If he had to spend C dollars buying supplies, how much money did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          " \n\ndef find_profit(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculateTotal(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef lawn_mowing_business(A, B, C): \n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef profit(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef earnings(A, B ,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef net_income(a,b,c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Edward started his own lawn mowing business. In the spring he made 2 dollars mowing lawns and in the summer he made 27 dollars. If he had to spend 5 dollars buying supplies, how much money did he end up with? ",
      "final_answer": 24.0,
      "index": 64
    }
  },
  {
    "result": 28.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.255352258682251,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        28.0,
        28.0,
        28.0,
        28.0,
        28.0
      ],
      "completions": [
        [
          "\n\ndef num_cats(A, B, C):\n  return A + B - C\n\nprint(num_cats(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingCats(A, B, C):\n  return A + B - C",
          "\n\nA + B - C =\nAnswer =  A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n    return A + B - C",
          "\n\nA + B - C =\nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsRemaining(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = \nAnswer =  A + B - C "
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef catsLeft(a, b, c):\n  return a + b - c",
          "\nA - C + B = Answer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 36 siamese cats and 18 house cats. During a sale they sold 26 cats. How many cats do they have left? ",
      "final_answer": 28.0,
      "index": 65
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 26,
      "duration": 18.222930192947388,
      "templates": [
        "Olivia and her mom were picking carrots from their garden. Olivia picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Olivia and her mom were picking carrots from their garden. Olivia picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef bad_carrots(A,B,C):\n  return (A+B)-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\n\ndef badCarrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n\treturn A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrots(a,b,c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  totalCarrots = A + B\n  badCarrots = totalCarrots - C\n  return badCarrots",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef bad_carrots(A, B, C):\n  bad_carrots = A + B - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a,b,c):\n  return (a+b)-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_bad_carrots(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  totalCarrots = A + B\n  badCarrots = totalCarrots - C\n  return badCarrots",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Olivia and her mom were picking carrots from their garden. Olivia picked 20 and her mother picked 14. If only 19 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 15.0,
      "index": 66
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 14,
      "duration": 8.658709049224854,
      "templates": [
        "George had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "George had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef calculate_money(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_balance(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_now(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_calculator(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_now(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef money_have(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef money_now(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " George had 30 dollars. For his birthday he got 16 more dollars but spent 38 on a new game. How much money does he have now? ",
      "final_answer": 8.0,
      "index": 67
    }
  },
  {
    "result": 47.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.235445022583008,
      "templates": [
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a Python function that returns the answer.",
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        47.0,
        47.0,
        47.0,
        47.0,
        47.0
      ],
      "completions": [
        [
          "\n\ndef not_called_back(A, B, C): \n return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef cutOff(A,B,C):\n  return (A + B) - C\n\nprint(cutOff(A,B,C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef cut_list (A, B, C): \n    return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef students_not_called_back(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numStudentsCut(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef GetNumNonCallbacks(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef not_called(a,b,c):\n  return (a+b)-c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef get_cutoff(a, b, c):\n    return a+b-c\n\nprint(get_cutoff(A, B, C))",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " There were 6 girls and 48 boys trying out for the schools basketball team. If only 7 of them got called back, how many students didn't make the cut? ",
      "final_answer": 47.0,
      "index": 68
    }
  },
  {
    "result": 51.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.047214984893799,
      "templates": [
        "For the school bake sale Amy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a Python function that returns the answer.",
        "For the school bake sale Amy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        51.0,
        51.0,
        51.0,
        51.0,
        51.0
      ],
      "completions": [
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B):\n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n    return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n  return (A + B) - C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef baked_sale(A, B, C):\n\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pastriesSold(a, b):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(a, b):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bake_sale(a,b,c):\n  return a+b-c",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Amy made pastries. She baked 15 cupcakes and 48 cookies. After the sale she had 12 to take back home. How many pastries did she sell? ",
      "final_answer": 51.0,
      "index": 69
    }
  },
  {
    "result": 53.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.75255823135376,
      "templates": [
        "At the schools book fair Victor bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a Python function that returns the answer.",
        "At the schools book fair Victor bought A adventure books and B mystery books. If C of the books were used, how many new books did he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        53.0,
        53.0,
        53.0,
        53.0,
        53.0
      ],
      "completions": [
        [
          "\n\ndef book_fair(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bookFair(A,B,C):\n    return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef new_books(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef newBooks(A, B, C):\n  return (A+B)-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bookBuyer(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = Answer \nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef book_total(adventure, mystery, used):\n  return (adventure + mystery) - used;\n\nprint(f\"Victor bought {book_total(A, B, C)} new books.\")",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " At the schools book fair Victor bought 32 adventure books and 37 mystery books. If 16 of the books were used, how many new books did he buy? ",
      "final_answer": 53.0,
      "index": 70
    }
  },
  {
    "result": 20.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.006088972091675,
      "templates": [
        "While on vacation, Haley took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Haley took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        20.0,
        20.0,
        20.0,
        20.0,
        20.0
      ],
      "completions": [
        [
          "\n\ndef howManyPictures(A, B, C):\n   return (A + B - C)\n\nprint(howManyPictures(A,B,C))",
          "\nAnswer = A+B-C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numTotalPics(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remainingPictures(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numVacationPictures(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_vacation_pics(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n    return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Haley took 50 pictures at the zoo and 8 at the museum. If she later deleted 38 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 20.0,
      "index": 71
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 20,
      "duration": 15.154625177383423,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        31.0,
        31.0,
        31.0,
        31.0
      ],
      "completions": [
        [
          "\n\ndef extra_apples(A,B,C):\n  return (A+B)-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef leftover_apples(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\nFor example:\n\nextra_apples(A, B, C)\n\ndef extra_apples(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_extra_apples(A, B, C):\n    return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A + B - C",
          "\nAnswer =A+B-C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef extra_apples(A, B, C): \n    extra = A + B - C\n    return extra",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef leftovers(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef CafeteriaApples(A, B, C):\n  return (A - C) + (B - C)\n\nprint(CafeteriaApples(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A+B)-C",
          "\n\nA+B-C = Answer \nA+B-C = Answer =  0"
        ],
        [
          "\n\ndef calculate_extra_apples(a,b,c):\n  return (a-c) + (b-c)\n\nprint(calculate_extra_apples(A,B,C))",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria ordered 37 red apples and 45 green apples for students lunches. But, if only 51 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 31.0,
      "index": 72
    }
  },
  {
    "result": 22.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.109951972961426,
      "templates": [
        "While shopping, Maria bought A green towels and B white towels. If she gave her mother C of them, how many towels did Maria end up with?\nWrite a Python function that returns the answer.",
        "While shopping, Maria bought A green towels and B white towels. If she gave her mother C of them, how many towels did Maria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        22.0,
        22.0,
        22.0,
        22.0,
        22.0
      ],
      "completions": [
        [
          "\n\ndef towels_remaining(A, B, C):\n  return (A + B - C)\n\nprint(towels_remaining(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_towels(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_towels(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numOfTowels(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef towel_calc(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While shopping, Maria bought 35 green towels and 21 white towels. If she gave her mother 34 of them, how many towels did Maria end up with? ",
      "final_answer": 22.0,
      "index": 73
    }
  },
  {
    "result": 39.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.628030776977539,
      "templates": [
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a Python function that returns the answer.",
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        39.0,
        39.0,
        39.0,
        39.0,
        39.0
      ],
      "completions": [
        [
          "\n\ndef num_students_not_called_back(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef number_not_called_back(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef students_not_cut(A, B, C): \n    return (A+B)-C",
          "\nAnswer = A + B -C"
        ],
        [
          "\n\ndef noCallbacks(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\nA = Number of girls\nB = Number of boys\nC = Number of students called back\n\ndef num_not_chosen(A, B, C):\n  return (A + B) - C\n\nnum_not_chosen(A, B, C)",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef no_make_cut(a,b,c):\n  return a+b-c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " There were 17 girls and 32 boys trying out for the schools basketball team. If only 10 of them got called back, how many students didn't make the cut? ",
      "final_answer": 39.0,
      "index": 74
    }
  },
  {
    "result": 14.0,
    "meta": {
      "n_calls": 26,
      "duration": 19.024417877197266,
      "templates": [
        "Nancy and her mom were picking carrots from their garden. Nancy picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a Python function that returns the answer.",
        "Nancy and her mom were picking carrots from their garden. Nancy picked A and her mother picked B. If only C of the carrots were good, how many bad carrots did they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        14.0,
        14.0,
        14.0,
        14.0,
        14.0
      ],
      "completions": [
        [
          "\n\ndef count_bad_carrots(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_bad_carrots(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  return (A + B - C)\n\nprint(bad_carrots(10, 20, 5)) #15",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bad_carrots(A, B, C):\n  bad_carrots = (A + B) - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n    bad_carrots = A + B - C\n    return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(A, B, C):\n  total_carrots = A + B\n  bad_carrots = total_carrots - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  bad_carrots = A + B - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef badCarrots(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bad_carrots(A, B, C):\n  bad_carrots = A + B - C\n  return bad_carrots",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Nancy and her mom were picking carrots from their garden. Nancy picked 38 and her mother picked 47. If only 71 of the carrots were good, how many bad carrots did they have? ",
      "final_answer": 14.0,
      "index": 75
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.977580070495605,
      "templates": [
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a Python function that returns the answer.",
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef find_tips(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef tip_calculator(A, B, C):\n  return (A+B)-C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef tips(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tip_calculation(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef customer_tip(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef findNumTips(a, b, c):\n  numTips = a + b - c\n  return numTips \n\nprint(findNumTips(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef find_tipped_customers(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A waiter at 'The Greasy Spoon' restaurant had 29 customers to wait on. During the lunch rush he added another 20 customers. If 34 of the customers didn't leave him a tip, how many customers did leave a tip? ",
      "final_answer": 15.0,
      "index": 76
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 30,
      "duration": 21.36715531349182,
      "templates": [
        "Tom had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a Python function that returns the answer.",
        "Tom had to wash A short sleeve shirts and B long sleeve shirts before school. If he had only washed C of them by the time school started, how many did he not wash?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef numberNotWashed(A,B,C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_washed(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef shirts(A,B,C):\n return (A+B)-C",
          "\nAnswer = A+B-C"
        ],
        [
          "\n\ndef calculateRemainingShirts(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A+B-C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_not_washed(A, B, C):\n  return A + B - C",
          "\nAnswer = B - C"
        ],
        [
          " \n\ndef find_unwashed_shirts(shortsleeve, longsleeve, washed):\n  return (shortsleeve + longsleeve) - washed",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef get_shirts(short, long, washed):\n  return (short + long - washed)",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef numUnwashed(A, B, C):\n  return A+B-C",
          "\nAnswer = 3"
        ],
        [
          "\n\ndef shirts_not_washed(a_shirts, b_shirts, washed_shirts):\n    return a_shirts + b_shirts - washed_shirts",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numShirtsNotWashed(short_shirts, long_shirts, washed):\n  return (short_shirts + long_shirts) - washed",
          "\nAnswer = B + C - (A + B + C) \nAnswer = B - A"
        ],
        [
          "\n\ndef how_many_not_washed(shorts_shirts, longs_shirts, washed):\n  return (shorts_shirts + longs_shirts) - washed",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef schoolClothes(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef shirtsNotWashed(short, long, num):\n  total = short + long\n  notWashed = total - num\n  return notWashed",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numUnwashedShirts(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B \u2212 C"
        ],
        [
          "\n\ndef num_unwashed(A, B, C):\n    total = A + B\n    return total - C",
          "\nAnswer = (A + B) - C"
        ]
      ]
    },
    "source": {
      "question": " Tom had to wash 10 short sleeve shirts and 25 long sleeve shirts before school. If he had only washed 5 of them by the time school started, how many did he not wash? ",
      "final_answer": 30.0,
      "index": 77
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.269284963607788,
      "templates": [
        "Vanessa had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Vanessa had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef num_files (A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef files_remaining(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef filesRemaining(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A+B - C"
        ],
        [
          "\n\ndef flash_drive_files(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef deleted_files(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_files(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Vanessa had 16 music files and 48 video files on her flash drive. If she deleted 30 of the files, how many files were still on her flash drive? ",
      "final_answer": 34.0,
      "index": 78
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.25194501876831,
      "templates": [
        "Kaleb started his own lawn mowing business. In the spring he made A dollars mowing lawns and in the summer he made B dollars. If he had to spend C dollars buying supplies, how much money did he end up with?\nWrite a Python function that returns the answer.",
        "Kaleb started his own lawn mowing business. In the spring he made A dollars mowing lawns and in the summer he made B dollars. If he had to spend C dollars buying supplies, how much money did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0,
        50.0,
        50.0,
        50.0,
        50.0
      ],
      "completions": [
        [
          "\n\ndef moneyMade(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef lawn_business_profits(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef get_profit(A, B, C):\n    return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef Kaleb_earnings(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef earnings(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_profit(A, B, C):\n  profit = A + B - C\n  return profit",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb started his own lawn mowing business. In the spring he made 4 dollars mowing lawns and in the summer he made 50 dollars. If he had to spend 4 dollars buying supplies, how much money did he end up with? ",
      "final_answer": 50.0,
      "index": 79
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.418270826339722,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef extra_apples(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extraFruit(A, B, C):\n  return (A + B) - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef extraFruit(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " The school cafeteria ordered 6 red apples and 15 green apples for students lunches. But, if only 5 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 16.0,
      "index": 80
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 30,
      "duration": 21.381800174713135,
      "templates": [
        "Bianca picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Bianca pick?\nWrite a Python function that returns the answer.",
        "Bianca picked A tulips and B roses to make flower bouquets. If she only used C of the flowers though, how many extra flowers did Bianca pick?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef extra_flowers(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A,B,C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flower_calculator(a, b, c): \n  # calculates the extra amount of flowers picked\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a, b, c):\n  extra = a + b - c\n  return extra",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef flower_count(a, b, c):\n  return a+b-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A,B,C):\n  total_bouq = A + B\n  extra_flowers = total_bouq - C\n  return extra_flowers",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(A, B, C):\n  total = A+B-C\n  return total\n\nprint(extra_flowers(4, 6, 3))\n\n# Output: 7",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a,b,c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a,b,c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a,b,c):\n  return (a + b) - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef flower_bouquets(a,b,c):\n    return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_flowers(a, b, c):\n  return a + b - c",
          "\nAnswer = (A + B) - C"
        ]
      ]
    },
    "source": {
      "question": " Bianca picked 39 tulips and 49 roses to make flower bouquets. If she only used 81 of the flowers though, how many extra flowers did Bianca pick? ",
      "final_answer": 7.0,
      "index": 81
    }
  },
  {
    "result": 19.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.754254817962646,
      "templates": [
        "While on vacation, Nancy took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a Python function that returns the answer.",
        "While on vacation, Nancy took A pictures at the zoo and B at the museum. If she later deleted C of the pictures, how many pictures from her vacation did she still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        19.0,
        19.0,
        19.0,
        19.0
      ],
      "completions": [
        [
          "\n\ndef picture_num(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(A, B, C):\n    return (A+B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef still_pics(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_pics(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numPictures(a,b,c):\n  return a + b - c\n\nprint(numPictures(A, B, C))",
          " \nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C): \n    \n    remaining_pictures = A + B - C \n\n    return remaining_pictures\n\nprint(remaining_pictures(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calPictures(a,b,c):\n  return a+b-c\n\n# Call the function\ncalPictures(a,b,c)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pictures(a, b, c):\n  return (a + b - c)\n\nAnswer: pictures(A, B, C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef vacation_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While on vacation, Nancy took 49 pictures at the zoo and 8 at the museum. If she later deleted 38 of the pictures, how many pictures from her vacation did she still have? ",
      "final_answer": 19.0,
      "index": 82
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 18,
      "duration": 12.776427984237671,
      "templates": [
        "Gwen had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a Python function that returns the answer.",
        "Gwen had A math problems and B science problems for homework. If she finished C of the problems at school, how many problems did she have to do for homework?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef homework(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef get_homework_problems_num(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef homework_problems(A, B, C):\n  problems_left = A + B - C\n  return problems_left\n\nprint(homework_problems(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef homework_problems(math, science, finished):\n  return (math + science - finished)",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          " \n\ndef remainingProblems(a, b, c): \n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_homework(a,b,c):\n    return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Gwen had 18 math problems and 11 science problems for homework. If she finished 24 of the problems at school, how many problems did she have to do for homework? ",
      "final_answer": 5.0,
      "index": 83
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.806614875793457,
      "templates": [
        "For Halloween Katie and her sister combined the candy they received. Katie had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a Python function that returns the answer.",
        "For Halloween Katie and her sister combined the candy they received. Katie had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef remaining_candy(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef left_over_candy(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_leftover(A, B, C):\n  return A+B-C",
          "\n\nAnswer = A+B-C"
        ],
        [
          "\n\ndef candy_remaining(A,B,C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " For Halloween Katie and her sister combined the candy they received. Katie had 10 pieces of candy while her sister had 6. If they ate 9 pieces the first night, how many pieces do they have left? ",
      "final_answer": 7.0,
      "index": 84
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 20,
      "duration": 15.147356033325195,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A,B,C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A+B-C",
          "\n\nA + B - C = \nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA - C + B = Answer = A + B - C"
        ],
        [
          "\n\ndef num_cats_left(A, B, C):\n    return A+B-C",
          "\n\nA - C = B\nAnswer = B"
        ],
        [
          "\n\ndef catsRemaining(A, B, C): \n  return A + B - C",
          "\nA - C + B = Answer =  A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  cats_left = A + B - C\n  return cats_left\n\nprint(cats_left(A, B, C))",
          "\nA - C + B = Answer =  A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n  return A + B - C",
          "\n\nA - B + C = Answer \nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 15 siamese cats and 49 house cats. During a sale they sold 19 cats. How many cats do they have left? ",
      "final_answer": 45.0,
      "index": 85
    }
  },
  {
    "result": 21.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.80004096031189,
      "templates": [
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a Python function that returns the answer.",
        "There were A girls and B boys trying out for the schools basketball team. If only C of them got called back, how many students didn't make the cut?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        21.0,
        21.0,
        21.0,
        21.0,
        21.0
      ],
      "completions": [
        [
          "\n\ndef noCallBacks(A,B,C):\n  return (A+B-C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef students_not_called_back(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef basketballTeam(A, B, C):\n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef cut_count(A, B, C):\n     return (A + B) - C \n \nprint(cut_count(A, B, C))",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numOfCuts(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A+B-C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " There were 9 girls and 14 boys trying out for the schools basketball team. If only 2 of them got called back, how many students didn't make the cut? ",
      "final_answer": 21.0,
      "index": 86
    }
  },
  {
    "result": 58.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.818445920944214,
      "templates": [
        "Haley had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a Python function that returns the answer.",
        "Haley had A music files and B video files on her flash drive. If she deleted C of the files, how many files were still on her flash drive?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        58.0,
        58.0,
        58.0,
        58.0,
        58.0
      ],
      "completions": [
        [
          "\n\ndef remaining_files(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef remaining_files(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numFiles(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalFiles(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_files (A, B, C):\n  return (A + B - C)\n\nprint(remaining_files(A, B, C))",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Haley had 27 music files and 42 video files on her flash drive. If she deleted 11 of the files, how many files were still on her flash drive? ",
      "final_answer": 58.0,
      "index": 87
    }
  },
  {
    "result": 19.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.049841165542603,
      "templates": [
        "While shopping, Maria bought A green towels and B white towels. If she gave her mother C of them, how many towels did Maria end up with?\nWrite a Python function that returns the answer.",
        "While shopping, Maria bought A green towels and B white towels. If she gave her mother C of them, how many towels did Maria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        19.0,
        19.0,
        19.0,
        19.0,
        19.0
      ],
      "completions": [
        [
          "\n\ndef num_towels(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_towels(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalTowels(A,B,C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels_left(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B -C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_towel_count(a, b, c):\n  return (a+b)-c",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towel_count(a,b,c):\n  total = a + b\n  remaining = total - c\n  return remaining\n\nprint(towel_count(A,B,C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels(A, B, C):\n  total = A + B - C\n  return total\n\nprint(towels(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_towels(a, b, c):\n  return (a + b) - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " While shopping, Maria bought 40 green towels and 44 white towels. If she gave her mother 65 of them, how many towels did Maria end up with? ",
      "final_answer": 19.0,
      "index": 88
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.589305639266968,
      "templates": [
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a Python function that returns the answer.",
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef compute_tip (A, B, C):\n  return (A + B - C)",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_tips(A, B, C):\n    return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tip_count(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\nDef function(): \n    A = int(input(\"Number of customers to wait on: \"))\n    B = int(input(\"Number of additional customers: \"))\n    C = int(input(\"Number of customers that did not leave a tip: \"))\n    return (A+B) - C\n\nprint(\"Number of customers that left a tip:\", function())",
          "\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_tips(A, B, C):\n  return (A + B) - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_tips(a,b,c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A waiter at 'The Greasy Spoon' restaurant had 39 customers to wait on. During the lunch rush he added another 12 customers. If 49 of the customers didn't leave him a tip, how many customers did leave a tip? ",
      "final_answer": 2.0,
      "index": 89
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.015315294265747,
      "templates": [
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a Python function that returns the answer.",
        "A pet store had A siamese cats and B house cats. During a sale they sold C cats. How many cats do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef petStoreCats(A,B,C):\n    return A + B - C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n    return A + B - C",
          "\n\nA + B - C = Answer \nAnswer = A + B - C"
        ],
        [
          "\n\ndef cats_left(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef catsLeft(A, B, C):\n  remainingCats = A + B - C\n  return remainingCats\n\nprint(catsLeft(A, B, C))",
          "\n\nA - C + B = Answer = A + B - C"
        ],
        [
          "\n\ndef catsLeft(A, B, C):\n  return A + B - C",
          "\n\nA - C = B\nAnswer = B"
        ],
        [
          "\n\ndef cats_left(A,B,C):\n  return A+B-C",
          "\nA - C = Answer = B cats"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 19 siamese cats and 45 house cats. During a sale they sold 56 cats. How many cats do they have left? ",
      "final_answer": 8.0,
      "index": 90
    }
  },
  {
    "result": 26.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.372942209243774,
      "templates": [
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a Python function that returns the answer.",
        "A waiter at 'The Greasy Spoon' restaurant had A customers to wait on. During the lunch rush he added another B customers. If C of the customers didn't leave him a tip, how many customers did leave a tip?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        26.0,
        26.0,
        26.0,
        26.0,
        26.0
      ],
      "completions": [
        [
          "\n\ndef customer_tips(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_tips(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tip_calculator(A, B, C):\n  return (A+B) - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_tip(A, B, C):\n  return (A+B)-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          " \n\ndef calculate_tips(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_tips(a, b, c):\n  return a + b - c",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A waiter at 'The Greasy Spoon' restaurant had 26 customers to wait on. During the lunch rush he added another 27 customers. If 27 of the customers didn't leave him a tip, how many customers did leave a tip? ",
      "final_answer": 26.0,
      "index": 91
    }
  },
  {
    "result": 59.0,
    "meta": {
      "n_calls": 22,
      "duration": 15.388566732406616,
      "templates": [
        "Rachel bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a Python function that returns the answer.",
        "Rachel bought two coloring books. One had A pictures and the other had B. After one week she had already colored C of the pictures. How many pictures does she still have to color?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        59.0,
        59.0,
        59.0,
        59.0
      ],
      "completions": [
        [
          "\n\ndef remaining_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_pictures(A,B,C):\n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remColoring(A, B, C): \n  return A + B - C",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef coloring_page_left (A, B, C):\n  return (A + B - C)",
          "\nAnswer = (A + B) - C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef remaining_pictures(a,b,c):\n  return (a+b)-c",
          "\nAnswer = C - (A + B)"
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  return (A + B) - C",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef remaining_pictures(A, B, C):\n  return A + B - C",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef remainingColoring(A, B, C):\n  return A + B - C",
          "\n\nAnswer = C - (A + B)"
        ],
        [
          "\n\ndef num_of_pictures_to_color(a, b, c):\n  return (a + b) - c",
          "\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef remaining_pictures(a, b, c):\n    return a + b - c",
          "\n\nAnswer = (A + B) - C"
        ],
        [
          "\n\ndef num_of_pictures(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Rachel bought two coloring books. One had 24 pictures and the other had 39. After one week she had already colored 4 of the pictures. How many pictures does she still have to color? ",
      "final_answer": 59.0,
      "index": 92
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.997215986251831,
      "templates": [
        "While shopping, Emily bought A green towels and B white towels. If she gave her mother C of them, how many towels did Emily end up with?\nWrite a Python function that returns the answer.",
        "While shopping, Emily bought A green towels and B white towels. If she gave her mother C of them, how many towels did Emily end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef num_towels(A, B, C):\n  return (A+B)-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels (A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef towels(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_towels(A,B,C):\n  return A+B-C",
          "\nA + B - C = \nAnswer = A + B - C"
        ],
        [
          "\n\ndef number_of_towels(A,B,C):\n return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " While shopping, Emily bought 5 green towels and 30 white towels. If she gave her mother 26 of them, how many towels did Emily end up with? ",
      "final_answer": 9.0,
      "index": 93
    }
  },
  {
    "result": 23.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.935914039611816,
      "templates": [
        "For Halloween Katie and her sister combined the candy they received. Katie had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a Python function that returns the answer.",
        "For Halloween Katie and her sister combined the candy they received. Katie had A pieces of candy while her sister had B. If they ate C pieces the first night, how many pieces do they have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        23.0,
        23.0,
        23.0,
        23.0,
        23.0
      ],
      "completions": [
        [
          "\n\ndef remaining_candy(A, B, C):\n  return (A + B) - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_left(A,B,C):\n  return A+B-C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef remaining_candy(A,B,C):\n    return (A + B - C)\n\nremaining_candy(5,10,3)\n# Returns 12",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef combine_candy(A, B, C): \n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candy_leftover(A,B,C):\n  return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef leftover_candy(a, b, c):\n    total_candy = a + b\n    return total_candy - c",
          "\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Katie and her sister combined the candy they received. Katie had 8 pieces of candy while her sister had 23. If they ate 8 pieces the first night, how many pieces do they have left? ",
      "final_answer": 23.0,
      "index": 94
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 12,
      "duration": 7.84196400642395,
      "templates": [
        "Ned was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a Python function that returns the answer.",
        "Ned was trying to expand his game collection. He bought A games from a friend and bought B more at a garage sale. If C of the games didn't work, how many good games did he end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef good_games(A, B, C): \n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef find_working_games(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef numberofgoodgames(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_good_games(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_games(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef goodGames(A, B, C):\n  totalGames = A + B\n  goodGames = totalGames - C\n  return goodGames",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Ned was trying to expand his game collection. He bought 50 games from a friend and bought 27 more at a garage sale. If 74 of the games didn't work, how many good games did he end up with? ",
      "final_answer": 3.0,
      "index": 95
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.31202220916748,
      "templates": [
        "For the school bake sale Wendy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a Python function that returns the answer.",
        "For the school bake sale Wendy made pastries. She baked A cupcakes and B cookies. After the sale she had C to take back home. How many pastries did she sell?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef pastriesSold(A,B,C):\n    return A + B - C",
          "\n\nA + B - C = Answer\nAnswer = A + B - C"
        ],
        [
          "  \n\ndef pastries_sold(A,B,C):\n  return A+B-C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculate_pastries(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef pastries_sold(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pastries_sold(A, B, C):\n  return (A + B) - C",
          "\nA + B - C = Answer \nAnswer = 20"
        ],
        [
          "\n\ndef sale_calculation(cupcakes, cookies):\n  return cupcakes + cookies - leftovers\n\nresult = sale_calculation(A, B) - C\nprint(result)",
          "\nAnswer = A+B-C"
        ],
        [
          " \n\ndef wendys_bake_sale(a, b, c):\n    return a + b - c",
          "\nA+B - C = Answer\nAnswer = A+B-C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Wendy made pastries. She baked 41 cupcakes and 31 cookies. After the sale she had 32 to take back home. How many pastries did she sell? ",
      "final_answer": 40.0,
      "index": 96
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.767836809158325,
      "templates": [
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a Python function that returns the answer.",
        "The school cafeteria ordered A red apples and B green apples for students lunches. But, if only C students wanted fruit, how many extra did the cafeteria end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef numExtra(A, B, C):\n  return (A + B - C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef extra_apples (A, B, C): \n  return A + B - C",
          "\nAnswer = (A+B)-C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A+B-C",
          "\nAnswer = A+B-C"
        ],
        [
          "\n\ndef extra_apples(A, B, C):\n  return A+B-C",
          "\nA + B - C = Answer \nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " The school cafeteria ordered 25 red apples and 17 green apples for students lunches. But, if only 10 students wanted fruit, how many extra did the cafeteria end up with? ",
      "final_answer": 32.0,
      "index": 97
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.432302951812744,
      "templates": [
        "At the arcade, Jerry won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he spent C of his tickets on a hat, how many tickets does Jerry have left?\nWrite a Python function that returns the answer.",
        "At the arcade, Jerry won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he spent C of his tickets on a hat, how many tickets does Jerry have left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef tickets_left(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets_left(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef tickets_left(A, B, C):\n  return (A+B)-C",
          "\n\nAnswer = A + B - C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " At the arcade, Jerry won 29 tickets playing 'whack a mole' and 17 tickets playing 'skee ball'. If he spent 12 of his tickets on a hat, how many tickets does Jerry have left? ",
      "final_answer": 34.0,
      "index": 98
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.398967981338501,
      "templates": [
        "Cody had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a Python function that returns the answer.",
        "Cody had A dollars. For his birthday he got B more dollars but spent C on a new game. How much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef calculateMoney(A, B, C):\n    return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_now(A, B, C):\n    return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          " \n\ndef total_money(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef calculateMoney(A, B, C):\n     return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_total(A, B, C):\n  return A + B - C",
          "\nAnswer =A + B - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef money_count(a, b, c):\n  return a + b - c",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef money_total(A, B, C):\n  total = A + B - C\n  return total",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " Cody had 45 dollars. For his birthday he got 9 more dollars but spent 19 on a new game. How much money does he have now? ",
      "final_answer": 35.0,
      "index": 99
    }
  },
  {
    "result": 67.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.08953595161438,
      "templates": [
        "For the school bake sale Carol made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Carol made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        67.0,
        67.0,
        67.0,
        67.0,
        67.0
      ],
      "completions": [
        [
          "\n\ndef bake_sale(A,B,C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bake_sale_total(A,B,C):\n  return A+B+C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bakeSale(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef Cupcakes(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numOfCupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bake_sale(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A, B, C):\n  return (A*B)+C",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Carol made 30 cupcakes. If she sold 9 of them and then made 28 more, how many cupcakes would she have? ",
      "final_answer": 49.0,
      "index": 100
    }
  },
  {
    "result": 62.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.686859607696533,
      "templates": [
        "For Halloween Faye scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Faye have now?\nWrite a Python function that returns the answer.",
        "For Halloween Faye scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Faye have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        62.0,
        62.0,
        62.0,
        62.0,
        62.0
      ],
      "completions": [
        [
          "\n\ndef remaining_candy(A, B, C): \n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef pieces_of_candy(A,B,C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef candiesLeft(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " For Halloween Faye scored 47 pieces of candy. She ate 25 pieces the first night and then her sister gave her 40 more pieces. How many pieces of candy does Faye have now? ",
      "final_answer": 62.0,
      "index": 101
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.547120809555054,
      "templates": [
        "Kaleb had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Kaleb have?\nWrite a Python function that returns the answer.",
        "Kaleb had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Kaleb have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          "\n\ndef books(A, B, C):\n  return A-B+C\n  \nprint(books(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef numBooks (A, B, C):\n  return A - B + C\n\nAnswer = numBooks(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef books_own(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef sumBooks(A,B,C):\n  return A - B + C \n  \nAnswer: Kaleb would have A-B+C books.",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_books(A, B, C):\n    return A - B + C\n\nprint(total_books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef kaleb_books(a,b,c):\n  return a - b + c\n\nprint(kaleb_books(a,b,c))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Kaleb had 34 books. If he sold 17 of them and used the money he earned to buy 7 new books, how many books would Kaleb have? ",
      "final_answer": 24.0,
      "index": 102
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.06417679786682,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef fourth_grade(A, B, C):\n  return A + C - B\n\nanswer = fourth_grade(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef Grade_4(A, B, C):\n    return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade():\n  return A + C - B\n\nprint(fourthGrade())",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(A, B, C):\n  return A + C - B \n\nanswer = fourthGrade(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade(A, B, C):\n    return A - B + C\n\nAnswer = fourth_grade(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_student_count(a, b, c):\n  return a + c - b\n\ntotal = get_student_count(A, B, C)\nprint(total)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef student_num(a, b, c):\n  return a + c - b\n\nprint(student_num(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(a,b,c):\n  return a + c - b\n\nanswer = fourthGrade(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_total(a, b, c):\n  total = a - b + c\n  return total\n\nprint(calculate_total(a, b, c))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGradeStudents(a, b, c):\n  return a + c - b\nanswer = fourthGradeStudents(A, B, C)\nprint(answer)",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " In fourth grade there were 10 students at the start of the year. During the year 4 students left and 42 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 48.0,
      "index": 103
    }
  },
  {
    "result": 61.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.065623998641968,
      "templates": [
        "Oliver had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a Python function that returns the answer.",
        "Oliver had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        61.0,
        61.0,
        61.0,
        61.0,
        61.0
      ],
      "completions": [
        [
          " \n\ndef get_final_balance(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef money_left(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_money(A,B,C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef moneyCalc(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef money_left(A,B,C):\nreturn A-B+C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Oliver had 33 dollars in January. By March he had spent 4 dollars. If he got another 32 dollars from his mom, how much money would he have? ",
      "final_answer": 61.0,
      "index": 104
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.818413972854614,
      "templates": [
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a Python function that returns the answer.",
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef total_roses(A, B, C):\n    return A - B + C\n\ntotal_roses(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_roses(A, B, C):\n  return A - B + C\n\nprint (total_roses(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_roses(A, B, C):\n  return A - B + C\n\nprint(number_of_roses(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses_count(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses (A, B, C):\n  return A - B + C\n  \nprint(roses(A, B, C))",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " A florist had 37 roses. If she sold 16 of them and then later picked 19 more, how many roses would she have? ",
      "final_answer": 40.0,
      "index": 105
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.16526794433594,
      "templates": [
        "A teacher had A worksheets to grade. If she graded 4, but then another B were turned in, how many worksheets would she have to grade?\nWrite a Python function that returns the answer.",
        "A teacher had A worksheets to grade. If she graded 4, but then another B were turned in, how many worksheets would she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_worksheets(num_graded, num_handed_in):\n  return num_graded + num_handed_in\n\ntotal_worksheets = num_worksheets(4, 1)\nprint(total_worksheets) #prints 5",
          "\nAnswer = 5"
        ],
        [
          "\n\ndef grade_worksheets(grade_A, grade_B):\n  return grade_A + grade_B\n\nnum_worksheets = grade_worksheets(4, 1)\nprint(num_worksheets) # output: 5",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheet_grading(a, b):\n  return a + b\n\nprint(worksheet_grading(4, 1))\n# Output: 5",
          "\nAnswer = 5"
        ],
        [
          "\n\ndefWorksheetGrader(existing, new): \n  total = existing + new\n  return total\n\nprint(WorksheetGrader(4, 1)) \n# Output: 5",
          "\nAnswer = 8"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n    return a + b\n\nprint(worksheets_to_grade(4, 1))  # prints 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef worksheetsToGrade(a, b):\n  return a + b\n  \nprint(worksheetsToGrade(4, 1))  # Output: 5",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n  return a + b\n\nprint(worksheets_to_grade(4, 1))\n# Output: 5",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(num_worksheets):\n  return num_worksheets + 4\n\nprint(worksheets_to_grade(4))\n# Output: 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets(A, B):\n    return A + B\n\nprint(worksheets(4, 1))\n\n# Output: 5",
          "\n\nAnswer = 8"
        ],
        [
          "\n\ndef totalGrade(a,b):\n  return a + b\n  \nprint(totalGrade(4,1)) # Returns 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef gradeWorksheets(A, B):\n  return A + B\n\nprint(gradeWorksheets(4, 1)) # Prints 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n  return a + b\n\nprint(grade_worksheets(4, 1)) # Output: 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef total_worksheets(num_A, num_B):\n  return num_A + num_B\n\nworksheets = total_worksheets(4, 1)\nprint(worksheets)  # Output: 5",
          "\n\nAnswer = 4 + B"
        ],
        [
          "\n\ndef grade_worksheets(num_graded, additional_worksheets):\n  return num_graded + additional_worksheets\n\nanswer = grade_worksheets(4, 1)\nprint(answer)\n\nOutput: 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef num_graded_worksheets(A, B):\n  return A + B\n\nprint(num_graded_worksheets(4, 1)) \n# Returns 5",
          "\n\nAnswer = 5 worksheets."
        ],
        [
          "\n\ndef worksheets_to_grade(first_grade, additional_submissions):\n  return first_grade + additional_submissions\n\nprint(worksheets_to_grade(4, 2)) # will output 6",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef graded_worksheets(a,b):\n  return a+b  \n\nprint(graded_worksheets(4,1))\n\nOutput: 5",
          "\n\nAnswer = 8"
        ],
        [
          " \n\ndef grade_worksheets(start): \n  return start + 1\n\n# To find total number of worksheets to grade\ntotal_worksheets = grade_worksheets(4) # Returns 5\nprint(total_worksheets)",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef WorksheetsToGrade(a, b):\n    return a + b\n\nAnswer: WorksheetsToGrade(4, 1) \nAnswer = 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef numWorksheetsToGrade(gradeA, gradeB):\n  return gradeA + gradeB\n\nnumWorksheetsToGrade(4, 1) = 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef grade_worksheets():\n  num_worksheets = 4\n  num_additional = 1\n  total_worksheets = num_worksheets + num_additional\n  return total_worksheets\n\nprint(grade_worksheets()) #output: 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef total_worksheets(wA, wB):\n    return wA + wB\n\ntotal_worksheets(4, 1)  # returns 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef total_worksheets(graded, new):\n  return graded + new\n\nprint(total_worksheets(4, 1))\n# Output: 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef numOfWorksheetsGraded(numA, numB): \n    return numA + numB \n\nprint(numOfWorksheetsGraded(4, 1)) \n\nOutput: 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(initial_worksheets, additional_worksheets):\n  total_worksheets = initial_worksheets + additional_worksheets\n  return total_worksheets\n\nresult = grade_worksheets(4, 1)\nprint(result) # prints 5",
          "\n\nAnswer = 5 Worksheets"
        ]
      ]
    },
    "source": {
      "question": " A teacher had 6 worksheets to grade. If she graded 4, but then another 18 were turned in, how many worksheets would she have to grade? ",
      "final_answer": 20.0,
      "index": 106
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.26903009414673,
      "templates": [
        "A book store had A books in the bargin bin. If they sold B books, but then put C more in the bin, how many books would be in the bin?\nWrite a Python function that returns the answer.",
        "A book store had A books in the bargin bin. If they sold B books, but then put C more in the bin, how many books would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_bargin_bin_books(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bin_num(A, B, C):\n  return A - B + C\n\nbin_num(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          " \n\ndef totalBooks(A, B, C): \n  return A - B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books (A, B, C):\n    return A - B + C\n    \ntotal_books(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calculateBarginBooks(A, B, C):\n  return A - B + C\n\nprint(calculateBarginBooks(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef number_of_books(A, B, C):\n  return A - B + C \n\nprint(number_of_books(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books_in_bin(A,B,C):\n    total = A + B + C\n    return total",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargainbooks(A, B, C):\n  total_books = A - B + C\n  return total_books\n\nprint(bargainbooks(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef booksInBin(A, B, C):\n  return A - B + C\n\nprint(booksInBin(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargain_bin_books(A,B,C):\n  return A - B + C\n  \nprint(bargain_bin_books(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef booksInBin(A, B, C):\n    return A - B + C\n\nprint(booksInBin(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_of_books(A, B, C):\n  return A-B+C\n\nprint(num_of_books(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return A - B + C\n\nprint(total_books(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return A - B + C \n\ntotal_books(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargain_bin_books(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargain_bin_books(A, B, C):\n  return A - B + C\n\nprint(bargain_bin_books(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef books_in_bin(A, B, C):\n  return A - B + C\n\nanswer = books_in_bin(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargain_bin_books(A, B, C):\n  return A - B + C\n  \nprint(bargain_bin_books(A, B, C))",
          " \nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargain_bin_books(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalBooks(A, B, C):\n    return A-B+C\n\n#Call the function\ntotalBooks(A, B, C)",
          " \n\nAnswer = A + B + C"
        ],
        [
          " \n\ndef totalBooks(A, B, C):\n  return A - B + C\n\ntotalBooks(A, B, C)",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef bargain_books(a, b, c):\n  return a + b - c",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalBooksInBarginBin(A, B, C):\n    return A - B + C\n\ntotalBooksInBarginBin(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bargin_bin(A, B, C):\n  return A - B + C\n\nbargin_bin(A, B, C)",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef BargainBinBookCount(A, B, C):\n  return A - B + C \n  \nAnswer = BargainBinBookCount(A, B, C)",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " A book store had 41 books in the bargin bin. If they sold 33 books, but then put 2 more in the bin, how many books would be in the bin? ",
      "final_answer": 10.0,
      "index": 107
    }
  },
  {
    "result": 41.0,
    "meta": {
      "n_calls": 34,
      "duration": 28.687837839126587,
      "templates": [
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        41.0,
        69.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A, B, C):\n  return A + B + C\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_customers(A,B,C):\n  return A + (C - B)\n\nprint(num_customers(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_customers(a, b, c):\n  return a + c - b\n  \nprint(num_customers(a, b, c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef waiterTotal(a,b,c):\n  return a - b + c\n\nprint(waiterTotal(a,b,c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A,B,C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\nprint(total_customers(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef number_of_customers(a, b, c):\n  return a - b + c\n\nnumber_customers = number_of_customers(a, b, c)\nprint(\"The waiter has \" + str(number_customers) + \" customers.\")",
          " \n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customer_num(A,B,C):\n  return A-B+C\n\ncustomer_num(10,5,3) # returns 8",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\nprint(total_customers(10, 5, 3))\n# Output: 8",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + b + c\n\nprint(total_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customers(a, b, c):\n  return a - b + c\n\n# Example:\nprint(customers(6, 4, 2))  # Output: 4",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + c - b\n\nprint(total_customers(a, b, c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef waiter_customer_total(A, B, C):\n    return A - B + C\n\nprint(waiter_customer_total(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_customers(a,b,c):\n  return a-b+c\n\n# Call the function\nnum_customers(A,B,C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customers(A, B, C):\n  return A-B+C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + c - b\n\ntotal_customers(a, b, c)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef waiterCustomer(a,b,c):\n    return a - b + c\n    \nanswer = waiterCustomer(a, b, c) \nprint(\"The waiter now has\", answer, \"customers.\")",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 19 customers to wait on. If 14 customers left and he got another 36 customers, how many customers would he have? ",
      "final_answer": 41.0,
      "index": 108
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.272608041763306,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\ndef bumper_cars(A,B,C):\n  return A-B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_line(A,B,C):\n    return A - B + C\n\nprint(bumper_line(20, 5, 10))\n#Output: 25",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_line(A, B, C):\n    return A - B + C\n    \nprint(new_line(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_people(A, B, C):\n  return A - B + C\n\nprint(total_people(50, 10, 5))\n# Output: 45",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef bumperCarQueue(A, B, C):\n\treturn A - B + C\n\nprint(bumperCarQueue(A, B, C))",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " At the fair there were 9 people in line for the bumper cars. If 6 of them got tired of waiting and left and 3 more got in line, how many people would be in line? ",
      "final_answer": 6.0,
      "index": 109
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 47.24930191040039,
      "templates": [
        "A teacher had A worksheets to grade. If she graded 2, but then another B were turned in, how many worksheets would she have to grade?\nWrite a Python function that returns the answer.",
        "A teacher had A worksheets to grade. If she graded 2, but then another B were turned in, how many worksheets would she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_worksheets(num_graded, num_additional):\n  return (num_graded + num_additional)\n\nprint(num_of_worksheets(2, 1))\n# Output: 3",
          "\nAnswer = 2 + B"
        ],
        [
          "\n\ndef num_worksheets(graded, turned_in):\n  return graded + turned_in\n\nprint(num_worksheets(2, 1)) # 3",
          "\n\nAnswer = 3"
        ],
        [
          "\n\ndef totalWorksheets(a, b):\n  return a + b\n\ntotalWorksheets(2, 1)  # returns 3",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef number_of_worksheets_to_grade(a, b):\n  return a + b\n\nworksheets_graded = 2\nadditional_worksheets = 1\n\nanswer = number_of_worksheets_to_grade(worksheets_graded, additional_worksheets)\n\nprint(answer) # 3",
          "\nAnswer = 4"
        ],
        [
          "\n\ndef grading_worksheets(a, b): \n  return a + b\n\nprint(grading_worksheets(2, 1)) \n# Output: 3",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef num_worksheets_to_grade(a, b):\n  return a + b\n\nprint(num_worksheets_to_grade(2, 1))\n\n# Output: 3",
          "\n\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(grade_a, grade_b):\n  return (grade_a+grade_b)\n  \nanswer = worksheets_to_grade(2,1)\nprint(answer) # prints 3",
          "\n\nAnswer = 3 Worksheets"
        ],
        [
          "\n\ndef num_worksheets(a, b):\n    return a + b \n\nprint(num_worksheets(2, 1))\n# Output: 3",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef numWorksheets(aWorksheets,numB):\n  return aWorksheets + numB\n\nprint(numWorksheets(2,1)) # prints 3",
          "\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef numGrade(A, B):\n  return A + B\n\nprint(numGrade(2, B))",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef num_worksheets(x, y):\n  return x + y\n\nprint(num_worksheets(2, 1))\n# Output: 3",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(num_a_worksheets, num_b_worksheets):\n    total_worksheets = num_a_worksheets + num_b_worksheets\n    average_worksheets_graded = (num_a_worksheets + 2) / 2\n    return total_worksheets - average_worksheets_graded\n\nprint(grade_worksheets(2, 1",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef total_worksheets_to_grade(graded_a, graded_b):\n    return graded_a + graded_b\n\ntotal_worksheets_to_grade(2, 1) # returns 3",
          "\nAnswer = 3"
        ],
        [
          "\n\ndef worksheets_to_grade(graded, new): \n  return graded + new \n\nprint(worksheets_to_grade(2, 1)) \n\n# Output: 3",
          "\n\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheet_grade(grade_A,grade_B):\n    return grade_A + grade_B\n\nprint(worksheet_grade(2,1)) #Outputs 3",
          "\n\nAnswer = 2 + B"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n  return a + b\n  \nprint(worksheets_to_grade(2, 1))\n\n# Output\n3",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheetGrade():\n  total_sheets = 2 + 1\n  return total_sheets\n\nprint(worksheetGrade())  # prints 3",
          "\nAnswer = 3 Worksheets"
        ],
        [
          "\n\ndef grade_worksheets(first, second):\n    return first + second\n\nprint(grade_worksheets(2,1))\n\n# Output: 3",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef grades(A, B):\n  total = A + B\n  return total\n\nprint(grades(2, 1))\n# Output: 3",
          "\nAnswer = 3"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n  return a + b\n\nprint(grade_worksheets(2, 1))\n# Outputs 3",
          "\n\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(submittedA, submittedB):\n  return submittedA + submittedB\n\nprint(grade_worksheets(2, 1)) # 3",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(a,b):\n  total = a + b\n  return total\n\nanswer = worksheets_to_grade(2,2)\nprint(answer) # prints 4",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n    return a + b\n\nprint(worksheets_to_grade(2, 1))\n\n# Output: 3",
          "\n\nAnswer = 4 worksheets"
        ],
        [
          "\n\ndef total_worksheets_to_grade(worksheets_graded, worksheets_submitted):\n  return worksheets_graded + worksheets_submitted\n  \nprint(total_worksheets_to_grade(2,1))\n# Output: 3",
          "\nAnswer = 3 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(A_worksheets, B_worksheets):\n    return A_worksheets + B_worksheets - 2",
          "\n\nAnswer = 4 worksheets"
        ]
      ]
    },
    "source": {
      "question": " A teacher had 7 worksheets to grade. If she graded 2, but then another 46 were turned in, how many worksheets would she have to grade? ",
      "final_answer": 51.0,
      "index": 110
    }
  },
  {
    "result": 33.0,
    "meta": {
      "n_calls": 18,
      "duration": 14.23788595199585,
      "templates": [
        "Paige had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Paige had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        33.0,
        33.0,
        33.0,
        33.0,
        33.0
      ],
      "completions": [
        [
          "\n\ndef add_songs(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef mp3_player(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return A - B + C",
          "\nAnswer = A-B+C"
        ],
        [
          "\n\ndef songs_on_player(A, B, C):\n  return A - B + C",
          "\nAnswer = (A - B + C)"
        ],
        [
          "\n\ndef calculateSongs(A,B,C): \n  return A-B+C",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef new_songs_total(a, b, c):\n  return a - b + c\n\nprint(new_songs_total(A, B, C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numSongs(a, b, c):\n  return a - b + c\n\nprint(numSongs(A, B, C))",
          "\nAnswer = A - B + C"
        ],
        [
          " \n\ndef num_songs(a, b, c):\n  return a - b + c\n  \nnum_songs(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef get_num_songs(a, b, c):\n  return a - b + c",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Paige had 8 songs on her mp3 player. If she deleted 5 old songs from it and then added 30 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 33.0,
      "index": 111
    }
  },
  {
    "result": 52.0,
    "meta": {
      "n_calls": 14,
      "duration": 11.238529920578003,
      "templates": [
        "Maria picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Maria picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        52.0,
        52.0,
        52.0,
        52.0,
        52.0
      ],
      "completions": [
        [
          "\n\ndef carrots_total(A, B, C):\n  return A - B + C\n  \ncarrots_total(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef totalCarrots(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_carrots(A,B,C):\n  return A - B + C\n\ntotal_carrots(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots_total(A, B, C):\n    return A-(B-C)\n\ncarrots_total(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef carrotsTotal(A, B, C):\n    total = A - B + C\n    return total",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalCarrots(a, b, c): \n  return a - b + c \n\ntotalCarrots(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Maria picked 48 carrots from her garden. If she threw out 11 of them and then picked 15 more the next day, how many carrots would she have total? ",
      "final_answer": 52.0,
      "index": 112
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 18,
      "duration": 15.371978998184204,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0,
        27.0,
        27.0,
        27.0,
        27.0
      ],
      "completions": [
        [
          "\n\ndef orangesInBin(A, B, C):\n  return A - B + C\n  \nAnswer: orangesInBin(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A, B, C):\n  return A - B + C \n\nprint(oranges(A, B, C))",
          "\nAnswer = A+C-B"
        ],
        [
          "\n\ndef orange_count(A, B, C):\n    return A - B + C\n\nprint(orange_count(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A, B, C):\n  return A - B + C\n\nprint(oranges(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef store_oranges(A, B, C):\n  return A - B + C\n\n# Usage\nstore_oranges(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef orange_bin(a, b, c):\n  return a-b+c\n\nprint(orange_bin(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_oranges_count(a, b, c):\n  return a - b + c\n\nprint(get_oranges_count(a, b, c))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef orange_count(a, b, c):\n    return a - b + c\n\nnum_oranges = orange_count(A,B,C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef orange_bin(A,B,C):\n  total_oranges = A - B + C\n  return total_oranges",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A store had 34 oranges in a bin. If they threw away 20 of the old ones and put 13 new ones in the bin how many would be in the bin? ",
      "final_answer": 27.0,
      "index": 113
    }
  },
  {
    "result": 108.0,
    "meta": {
      "n_calls": 38,
      "duration": 34.46295499801636,
      "templates": [
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        108.0,
        108.0,
        26.0,
        108.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\ntotal = total_customers(A, B, C)\nprint(\"Total number of customers:\", total)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef waiter_customer(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef customer_totals(a,b,c):\n  return a+b+c\n\nprint (customer_totals(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a,b,c):\n  return a + b + c\n\nprint(total_customers(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_customers(a, b, c):\n    return a - b + c\n\ntotal_customers = num_customers(a, b, c)\nprint(\"The waiter has a total of \" + str(total_customers) + \" customers.\")",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_customers(a, b, c):\n  return a - b + c\n\nprint(num_customers(a, b, c))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef customerCount(a, b, c): \n  total = a + b + c\n  return total\n\nprint(customerCount(a, b, c))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n    return A + B + C\n\ntotal = total_customers(A, B, C)\nprint(total)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef customers_waited_on(a,b,c):\n  return a-b+c\n\nprint(customers_waited_on(a,b,c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customer_count(a,b,c):\n  return a + b + c\n\nprint(customer_count(a,b,c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          " \n\ndef total_customers(A, B, C):\n    return A - B + C\n\n# To call the function \nprint(total_customers(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A + B + C\n\ntotal_customers(A, B, C)",
          "\nAnswer = A + (B - C)"
        ],
        [
          "\n\ndef numCustomers(a, b, c):\n  total_customers = a + b + c\n  return total_customers\n\nprint(numCustomers(a, b, c))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + b + c\n\nprint(total_customers(a, b, c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef customer_total(A, B, C):\n  return A + C - B\n\nprint(customer_total(A, B, C))",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 47 customers to wait on. If 41 customers left and he got another 20 customers, how many customers would he have? ",
      "final_answer": 26.0,
      "index": 114
    }
  },
  {
    "result": 29.0,
    "meta": {
      "n_calls": 18,
      "duration": 15.367573022842407,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        29.0,
        29.0,
        29.0,
        29.0,
        29.0
      ],
      "completions": [
        [
          "\n\ndef students_in_fourth_grade(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade(A,B,C):\n    return A+C-B\n\nprint(fourth_grade(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n \ndef fourth_grade(A, B, C):\n  return A+C-B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numOfStudents(A, B, C):\n  return A+C-B\n\n#Example\nnumOfStudents(20, 5, 10)\n# returns 25",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_end_students(A, B, C):\n    return A + C - B",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef fourth_grade(a, b, c):\n  return a - b + c\n\nanswer = fourth_grade(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateEndNumberOfStudents(a, b, c):\n  return a + c - b",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef student_count(a, b, c):\n  total = a + c - b\n  return total\n\ntotal_students = student_count(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef studentNumber(a, b, c):\n  return a + c - b\n\nprint(studentNumber(a, b, c))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " In fourth grade there were 33 students at the start of the year. During the year 18 students left and 14 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 29.0,
      "index": 115
    }
  },
  {
    "result": 66.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.026522874832153,
      "templates": [
        "For the school bake sale Katie made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Katie made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        66.0,
        66.0,
        66.0,
        66.0,
        66.0
      ],
      "completions": [
        [
          "\n\ndef bakeSale(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcake_total(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A,B,C): \n  return A+B+C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cupcakes(a, b, c):\n  return a + b + c",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Katie made 26 cupcakes. If she sold 20 of them and then made 20 more, how many cupcakes would she have? ",
      "final_answer": 26.0,
      "index": 116
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.047381162643433,
      "templates": [
        "Adam had A dollars. At the store he spent $2 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a Python function that returns the answer.",
        "Adam had A dollars. At the store he spent $2 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef total_money(A, B):\n  return A + B - 2",
          "\n\nAnswer = A + B - 2"
        ],
        [
          " \n\ndef new_amount(A, B):\n  return (A - 2) + B",
          "\nAnswer = A + B - 2"
        ],
        [
          "\n\ndef new_total(A, B):\n  return A + B - 2\n\nprint(new_total(A, B))",
          "\n\nAnswer = A + B - 2"
        ],
        [
          "\n\ndef add_money(A, B):\n    return A + B - 2",
          "\nAnswer = A + B - 2"
        ],
        [
          " \n\ndef money_total(A, B):\n  return A + B - 2",
          "\nAnswer = A + B - 2"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Adam had 5 dollars. At the store he spent $2 on a new game. If he got another 5 dollars for his allowance, how much money does he have now? ",
      "final_answer": 8.0,
      "index": 117
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.2711820602417,
      "templates": [
        "Tiffany was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Tiffany was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef livesTotal(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef total_lives(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_count(A,B,C):\n  return A-B+C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_remaining(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef Lives(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef lives_total(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_lives(a, b, c):\n    return a - b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalLives(A,B,C):\n\treturn A+B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_remaining(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Tiffany was playing a video game and had 43 lives. In a hard part of the game she lost 14 lives. If she got 27 more lives in the next level, how many lives would she have? ",
      "final_answer": 56.0,
      "index": 118
    }
  },
  {
    "result": 17.0,
    "meta": {
      "n_calls": 26,
      "duration": 22.676487922668457,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        17.0,
        17.0,
        17.0,
        17.0
      ],
      "completions": [
        [
          "\n\ndef num_people_in_line(A,B,C):\n  return A-B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef line_at_fair(A,B,C):\n  return A - B + C\n\nline_at_fair(A,B,C)",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef line_waiters(A,B,C):\n  return A-B+C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef waitingInLine (A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef getTotalPeople(a, b, c):\n  return a - b + c\n\nprint(getTotalPeople(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumperCarsLine(a, b, c):\n  return a - b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumperCars(a, b, c):\n    return a - b + c\n\nprint(bumperCars(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_line(a,b,c):\n  return a - b + c\n\nnew_line(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_car_line(A, B, C):\n  people_in_line = A - B + C\n  return people_in_line\n\n#Example\ntotal_in_line = bumper_car_line(10, 3, 4)\nprint(total_in_line)\n#Output: 11",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_line_waiters(a, b, c):\n    return a - b + c\n\nprint(get_line_waiters(A, B, C))",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_cars(a, b, c):\n  return a - b + c\n\nprint(bumper_cars(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef waiting_in_line(a, b, c):\n    return a - b + c\n\nprint(waiting_in_line(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_car_line(a,b,c):\n  return a - b + c\n\nprint(bumper_car_line(A,B,C))",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " At the fair there were 12 people in line for the bumper cars. If 10 of them got tired of waiting and left and 15 more got in line, how many people would be in line? ",
      "final_answer": 17.0,
      "index": 119
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 20,
      "duration": 18.923553228378296,
      "templates": [
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0,
        50.0,
        50.0,
        50.0,
        50.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\nprint(f\"Total customers: {total_customers(A, B, C)}\")",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n    return A - B + C\n\n# usage example\nnew_customer_count = waiter_customers(10, 5, 3)\nprint(new_customer_count) # prints 8",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_customers(A, B, C):\n  return A - B + C\n\nprint(num_customers(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_customers(A,B,C):\n return A-B+C\n \nprint(total_customers(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef customers_answered(A, B, C):\n  return A - B + C\n\ncustomers_answered(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef customer_total(A,B,C):\n    return A-B+C\n\nprint(customer_total(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customers(A, B, C):\n  return A - B + C\n\nprint(customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + b + c\n\ntotal_customers(a, b, c)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_customers(a, b, c): \n    return a + (c - b)\n\nprint(num_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef getTotalCustomers(A, B, C):\n    total = A - B + C\n    return total\n\ntotalCustomers = getTotalCustomers(A, B, C)\nprint(\"The waiter has a total of\", totalCustomers, \"customers.\")",
          "\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 14 customers to wait on. If 3 customers left and he got another 39 customers, how many customers would he have? ",
      "final_answer": 50.0,
      "index": 120
    }
  },
  {
    "result": 25.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.02774977684021,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        25.0,
        25.0,
        25.0,
        25.0,
        25.0
      ],
      "completions": [
        [
          " \n\ndef calcLine(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_people_in_line(A, B, C):\n    return A - B + C\n\npeople_in_line = calculate_people_in_line(A, B, C)\nprint(\"The number of people in line is\", people_in_line)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef line_change(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_cars(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef waiting_line(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bumper_wait(a,b,c):\n  return a-b+c\n\nprint(\"Total number of people in line:\", bumper_wait(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the fair there were 30 people in line for the bumper cars. If 10 of them got tired of waiting and left and 5 more got in line, how many people would be in line? ",
      "final_answer": 25.0,
      "index": 121
    }
  },
  {
    "result": 79.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.914916753768921,
      "templates": [
        "Faye had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a Python function that returns the answer.",
        "Faye had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        79.0,
        79.0,
        79.0,
        79.0,
        79.0
      ],
      "completions": [
        [
          "\n\ndef num_coloring_books(A, B, C):\n return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_coloring_books(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef coloring_books(A, B, C):\n  return (A - B) + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_coloring_books(A, B, C):\n\treturn A - B + C\n\ntotal = total_coloring_books(A, B, C)\nprint(total)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef coloring_book(A, B, C):\n    return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef faye_coloring_books(a, b, c):\n  return a - b + c\n\nprint(faye_coloring_books(A, B, C))",
          " \nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Faye had 34 coloring books. If she gave away 3 of them, but then bought 48 more, how many would she have total? ",
      "final_answer": 79.0,
      "index": 122
    }
  },
  {
    "result": 10.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.35676908493042,
      "templates": [
        "Paige had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Paige had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        10.0,
        10.0,
        10.0,
        10.0,
        10.0
      ],
      "completions": [
        [
          "\n\ndef numSongs(A, B, C):\n  return A - B + C\n\nnumSongs(A, B, C)",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef calculate_songs(A, B, C):\n  return A - B + C\n\nprint(calculate_songs(A, B, C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef countSongs(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A - B + C\n\nprint(total_songs(A, B, C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef songTotal(A, B, C): \n    return A - B + C",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef mp3_player_songs(a,b,c):\n  return a-b+c",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_total(a, b, c):\n  return a - b + c",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Paige had 11 songs on her mp3 player. If she deleted 9 old songs from it and then added 8 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 10.0,
      "index": 123
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 46.22529983520508,
      "templates": [
        "A teacher had A worksheets to grade. If she graded 4, but then another B were turned in, how many worksheets would she have to grade?\nWrite a Python function that returns the answer.",
        "A teacher had A worksheets to grade. If she graded 4, but then another B were turned in, how many worksheets would she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef num_of_worksheets(numA, numB):\n  return numA + numB\n\nprint(num_of_worksheets(4,1))\n\n# Answer: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef num_worksheets(a, b):\n  return a+b\n\nprint(num_worksheets(4, 1))\n\n# Output: 5",
          "\nAnswer = 5"
        ],
        [
          "\n\ndef number_of_worksheets(a,b):\n  return a + b\n\nanswer = number_of_worksheets(4,1)\nprint(answer) # prints 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(A,B):\n  return A + B\n\nprint(grade_worksheets(4,1)) // Output: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n  return a + b\n\nanswer = grade_worksheets(4, 1)\nprint(answer)\n\n# Output: 5",
          "\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef grade_worksheets(worksheets):\n    total_worksheets = worksheets + 4\n    return total_worksheets\n\nprint(grade_worksheets(4))\n# Output: 8",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef calTotalWorksheets(initialGraded, additionalSubmitted):\n  return initialGraded + additionalSubmitted\n\nprint(calTotalWorksheets(4, 1)) # Output: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          " \n\ndef worksheets_to_grade (a, b):\n  return a + b\n\n  print(worksheets_to_grade(4, 1)) \n\n# Output: 5",
          "\nAnswer = 5"
        ],
        [
          "\n\ndef gradeWorksheets(a, b):\n  return a + b\n\nnumOfWorksheets = gradeWorksheets(4, 1)\n\nprint(numOfWorksheets)\n# Output: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef answer(num_worksheets):\n    return num_worksheets + 4\n\nanswer(4)  # returns 8",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          " \n\ndef numOfWorksheetsToGrade(a,b):\n  return a + b\n\nprint(numOfWorksheetsToGrade(4,1))\n# Output : 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef worksheet_grader(a, b):\n    return a + b\n\nprint(worksheet_grader(4, 1)) # output is 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef grading_worksheets(previous_grade, additional_worksheets):\n    return previous_grade + additional_worksheets\n\nprint(grading_worksheets(4,1))  # returns 5",
          "\nAnswer = 5"
        ],
        [
          "\n\ndef grade_worksheets(initial, additional):\n  return initial + additional\n\nworksheets_to_grade = grade_worksheets(4, 2)\nprint(worksheets_to_grade)\n\n# Output: 6",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef num_worksheets_to_grade(num_graded, num_turned_in): \n    return num_graded + num_turned_in\n\nprint(num_worksheets_to_grade(4, 1)) \n# Output: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef total_worksheets(a_grade, b_grade):\n    return a_grade + b_grade\n\ntotal_worksheets(4, 1)\n# Returns 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef numWorksheets(a, b):\n    return a + b\n\nprint(numWorksheets(4, 1))  # Outputs 5",
          "\nAnswer = 8"
        ],
        [
          "\n\ndef gradeWorksheets(A, B): \n    return A + B \n\nprint(gradeWorksheets(4, 1)) \n# Output: 5",
          "\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n  return a + b\n\ntotal = grade_worksheets(4, 1)\nprint(total)  # Output: 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n    return a + b\n\nworksheets_to_grade(4, 1) # returns 5",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(num_graded, num_turned_in):\n  return num_graded + num_turned_in\n\n# Testing\n\nprint(worksheets_to_grade(4, 1)) # 5",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef worksheetsToGrade():\n  return 4 + 1\n\nprint(worksheetsToGrade()) # prints 5",
          "\n\nAnswer = 5 Worksheets"
        ],
        [
          "\n\ndef WorksheetsToGrade(worksheetsGraded, worksheetsTurnedIn):\n    return worksheetsGraded + worksheetsTurnedIn",
          "\n\nAnswer = 5 worksheets"
        ],
        [
          "\n\ndef worksheet_grade(grade_a, grade_b):\n   return grade_a + grade_b\n\nprint(worksheet_grade(4, 1)) # Output: 5",
          "\nAnswer = 8"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n  return a + b\n  \nanswer = grade_worksheets(4, 1)\nprint(answer) # Output: 5",
          "\nAnswer = 5 worksheets"
        ]
      ]
    },
    "source": {
      "question": " A teacher had 38 worksheets to grade. If she graded 4, but then another 15 were turned in, how many worksheets would she have to grade? ",
      "final_answer": 49.0,
      "index": 124
    }
  },
  {
    "result": 52.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.291717290878296,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        52.0,
        52.0,
        52.0,
        52.0,
        52.0
      ],
      "completions": [
        [
          "\n\ndef totalStudents(A, B, C): \n    return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGradeStudents(A, B, C):\n  return A + C - B\n\nprint(fourthGradeStudents(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef end_year_students(A, B, C):\n    return A+C-B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef grade_four(A, B, C):\n  return A + C - B \n\nprint(grade_four(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef students_in_fourth_grade(a, b, c):\n  return a + c - b\n\nprint(students_in_fourth_grade(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " In fourth grade there were 40 students at the start of the year. During the year 14 students left and 26 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 52.0,
      "index": 125
    }
  },
  {
    "result": 74.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.26090693473816,
      "templates": [
        "Wendy was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Wendy was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        74.0,
        74.0,
        74.0,
        74.0,
        74.0
      ],
      "completions": [
        [
          " \n\ndef lives(A, B, C): \n    return A - B + C",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_total(A, B, C): \n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef lives_remaining(A, B, C):\n  return A - B + C\n\nprint(lives_remaining(A, B, C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef lives_calc(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_lives(A, B, C):\n  return A - B + C",
          "\n\nA + C - B = Answer = "
        ],
        [
          " \n\ndef lives_left(A, B, C):\n    return A + B + C",
          "\n\nAnswer = A+C-B"
        ]
      ]
    },
    "source": {
      "question": " Wendy was playing a video game and had 43 lives. In a hard part of the game she lost 8 lives. If she got 39 more lives in the next level, how many lives would she have? ",
      "final_answer": 74.0,
      "index": 126
    }
  },
  {
    "result": 17.0,
    "meta": {
      "n_calls": 36,
      "duration": 28.361337900161743,
      "templates": [
        "A book store had A books in the bargin bin. If they sold B books, but then put C more in the bin, how many books would be in the bin?\nWrite a Python function that returns the answer.",
        "A book store had A books in the bargin bin. If they sold B books, but then put C more in the bin, how many books would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        17.0,
        -3.0,
        -3.0
      ],
      "completions": [
        [
          "\n\ndef num_books_in_bargain_bin(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef book_store(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n    return A + B + C",
          "\n\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_books(A, B, C): \n  return A - B + C\n\ntotal_books(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\n\ndef numBooks(A, B, C):\n  return A - B + C\n\nprint(numBooks(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_books(A, B, C):\n  return A + B - C\n\nprint(num_books(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalBooksInBargainBin(A, B, C):\n  return A + B - C\n\nprint(totalBooksInBargainBin(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bin_books(A, B, C):\n  return A - B + C\n\nprint(bin_books(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n    total_books = A - B + C\n    return total_books",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef totalBooks(A, B, C):\n  return A + B - C\n\nprint(totalBooks(A,B,C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return A + B - C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_of_books(A, B, C):\n  return A - B + C\n  \nprint(num_of_books(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numBooks(A, B, C):\n    return A - B + C\n\nprint(numBooks(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numberOfBooks(A, B, C):\n  return A - B + C\n  \nprint(numberOfBooks(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_books(A, B, C):\n  return A - B + C\n\nprint(num_books(A, B, C))",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_books_in_bin(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + B - C"
        ],
        [
          "\n\ndef total_books(A, B, C):\n    return A + B - C\n\ntotal_books(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_books_in_bin(A, B, C):\n    return A - B + C\n\n# Calling the function\nprint(num_books_in_bin(A, B, C))",
          "\n\nAnswer = A + B - C"
        ]
      ]
    },
    "source": {
      "question": " A book store had 4 books in the bargin bin. If they sold 3 books, but then put 10 more in the bin, how many books would be in the bin? ",
      "final_answer": 11.0,
      "index": 127
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.064945936203003,
      "templates": [
        "At the arcade Cody won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Cody won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef total_tickets(A, B, C):\n  return A + C - B\n\nprint(total_tickets(15, 5, 10))\n# Output: 20",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_tickets(A, B, C): \n    return A + C - B\n\nprint(total_tickets(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_tickets(A, B, C):\n    return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef win_tickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef tickets(A, B, C):\n  total_tickets = A + C - B\n  return total_tickets",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(A, B, C):\n  total = A + C - B\n  return total",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the arcade Cody won 49 tickets. If he spent 25 tickets on a beanie and later won 6 more tickets, how many would he have? ",
      "final_answer": 30.0,
      "index": 128
    }
  },
  {
    "result": 37.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.085728168487549,
      "templates": [
        "For the school bake sale Bianca made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Bianca made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        37.0,
        25.0,
        37.0,
        37.0,
        37.0
      ],
      "completions": [
        [
          "\n\ndef totalCupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalCupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bake_sale(A, B, C): \n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " For the school bake sale Bianca made 14 cupcakes. If she sold 6 of them and then made 17 more, how many cupcakes would she have? ",
      "final_answer": 25.0,
      "index": 129
    }
  },
  {
    "result": 59.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.352691173553467,
      "templates": [
        "Bianca had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a Python function that returns the answer.",
        "Bianca had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        59.0,
        59.0,
        59.0,
        59.0,
        59.0
      ],
      "completions": [
        [
          "\n\ndef coloring_books(A, B, C):\n  return A - B + C\n  \ntotal_books = coloring_books(A, B, C)\nprint(total_books)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef coloring_books(A, B, C):\n  return A - B + C\n\ntotal = coloring_books(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalColoringBooks(A,B,C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef total_coloring_books(A, B, C):\n  return A - B + C\n  \ntotal_coloring_books(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalColoringBooks(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Bianca had 45 coloring books. If she gave away 6 of them, but then bought 20 more, how many would she have total? ",
      "final_answer": 59.0,
      "index": 130
    }
  },
  {
    "result": 57.0,
    "meta": {
      "n_calls": 34,
      "duration": 30.821898698806763,
      "templates": [
        "Zoe had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Zoe had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        57.0,
        57.0,
        57.0
      ],
      "completions": [
        [
          "\n\ndef calculate_num_songs(A, B, C):\n  return A - B + C\n\nresult = calculate_num_songs(A, B, C)\nprint(result)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef totalSongs(A, B, C): \n  return A - B + C\n\nprint(totalSongs(30, 10, 15)) \n# Output: 35",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef song_numbers(old_songs, new_songs):\n  return old_songs - new_songs \n\nprint(song_numbers(A, B + C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef newSongCount(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef get_total_songs(old_songs, new_songs):\n  return old_songs - new_songs\n\ntotal_songs = get_total_songs(A, B + C)\n\nprint(total_songs)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef num_songs(a, b, c):\n  return a - b + c\n  \n#Example\n\ntotal_songs = num_songs(120, 20, 10)\nprint('Zoe has ' + str(total_songs) + ' songs on her mp3 player.')\n\n#Output\nZoe has 110 songs on her mp3 player.",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef song_total(a,b,c):\n  a = int(a)\n  b = int(b)\n  c = int(c)\n\n  return a - b + c\n\n#Example:\nnum_songs = song_total(50, 10, 20)\nprint(num_songs)\n\n#Output: 60",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef getMp3Total(a,b,c):\n  return a - b + c",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_player_total_songs (a, b, c):\n  total = a - b + c\n  return total",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef compute_ songs(a, b, c):\n  return a-b+c",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef new_songs_count(a,b,c):\n  return a - b + c\n\nprint (new_songs_count(A,B,C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef find_total_songs(a, b, c):\n  return a - b + c\n\ntotal_songs = find_total_songs(A, B, C)\nprint(total_songs)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef num_songs(a,b,c):\n  return a - b + c",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef calculate_total_songs(a, b, c):\n  return a - b + c\n\ntotal_songs = calculate_total_songs(a, b, c)\nprint(total_songs)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_songs(a, b, c):\n    return a - b + c\n\nprint(new_songs(a, b, c))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(a, b, c):\n    return a-b+c\n\nprint(total_songs(a, b, c))",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Zoe had 15 songs on her mp3 player. If she deleted 8 old songs from it and then added 50 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 57.0,
      "index": 131
    }
  },
  {
    "result": 49.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.522976875305176,
      "templates": [
        "At the arcade Jerry won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Jerry won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        49.0,
        49.0,
        49.0,
        49.0,
        49.0
      ],
      "completions": [
        [
          " \n\ndef tickets(A, B, C):\n  return A + C - B",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_tickets(A,B,C):\n  return (A + C) - B\n  \ntotal_tickets(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets(A, B, C):\n  return A+C-B",
          "\nAnswer = A + C - B"
        ],
        [
          "  \n\ndef total_tickets (A,B,C):\n  return A+C-B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef tickets_total(a, b, c):\n  return a + c - b",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef arcadetotal(a,b,c):\n  return a + c - b",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the arcade Jerry won 4 tickets. If he spent 2 tickets on a beanie and later won 47 more tickets, how many would he have? ",
      "final_answer": 49.0,
      "index": 132
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 10,
      "duration": 9.605701208114624,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef oranges_in_bin(A, B, C):\n return A - B + C\n\nprint(oranges_in_bin(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges_in_bin(A, B, C):\n  return A - B + C\n  \nprint(oranges_in_bin(4, 2, 3))\n# Output: 5",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A, B, C):\n  return A - B + C\n\n# Calling the function\nprint(oranges(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef orange_count(A, B, C):\n  return A - B + C\n\norange_count(10, 4, 6) # returns 12",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef orangesInBin(A,B,C):\n    return A+C-B\n\nprint(orangesInBin(10,2,3))   # 11",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " A store had 31 oranges in a bin. If they threw away 9 of the old ones and put 38 new ones in the bin how many would be in the bin? ",
      "final_answer": 60.0,
      "index": 133
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 14,
      "duration": 13.240540981292725,
      "templates": [
        "Adam had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Adam have?\nWrite a Python function that returns the answer.",
        "Adam had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Adam have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef new_book_total(A, B, C):\n  return A - B + C \n\nnew_book_total(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_books (A, B, C):\n  return A - B + C\n  \nprint(num_books(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef how_many_books(A, B, C):\n  return A - B + C\n\n#Example\nhow_many_books(10, 3, 5) #returns 12",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef books(A, B, C):\n  return A - B + C\n  \nbooks(A,B,C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_total_books(A, B, C):\n  return A - B + C\n\ntotal_books = calculate_total_books(A, B, C)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef buyBooks(A, B, C):\n  totalBooks = A - B + C\n  return totalBooks\n\nprint(buyBooks(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef book_total(a, b, c):\n  return a - b + c\n\n#Example Usage:\nprint(book_total(10, 3, 4)) #Output: 11",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Adam had 33 books. If he sold 11 of them and used the money he earned to buy 23 new books, how many books would Adam have? ",
      "final_answer": 45.0,
      "index": 134
    }
  },
  {
    "result": 10.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.504830837249756,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        10.0,
        10.0,
        10.0,
        10.0
      ],
      "completions": [
        [
          "\n\ndef calculate_line(A,B,C):\n  return A - B + C",
          "\n\nAnswer = (A - B) + C"
        ],
        [
          "\n\ndef fair_line_calculator(A, B, C):\n    return A - B + C\n \nnum_people = fair_line_calculator(A, B, C)\nprint(num_people)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef line_for_bumper_cars(A, B, C):\n  return A - B + C",
          "\nAnswer = A+C-B"
        ],
        [
          "\n\ndef bumper_lines(A, B, C):\n    return A - B + C\n\nanswer = bumper_lines(A, B, C)",
          "\n\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef revisedWait(a,b,c):\n    return a - b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef wait_in_line(a,b,c):\n  return a-b+c",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the fair there were 10 people in line for the bumper cars. If 2 of them got tired of waiting and left and 2 more got in line, how many people would be in line? ",
      "final_answer": 10.0,
      "index": 135
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 36.202702045440674,
      "templates": [
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a Python function that returns the answer.",
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef get_apples(a, b, c):\n  return a + b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef getNumberOfApples(A, B, C):\n    return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalApples(A,B,C): \n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef apple_calculator(A, B, C):\n    Total_apples = A+B+C\n    return Total_apples\n\nanswer = apple_calculator(A, B, C)\nprint(answer)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calcAnswer(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(a, b, c):\n    return a + b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple_problem(A,B,C):\n  return A + B + C\n\nprint(apple_problem(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef HowManyApples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef Apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A,B,C):\n  return A+B+C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalApples(a, b, c):\n   return (a - b) + c\n\n# Example:\ntotalApples(10, 5, 3)\n#returns 8",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef apples(A,B,C):\n return A + B + C\n\nprint(\"Number of Apples:\", apples (A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef num_of_apples(A, B, C):\n    return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef calculate_apples(A, B, C): \n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple_count(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_apples(a, b, c):\n    return a + b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef total_apples(A, B, C): \n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria had 38 apples. If they used 20 to make lunch for the students and then bought 28 more, how many apples would they have? ",
      "final_answer": 46.0,
      "index": 136
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 36.25182485580444,
      "templates": [
        "George had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a Python function that returns the answer.",
        "George had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef socks_count(a, b, c):\n  return a + c - b",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef calculateNumberOfSocks(a, b, c):\n  return a-b+c\n\nanswer = calculateNumberOfSocks(A, B, C)\nprint(answer)",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef numSocks(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef how_many_socks(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef num_socks(a, b, c):\n return a + c - b",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef new_socks_count(a,b,c): \n  return a + c - b",
          "\nAnswer = A + C"
        ],
        [
          " \n\ndef calc_num_socks(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef socks(a, b, c): \n  return a + c - b \n  \nAnswer:\nGeorge would have A + C - B socks.",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef numSocks(a, b, c): \n    return a + c - b",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef number_of_socks(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef num_socks(A, B, C):\n    return A + C - B",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef num_socks(a, b, c):\n  return a - b + c\n  \nprint(num_socks(A, B, C))",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef numOfSocks(A,B,C):\n  return A + C - B",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef countTotalSocks(a,b,c):\n  return a + b - c\n\nprint(countTotalSocks(A,B,C))",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef numSocks(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef socks_calc(a, b, c):\n  return a - b + c\n\nsocks_total = socks_calc(a, b, c)\nprint(\"George has \" + str(socks_total) + \" socks.\")",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef how_many_socks(old_socks, new_socks):\n  answer = old_socks + new_socks\n  return answer\n\nprint(how_many_socks(A,C))",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef sock_count(a, b, c):\n  return a + c - b",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef socksNum (A,B,C):\n  return A - B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef numOfSocks(a, b, c):\n  return a - b + c\n\nprint(numOfSocks(A, B, C))",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef number_of_socks(a,b,c):\n  return a + c - b",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef sock_calc(a,b,c):\n  return a + b - c",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef socks_total(A, B, C):\n  total = A + B + C\n  return total\n\nsocks_total(A, B, C)",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef sock_count(a, b, c):\n    return a + b - c\n\ntotal_socks = sock_count(a, b, c)",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef num_socks(a,b,c):\n  return a + c - b",
          "\nAnswer = A + C"
        ]
      ]
    },
    "source": {
      "question": " George had 28 socks. If he threw away 4 old ones that didn't fit and bought 36 new ones, how many socks would he have? ",
      "final_answer": 60.0,
      "index": 137
    }
  },
  {
    "result": 37.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.076824188232422,
      "templates": [
        "For Halloween Robin scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Robin have now?\nWrite a Python function that returns the answer.",
        "For Halloween Robin scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Robin have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        37.0,
        37.0,
        37.0,
        37.0
      ],
      "completions": [
        [
          "\n\ndef candy_leftover(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_amount(A, B, C):\n  return A - B + C\n\nprint(candy_amount(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_amount(A, B, C): \n  return A - B + C\n\nanswer = candy_amount(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n    return A - B + C\n\nanswer = candy_calculator(A, B, C)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remainingCandy(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Robin scored 23 pieces of candy. She ate 7 pieces the first night and then her sister gave her 21 more pieces. How many pieces of candy does Robin have now? ",
      "final_answer": 37.0,
      "index": 138
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.303322792053223,
      "templates": [
        "Rachel was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Rachel was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef lives(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_calculator(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n    return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A - B + C",
          "\nAnswer = (A - B) + C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Rachel was playing a video game and had 10 lives. In a hard part of the game she lost 4 lives. If she got 26 more lives in the next level, how many lives would she have? ",
      "final_answer": 32.0,
      "index": 139
    }
  },
  {
    "result": 13.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.528162002563477,
      "templates": [
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a Python function that returns the answer.",
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        13.0,
        13.0,
        13.0,
        13.0,
        13.0
      ],
      "completions": [
        [
          "\n\ndef rose_calc(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses(A,B,C):\n    return A-B+C\n\nprint(roses(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_roses(A, B, C):\n  return A - B + C\n\nprint(calculate_roses(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_roses(A, B, C):\n  return A - B + C\n\nprint(num_roses(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses_total(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " A florist had 6 roses. If she sold 5 of them and then later picked 12 more, how many roses would she have? ",
      "final_answer": 13.0,
      "index": 140
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 24,
      "duration": 17.477347135543823,
      "templates": [
        "For Halloween Haley scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Haley have now?\nWrite a Python function that returns the answer.",
        "For Halloween Haley scored A pieces of candy. She ate B pieces the first night and then her sister gave her C more pieces. How many pieces of candy does Haley have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef piecesOfCandy(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef how_many_pieces(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef halloween_candy(A, B, C):\n  return A - B + C \n\nprint(halloween_candy(20, 15, 3))\n# Output: 8",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef howMuchCandy(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef how_many_candy(a,b,c):\n  return a + c - b",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_pieces(a,b,c):\n  return a - b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_tally(a, b, c):\n  return a - b + c\n\nprint(candy_tally(A, B, C))",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_calculator (a, b, c):\n  return a + c - b",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy_calculator(a, b, c):\n  return a + c - b",
          "\nA + C - B = Answer\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candyCount(A, B, C):\n    candyLeft = A - B + C\n    return candyLeft",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef candy(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Haley scored 33 pieces of candy. She ate 17 pieces the first night and then her sister gave her 19 more pieces. How many pieces of candy does Haley have now? ",
      "final_answer": 35.0,
      "index": 141
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 44,
      "duration": 32.833422899246216,
      "templates": [
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a Python function that returns the answer.",
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0
      ],
      "completions": [
        [
          "\n\ndef apples(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_num_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples_calc(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_apples(A, B, C):\n  return A + B + C\n\nanswer = num_apples(A, B, C)",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef apples(A, B, C): \n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple(A, B, C):\n    return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples_after_purchase(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C -B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C\n\nprint(calculate_apples(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_num_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          " \n\ndef calculateApples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples (a,b,c): \n    return a+b+c",
          "\n\nA + B + C = Answer\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C\n\nanswer = total_apples(A, B, C)\nprint(answer)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A,B,C):\n  return A+B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A,B,C):\n  return A + B + C\n\nprint(total_apples(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria had 14 apples. If they used 13 to make lunch for the students and then bought 49 more, how many apples would they have? ",
      "final_answer": 50.0,
      "index": 142
    }
  },
  {
    "result": 38.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.768109083175659,
      "templates": [
        "Edward had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Edward have?\nWrite a Python function that returns the answer.",
        "Edward had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Edward have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        38.0,
        38.0,
        38.0,
        38.0,
        38.0
      ],
      "completions": [
        [
          "\n\ndef num_books(A, B, C):\n  return A - B + C\n  \nprint(num_books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_books(A, B, C):\n  return A - B + C\n\nprint(new_books(A, B, C))",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef book_amount(A, B, C):\n  return A - B + C\n\nprint(book_amount(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef books(A, B, C):\n  return A - B + C\n\nprint(books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef books(A,B,C):\n  return A - B + C\n\nanswer = books(A,B,C)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Edward had 43 books. If he sold 19 of them and used the money he earned to buy 14 new books, how many books would Edward have? ",
      "final_answer": 38.0,
      "index": 143
    }
  },
  {
    "result": 58.0,
    "meta": {
      "n_calls": 42,
      "duration": 36.67452430725098,
      "templates": [
        "A teacher had A worksheets to grade. If she graded 25, but then another B were turned in, how many worksheets would she have to grade?\nWrite a Python function that returns the answer.",
        "A teacher had A worksheets to grade. If she graded 25, but then another B were turned in, how many worksheets would she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        58.0
      ],
      "completions": [
        [
          "\n\ndef totalGraded(A, B):\n  return A + B\n\nprint(totalGraded(25, 1))  # 26",
          "\nAnswer = 25 + B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalWorksheetsToGrade(worksheetsA, worksheetsB):\n  return worksheetsA + worksheetsB\n\ntotalWorksheetsToGrade(25, 1)  # Returns 26",
          "\n\nAnswer = 25 + B"
        ],
        [
          "\n\ndef total_worksheets(a, b):\n  return a + b\n\nprint(total_worksheets(25, 1)) # return 26",
          " \nAnswer = 25 + B"
        ],
        [
          "\n\ndef worksheets_graded(A, B):\n  return A + B\n\nprint(worksheets_graded(25, 1))\n\n# Output: 26",
          "\n\nAnswer = 25 + B"
        ],
        [
          "\n\ndef grade_worksheets(a_worksheets, b_worksheets):\n    total_worksheets = a_worksheets + b_worksheets\n    return total_worksheets\n\nanswer = grade_worksheets(25, 1)\nprint(answer) # 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef gradeWorksheets(aWorksheets, bWorksheets):\n  return aWorksheets + bWorksheets\n\ngradeWorksheets(25,1)  # returns 26",
          " \n\nAnswer = 26 worksheets"
        ],
        [
          "\n\ndef number_of_worksheets(a, b):\n  return a + b\n\nprint(number_of_worksheets(25, 1))\n\n#Output: 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n  total = a + b\n  return total\n\nprint(worksheets_to_grade(25, 1))\n# Output: 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef number_of_worksheets(A, B):\n  return A + B\n\nprint(number_of_worksheets(25, 1))  # Output: 26",
          "\n\nAnswer = 26 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(grade_a, grade_b):\n  return grade_a + grade_b\n\nprint(grade_worksheets(25, 1))\n# Outputs 26",
          "\n\nAnswer = 25 + B"
        ],
        [
          "\n\ndef new_worksheet():\n  return 25 + B",
          "\nAnswer = 26 worksheets"
        ],
        [
          "\n\ndef num_worksheets(a_worksheets, b_worksheets):\n    return a_worksheets + b_worksheets\n\nprint(num_worksheets(25, 1))\n# Output: 26",
          "\n\nAnswer = 26"
        ],
        [
          "\n\ndef totalWorksheets(A, B):\n    return A + B\n    \ntotalWorksheets(25, 1)\n#26",
          "\nAnswer = 26"
        ],
        [
          "\n\ndef total_worksheets(a, b):\n  return a + b\n  \nprint(total_worksheets(25, 1)) # returns 26",
          "\nAnswer = 26"
        ],
        [
          "\n\ndef gradeWorksheet(a,b):\n    total_worksheets = a + b\n    return total_worksheets\n\nprint (gradeWorksheet(25, 1))  # Result: 26",
          "\n\nAnswer = 25 + B"
        ],
        [
          " \n\ndef worksheet_grade(a, b):\n  return a+b\n\nprint(worksheet_grade(25, 1)) # 26",
          "\nAnswer = 26"
        ],
        [
          "\n\ndef grade_worksheets(a,b):\n  total = a+b\n  return total\n\nprint(grade_worksheets(25,1)) # prints 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef grade_worksheets(a_ws, b_ws): \n  return a_ws + b_ws \n\nprint(grade_worksheets(25, 1)) # return 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef gradeWorksheets(A, B):\n    return A + B\n\nprint(gradeWorksheets(25, 1)) # 26",
          "\nAnswer = 25 + B"
        ],
        [
          "\n\ndef grade_worksheets(num_a_worksheets, num_b_worksheets):\n  return num_a_worksheets + num_b_worksheets\n\nprint(grade_worksheets(25, 1))\n# Output: 26",
          "\nAnswer = 26"
        ],
        [
          "\n\ndef grade_worksheets(a_worksheets, b_worksheets):\n  return a_worksheets + b_worksheets \n\nanswer = grade_worksheets(25, 1)\nprint(answer) \n# Output: 26",
          "\n\nAnswer = 26 worksheets"
        ]
      ]
    },
    "source": {
      "question": " A teacher had 29 worksheets to grade. If she graded 25, but then another 29 were turned in, how many worksheets would she have to grade? ",
      "final_answer": 33.0,
      "index": 144
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.524341106414795,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef num_fourth_grade_students(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef end_grade_students(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef end_year_students(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " In fourth grade there were 35 students at the start of the year. During the year 10 students left and 10 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 35.0,
      "index": 145
    }
  },
  {
    "result": 52.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.166619062423706,
      "templates": [
        "For the school bake sale Carol made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Carol made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        52.0,
        52.0,
        52.0,
        52.0,
        52.0
      ],
      "completions": [
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bakeSale(A,B,C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes_bake_sale(A,B,C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcake_seller(A,B,C):\n  return A+B+C",
          "\nAnswer = A+B+C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " For the school bake sale Carol made 19 cupcakes. If she sold 6 of them and then made 27 more, how many cupcakes would she have? ",
      "final_answer": 40.0,
      "index": 146
    }
  },
  {
    "result": 10.0,
    "meta": {
      "n_calls": 14,
      "duration": 12.08780288696289,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        10.0,
        10.0,
        10.0,
        10.0,
        10.0
      ],
      "completions": [
        [
          "\n\ndef orange_store(A, B, C):\n  return A - B + C\n\nprint(orange_store(10, 3, 4)) # 11",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef new_oranges_total(A, B, C):\n  return A - B + C\n\nnew_oranges_total(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A,B,C):\n    return A-B+C\n    \nprint(oranges(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges_in_bin(A, B, C):\n  return A - B + C\n\nprint(oranges_in_bin(5,2,7))\n#Output: 10",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_oranges(A,B,C):\n  return A - B + C\n  \nprint(number_of_oranges(A,B,C))",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef update_oranges(a, b, c):\n  return a - b + c\n\nupdate_oranges(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_oranges(a, b, c):\n  return a + c - b\n  \noranges_in_bin = total_oranges(10, 5, 7)\nprint(oranges_in_bin)  # 12",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A store had 40 oranges in a bin. If they threw away 37 of the old ones and put 7 new ones in the bin how many would be in the bin? ",
      "final_answer": 10.0,
      "index": 147
    }
  },
  {
    "result": 58.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.963399887084961,
      "templates": [
        "At the arcade Victor won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Victor won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        58.0,
        58.0,
        58.0,
        58.0,
        58.0
      ],
      "completions": [
        [
          "\n\ndef ticket_total(A, B, C): \n  return (A+C)-B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_tickets(A, B, C):\n  return A+C-B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef arcade_tickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets(A, B, C):\n    return A + C - B",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " At the arcade Victor won 46 tickets. If he spent 27 tickets on a beanie and later won 39 more tickets, how many would he have? ",
      "final_answer": 58.0,
      "index": 148
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.724521160125732,
      "templates": [
        "Chloe picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Chloe picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef countCarrots(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_carrots(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_carrots(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A,B,C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Chloe picked 48 carrots from her garden. If she threw out 45 of them and then picked 42 more the next day, how many carrots would she have total? ",
      "final_answer": 45.0,
      "index": 149
    }
  },
  {
    "result": 43.0,
    "meta": {
      "n_calls": 22,
      "duration": 16.87976598739624,
      "templates": [
        "Sam had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a Python function that returns the answer.",
        "Sam had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        43.0,
        43.0,
        43.0,
        43.0
      ],
      "completions": [
        [
          "\n\ndef numOfSocks(A,B,C):\n  return A-B+C\n\nprint(numOfSocks(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateNumberOfSocks(A, B, C):\n      return A - B + C\n\nprint(calculateNumberOfSocks(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks_total(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A+C-B"
        ],
        [
          "\n\ndef num_socks(A, B, C):\n  return A + C - B\n  \nprint(num_socks(5, 2, 4))\n# Output: 7",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef socks(A, B, C): \n  result = A - B + C\n  return result",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateSocks (a, b, c):\n  return a + c - b",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_socks(a, b, c):\n  return a - b + c\n\nprint(new_socks(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numberOfSocks(A, B, C):\n  totalSocks = A - B + C\n  return totalSocks",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numOfSocks(A,B,C):\n  return A + C - B \n\ntotalSocks = numOfSocks(A,B,C) \nprint(\"Sam has \" + str(totalSocks) + \" socks.\")",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef CountSocks(A,B,C):\n  return A + C - B",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef calculate_socks(a, b, c):\n  return a - b + c\n\nanswer = calculate_socks(A, B, C)",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Sam had 10 socks. If he threw away 3 old ones that didn't fit and bought 36 new ones, how many socks would he have? ",
      "final_answer": 43.0,
      "index": 150
    }
  },
  {
    "result": 51.0,
    "meta": {
      "n_calls": 12,
      "duration": 10.371581792831421,
      "templates": [
        "Maria had A bottles of water in her fridge. If she drank B of them and then bought C more, how many bottles would she have?\nWrite a Python function that returns the answer.",
        "Maria had A bottles of water in her fridge. If she drank B of them and then bought C more, how many bottles would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        51.0,
        51.0,
        51.0,
        51.0,
        51.0
      ],
      "completions": [
        [
          "\n\ndef bottles_of_water(A, B, C):\n  return A - B + C\n\nprint(bottles_of_water(5, 2, 3))\n# Output: 6",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef water_bottles(A, B, C):\n  return (A - B + C)\n\nprint (water_bottles(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_bottles(A,B,C):\n  return A-B+C \n  \nprint(num_bottles(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_bottles(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numBottles(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bottles_of_water(a, b, c):\n  return a - b + c\n\nprint(bottles_of_water(A, B, C))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Maria had 14 bottles of water in her fridge. If she drank 8 of them and then bought 45 more, how many bottles would she have? ",
      "final_answer": 51.0,
      "index": 151
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 46.58306694030762,
      "templates": [
        "A teacher had A worksheets to grade. If she graded 7, but then another B were turned in, how many worksheets would she have to grade?\nWrite a Python function that returns the answer.",
        "A teacher had A worksheets to grade. If she graded 7, but then another B were turned in, how many worksheets would she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef grade_worksheets(numA, numB):\n  return numA + numB\n\nprint(grade_worksheets(7, 1))\n# Output: 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(worksheets_graded, worksheets_received):\n  return worksheets_graded + worksheets_received\n\nprint(worksheets_to_grade(7, 1))\n\n# Output: 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef total_worksheets(a,b):\n  return a+b\n\nanswer = total_worksheets(7,1)\nprint(answer) # 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef gradedWorksheets(a, b): \n  return a + b \n\nprint(gradedWorksheets(7, 1)) \n# Output: 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef total_worksheets(a, b):\n  return a + b\n\ntotal_worksheets(7, 1)\n\n# Output: 8",
          "\n\nAnswer = 15 worksheets"
        ],
        [
          "\n\ndef num_worksheets(a, b):\n  return a + b\n\nprint(num_worksheets(7, 1)) # 8 worksheets",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef number_of_worksheets(A, B):\n  return A+B\n\nnumber_of_worksheets(7, 1) # returns 8",
          "\n\nAnswer = 14 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(A,B):\n    return A+B\n\nprint(worksheets_to_grade(7,1))\n# Output: 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef totalGrades(numA, numB):\n  return numA + numB\n\nprint(totalGrades(7, 1))\n# Output: 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(worksheets_A, worksheets_B):\n  return worksheets_A + worksheets_B\n\n# Function call\ngrade_worksheets(7, 1)\n\n# Output\n8",
          "\n\nAnswer = 15 worksheets"
        ],
        [
          " \n\ndef num_worksheets(a, b):\n  return a + b\n\nanswer = num_worksheets(7, 1)\nprint(answer)\n\n# Output: 8",
          "\n\nAnswer = 7 + B"
        ],
        [
          "\n\ndef total_worksheets(a, b):\n  return a + b\n\nprint(total_worksheets(7, 1))\n\n# Outputs 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheet_grading(a, b):\n  return (a + b)\n\nprint(worksheet_grading(7, 1))\n\n# Output: 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(a,b):\n    return a + b\n\nprint(grade_worksheets(7,1))  # Output: 8",
          "\n\nAnswer = 7 + B"
        ],
        [
          "\n\ndef get_worksheets_to_grade(worksheets_graded, new_worksheets):\n  return worksheets_graded + new_worksheets\n\nanswer = get_worksheets_to_grade(7, 1)\nprint(answer)\n\n# Output: 8",
          "\n\nAnswer = 14"
        ],
        [
          "\n\ndef number_of_worksheets(x, y): \n  return x + y \n\nprint(number_of_worksheets(7, 1)) \n\n# Output \n8",
          "\nAnswer = 14"
        ],
        [
          "\n\ndef grade_worksheets(a, b):\n    return a + b\n\nprint(grade_worksheets(7, 1))\n\n# Output: 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(A, B):\n  return A + B\n\nprint(grade_worksheets(7, 1))\n# Output: 8",
          "\nAnswer = 8"
        ],
        [
          "\n\ndef number_of_worksheets(a_worksheets, b_worksheets):\n  return a_worksheets + b_worksheets\n\nprint(number_of_worksheets(7, 1))  # Output: 8",
          "\nAnswer = 8"
        ],
        [
          "\n\ndef grade_worksheets(original_worksheets, extra_worksheets): \n    return original_worksheets + extra_worksheets\n\n#call the function\nprint(grade_worksheets(7, 1)) #output 8",
          "\n\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef num_worksheets(a, b):\n  return a + b \n\nprint(num_worksheets(7,1))\n\nOutput: 8",
          "\n\nAnswer = 15 worksheets"
        ],
        [
          "\n\ndef total_worksheets(a, b):\n    return a + b\n \ntotal = total_worksheets(7, 1)\nprint(total)\n\n# Output: 8",
          "\nAnswer = 14 worksheets"
        ],
        [
          "\n\ndef total_worksheets(a_worksheets, b_worksheets):\n  return a_worksheets + b_worksheets\n\nprint(total_worksheets(7, 1)) # Outputs 8",
          "\nAnswer = 8 worksheets"
        ],
        [
          "\n\ndef worksheets_to_grade(a, b):\n  return a + b\n\nprint(worksheets_to_grade(7, 1))  # Output: 8",
          "\n\nAnswer = 15 worksheets"
        ],
        [
          "\n\ndef grade_worksheets(sheets_graded, sheets_added):\n  return sheets_graded + sheets_added\n  \nprint(grade_worksheets(7, 1))  #Output: 8",
          "\n\nAnswer = 8 Worksheets"
        ]
      ]
    },
    "source": {
      "question": " A teacher had 34 worksheets to grade. If she graded 7, but then another 36 were turned in, how many worksheets would she have to grade? ",
      "final_answer": 63.0,
      "index": 152
    }
  },
  {
    "result": 11.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.536866903305054,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        11.0,
        11.0,
        11.0,
        11.0,
        11.0
      ],
      "completions": [
        [
          "\n\n\ndef total_people(A, B, C):\n  return A - B + C\n\nprint(total_people(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_in_line(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef line_length(A, B, C):\n  return A - B + C\n\nline_length(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumper_cars(A,B,C):\n  return A-B+C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef totalBumperCarLine(A, B, C):\n   return A - B + C\n\nprint(totalBumperCarLine(A, B, C))",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numInLine(a, b, c):\n  return a - b + c\n\nprint(numInLine(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef peopleInLine(a, b,c):\n  return a-b+c\n\npeopleInLine(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef num_of_people(a, b, c):\n    return a - b + c\n\nprint(num_of_people(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lineLength(a, b, c):\n  return (a - b) + c\n\nprint(lineLength(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bumperCarWaitLine(a, b, c):\n    return a - b + c",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the fair there were 7 people in line for the bumper cars. If 4 of them got tired of waiting and left and 8 more got in line, how many people would be in line? ",
      "final_answer": 11.0,
      "index": 153
    }
  },
  {
    "result": 19.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.732789039611816,
      "templates": [
        "Emily had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a Python function that returns the answer.",
        "Emily had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        19.0,
        19.0,
        19.0,
        19.0,
        19.0
      ],
      "completions": [
        [
          "\n\ndef total_coloring_books(A, B, C):\n  return A - B + C\n  \nprint(total_coloring_books(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_coloring_books(A, B, C):\n  return A - B + C\n\nnum_coloring_books(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_coloring_books(A, B, C):\n    return A - B + C\n \ntotal_coloring_books(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_books(A,B,C):\n    return A-B+C \n  total_books(A,B,C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_answer(A,B,C):\n  return A-B+C\n\nanswer = get_answer(A,B,C)\nprint(answer)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Emily had 7 coloring books. If she gave away 2 of them, but then bought 14 more, how many would she have total? ",
      "final_answer": 19.0,
      "index": 154
    }
  },
  {
    "result": 18.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.800372838973999,
      "templates": [
        "At the arcade Dave won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Dave won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        18.0,
        18.0,
        18.0,
        18.0,
        18.0
      ],
      "completions": [
        [
          "\n\ndef tickets(A,B,C):\n  return A+C-B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef arcade_tickets(A,B,C):\n  return A+C-B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_tickets (A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(A,B,C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_tickets(A,B,C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(a, b, c):\n  return a + c - b",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets(A,B,C):\n return A+B+C",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the arcade Dave won 25 tickets. If he spent 22 tickets on a beanie and later won 15 more tickets, how many would he have? ",
      "final_answer": 18.0,
      "index": 155
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 24,
      "duration": 19.361024856567383,
      "templates": [
        "Robin had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Robin had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef total_songs(A, B, C):\n  return A - B + C\n\ntotal_songs(A,B,C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3PlayerSongs(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numberOfSongs(A, B, C):\n    return A - B + C\n\nnumberOfSongs(50, 10, 20) \n# Output: 60",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A - B + C\n  \nanswer = numSongs(A, B, C);",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef modified_mp3_playlist(a, b, c):\n    return a - b + c",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_total(A,B,C):\n  total = A - B + C\n  return total",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_player(a, b, c):\n    return a - b + c\n\nAnswer: mp3_player(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_player(a, b, c):\n    return a - b + c\nanswer = mp3_player(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef songs_on_player(a, b, c):\n  return a - b + c\n\nanswer = songs_on_player(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(a,b,c):\n  return a-b+c\n\ntotal_songs(a,b,c)",
          "\nAnswer = A-B+C"
        ],
        [
          "\n\ndef new_songs_count(old_songs, deleted_songs, new_songs): \n  result = old_songs - deleted_songs + new_songs\n  return result\n\nprint(new_songs_count(A, B, C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(deleted, added):\n  return deleted + added",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Robin had 30 songs on her mp3 player. If she deleted 8 old songs from it and then added 10 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 32.0,
      "index": 156
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 50,
      "duration": 36.55036211013794,
      "templates": [
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a Python function that returns the answer.",
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef num_apples(A, B, C):\n  return A - B + C\n\nprint(num_apples(12, 5, 7))\n# Output: 14",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef apples(A, B, C):\n  total = A + B + C\n  return total",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple_calc(A, B, C):\n   return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_apples(A, B, C):\n  return A + B + C\n  \ntotal_apples = count_apples(A, B, C)\nprint(total_apples)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n    answer = A + B + C\n    return answer",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef extra_apples(a,b,c):\n  return a + b + c\n\nanswer = extra_apples(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numberOfApples(A, B, C):\n    return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          " \n\ndef number_of_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C\n\n"
        ],
        [
          "\n\ndef total_apples(A, B, C): \n  total = A - B + C \n  return total",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C\n\ntotal_apples(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_apple_total(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_num_apples(A, B, C):\n    return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef compute_apples (A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef calculate_total_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef calculate_apples(A, B, C): \n  total_apples = A - B + C\n  return total_apples",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C\n\ntotal_apples(A, B, C)",
          "\nAnswer = A + C"
        ],
        [
          "\ndef CalculateApples(A, B, C): \n return A + B - C \n  \nprint(CalculateApples(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef NumberOfApples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria had 23 apples. If they used 20 to make lunch for the students and then bought 6 more, how many apples would they have? ",
      "final_answer": 9.0,
      "index": 157
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 10,
      "duration": 6.390120983123779,
      "templates": [
        "Janet was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Janet was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef lives_remaining(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_after_level(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef getLives(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Janet was playing a video game and had 38 lives. In a hard part of the game she lost 16 lives. If she got 32 more lives in the next level, how many lives would she have? ",
      "final_answer": 54.0,
      "index": 158
    }
  },
  {
    "result": 61.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.508923053741455,
      "templates": [
        "Megan picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Megan picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        61.0,
        61.0,
        61.0,
        61.0,
        61.0
      ],
      "completions": [
        [
          "\n\ndef calculate_carrots(A, B, C):\n    return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A+C-B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrotTotal(A, B, C):\n    return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A - B + C",
          "\nAnswer = A + (C - B)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef Carrots(A, B, C):\n  total = A - B + C\n  return total",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrot_total(A, B, C):\n  total = A - B + C\n  return total",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(a, b, c):\n  return a - b + c\n \nprint(carrots(A, B, C))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Megan picked 19 carrots from her garden. If she threw out 4 of them and then picked 46 more the next day, how many carrots would she have total? ",
      "final_answer": 61.0,
      "index": 159
    }
  },
  {
    "result": 71.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.665629863739014,
      "templates": [
        "Roger had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a Python function that returns the answer.",
        "Roger had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        71.0,
        71.0,
        71.0,
        71.0,
        71.0
      ],
      "completions": [
        [
          "\n\ndef calc_money(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_money(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_dollars(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef money_total(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef Money_gained(A, B, C): \n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calc_total_money(A,B,C):\n  total = A + C - B\n  return total",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_money(a, b, c):\n  return a + c - b",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Roger had 45 dollars in January. By March he had spent 20 dollars. If he got another 46 dollars from his mom, how much money would he have? ",
      "final_answer": 71.0,
      "index": 160
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 38.238107681274414,
      "templates": [
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a Python function that returns the answer.",
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculateTotalApples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef addApples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef calculate_total_apples(A, B, C):\n  total_apples = A - B + C\n  return total_apples",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_apples(A, B, C):\n  return A + B + C\n\n# Example \nget_apples(10, 8, 9)\n# Output: 27",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_total_apples(A,B,C):\n  return A+B+C",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_apples(a, b, c):\n  answer = a + b + c\n  return answer",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_total_apples(A, B, C):\n  return A + B + C \n\ntotal_apples = calculate_total_apples(A, B, C)\nprint(total_apples)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calc_total_apples (A, B, C):\n    total_apples = A + B + C\n    return total_apples\n \ntotal_apples = calc_total_apples(A, B, C)\nprint(\"The school cafeteria would have\", total_apples, \"apples.\")",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numApples (A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple_calculator(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_num_apples(A, B, C):\n  return A + B + C\n  \ntotal_num_apples(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_num_apples(A,B,C):\n  return A+B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples_purchased (A, B, C):\n\u00a0\u00a0return A + B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef totalApples (A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria had 17 apples. If they used 2 to make lunch for the students and then bought 23 more, how many apples would they have? ",
      "final_answer": 38.0,
      "index": 161
    }
  },
  {
    "result": 70.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.004992008209229,
      "templates": [
        "Janet was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Janet was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        70.0,
        70.0,
        70.0,
        70.0,
        70.0
      ],
      "completions": [
        [
          "\n\ndef lost_lives(A,B,C):\n     return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef livesRemaining(A, B, C): \n  return A - B + C",
          "\nAnswer = A + C -B"
        ],
        [
          "\n\nA, B, and C refer to integers representing the number of lives that Janet has or gains in the game.\n\ndef calculateLives(A, B, C):\n  # Calculate the number of lives Janet would have after losing B lives in the game and gaining C more lives in the next level\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_lives(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Janet was playing a video game and had 47 lives. In a hard part of the game she lost 23 lives. If she got 46 more lives in the next level, how many lives would she have? ",
      "final_answer": 70.0,
      "index": 162
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.613452196121216,
      "templates": [
        "Nancy picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Nancy picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        31.0,
        31.0,
        31.0,
        31.0
      ],
      "completions": [
        [
          "\n\ndef total_carrots(A,B,C):\n    return  A-B+C\n\n#Answer \ntotalCarrots = total_carrots(A,B,C) \nprint(totalCarrots)",
          "\n\nA + C - B = Answer \nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_of_carrots(A,B,C): \n  return A-B+C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return (A - B) + C\n\nprint(carrots(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Nancy picked 12 carrots from her garden. If she threw out 2 of them and then picked 21 more the next day, how many carrots would she have total? ",
      "final_answer": 31.0,
      "index": 163
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.28859806060791,
      "templates": [
        "Bianca had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Bianca had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0,
        64.0,
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef mp3_player_songs(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef new_mp3_songs(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef new_song_count(A, B, C): \n  return A-B+C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef num_songs(A,B,C):\n  return (A - B + C)\n\nAnswer = num_songs(A,B,C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef calculateSongs(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef song_total(a, b, c):\n  return a - b + c\n  \nprint(song_total(A, B, C))",
          "\n\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Bianca had 34 songs on her mp3 player. If she deleted 14 old songs from it and then added 44 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 64.0,
      "index": 164
    }
  },
  {
    "result": 39.0,
    "meta": {
      "n_calls": 12,
      "duration": 10.303178071975708,
      "templates": [
        "Tom had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Tom have?\nWrite a Python function that returns the answer.",
        "Tom had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Tom have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        39.0,
        39.0,
        39.0,
        39.0,
        39.0
      ],
      "completions": [
        [
          "\n\ndef books(A, B, C):\n  return A - B + C \n\nprint(books(A, B, C))",
          "\nA - B + C = Answer\nAnswer = A + C - B"
        ],
        [
          "\n\ndef buy_sell_books(A, B, C):\n    return A - B + C\n\nanswer = buy_sell_books(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef book_bought(A, B, C): \n  return A - B + C\n\nbook_bought(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_books(A, B, C):\n    return A - B + C\n\n# OR\n\ndef number_of_books(a, b, c):\n\ttotal_books = a - b + c\n\treturn total_books",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef book_calculation(A, B, C):\n  return A - B + C\n\nbook_calculation(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef book_problem(A, B, C):\n  answer = A - B + C\n  return answer",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Tom had 5 books. If he sold 4 of them and used the money he earned to buy 38 new books, how many books would Tom have? ",
      "final_answer": 39.0,
      "index": 165
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 28,
      "duration": 20.16093897819519,
      "templates": [
        "John had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a Python function that returns the answer.",
        "John had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0,
        27.0,
        27.0,
        27.0
      ],
      "completions": [
        [
          "\n\ndef num_socks(A, B, C):\n  return A + C - B\n  \nsolution = num_socks(A, B, C)\nprint(\"John would have\", solution, \"socks.\")",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numofsocks(A, B, C):\n    return A - B + C\n\nprint(numofsocks(5, 3, 2))\n\nOutput: 4",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_socks(A, B, C):\n  return A + C - B\n\nprint(new_socks(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef count_socks(a, b, c):\n    return a + c - b\n\nprint(count_socks(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef countSocks(oldSocks, newSocks):\n  return oldSocks + newSocks\n\nprint(countSocks(A, C))",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef socks(a, b, c):\n  return a + b - c\n\nprint(socks(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks (A, B, C):\n  return A + B - C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef socks(A,B,C):\n  return A + C - B",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef socks(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef how_many_socks(a, b, c):\n  return  a + c - b\n  \nhow_many_socks(a, b, c)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C"
        ],
        [
          "\n\ndef num_socks(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C"
        ]
      ]
    },
    "source": {
      "question": " John had 33 socks. If he threw away 19 old ones that didn't fit and bought 13 new ones, how many socks would he have? ",
      "final_answer": 27.0,
      "index": 166
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.359314203262329,
      "templates": [
        "For the school bake sale Maria made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Maria made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef cupcakes(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcake_total(A, B, C):\n    return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes(A,B,C):\n    return A+B+C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A, B, C):\n  return A+B+C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef schoolBakeSale(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef cupcakes_total(A,B,C):\n  return A + (B-A) + C\n\ncupcakes_total(A,B,C)",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Maria made 19 cupcakes. If she sold 5 of them and then made 10 more, how many cupcakes would she have? ",
      "final_answer": 24.0,
      "index": 167
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 14,
      "duration": 13.40333867073059,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef oranges_in_bin(A, B, C):\n  return A - B + C\n\noranges_in_bin(A, B, C)",
          "\n\nAnswer = A-(B)+C"
        ],
        [
          "\n\ndef oranges_bin(A, B, C):\n    return A - B + C\n\nnew_oranges_count = oranges_bin(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef orange_count(A,B,C):\n  return A - B + C\n\nprint(orange_count(10,3,5))\n# Output: 12",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A, B, C):\n  return A - B + C\n\nprint(oranges(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A,B,C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef orangeBin(a, b, c):\n  return a + c - b\n  \nanswer = orangeBin(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_oranges(a, b, c):\n    return a + c - b\n\n# Test Code: \ntotal_oranges = num_oranges(30, 5, 6)  # Should return 31\nprint(total_oranges) # prints 31",
          "\n\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " A store had 50 oranges in a bin. If they threw away 40 of the old ones and put 24 new ones in the bin how many would be in the bin? ",
      "final_answer": 34.0,
      "index": 168
    }
  },
  {
    "result": 11.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.546312093734741,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        11.0,
        11.0,
        11.0,
        11.0,
        11.0
      ],
      "completions": [
        [
          "\n\ndef studentsInFourthGrade(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_end_num(A,B,C):\n      return A + C - B\n\nprint(get_end_num(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(A, B, C): \n    return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_students(A, B, C):\n  return A - B + C\n\nprint(calculate_students(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef student_total(A,B,C):\n  return A+C-B\nprint(student_total(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " In fourth grade there were 8 students at the start of the year. During the year 5 students left and 8 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 11.0,
      "index": 169
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.493190050125122,
      "templates": [
        "Bianca picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Bianca picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef total_carrots(A, B, C):\n  return A - B + C\n\ntotal_carrots(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A,B,C):\n  return A + C - B  # total = initial + new - thrownout",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots (A, B, C):\n    return (A - B + C)\n\ncarrots(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrots(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalCarrots(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Bianca picked 23 carrots from her garden. If she threw out 10 of them and then picked 47 more the next day, how many carrots would she have total? ",
      "final_answer": 60.0,
      "index": 170
    }
  },
  {
    "result": 47.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.114356994628906,
      "templates": [
        "Zoe had A bottles of water in her fridge. If she drank B of them and then bought C more, how many bottles would she have?\nWrite a Python function that returns the answer.",
        "Zoe had A bottles of water in her fridge. If she drank B of them and then bought C more, how many bottles would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        47.0,
        47.0,
        47.0,
        47.0,
        47.0
      ],
      "completions": [
        [
          "\n\ndef bottle_calc(A, B, C):\n  return A - B + C\n \nprint(bottle_calc(A,B,C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bottles(A,B,C):\n  return A - B + C\n\nprint(bottles(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalBottles(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bottles_of_water(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_bottles(A, B, C):\n    return A - B + C\n\n#Example\nprint(count_bottles(12, 4, 6))  #14",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Zoe had 42 bottles of water in her fridge. If she drank 25 of them and then bought 30 more, how many bottles would she have? ",
      "final_answer": 47.0,
      "index": 171
    }
  },
  {
    "result": 28.0,
    "meta": {
      "n_calls": 22,
      "duration": 23.18225598335266,
      "templates": [
        "Katie had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Katie had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        28.0,
        28.0,
        28.0,
        28.0
      ],
      "completions": [
        [
          "\n\ndef CountSongs(A, B, C):\n  return A - B + C\n\nprint(CountSongs(A, B, C))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef num_songs(A,B,C):\n  return A - B + C\n\nprint(num_songs(10,5,7)) # 12 songs",
          "\n\nAnswer = A - B + C"
        ],
        [
          " \n\ndef total_songs(A, B, C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numberSongs(A, B, C):\n    return A - B + C\n\nnumberSongs(A, B, C)",
          "\n\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef mp3_player(old_songs, new_songs):\n  return old_songs - new_songs \n\nanswer = mp3_player(A, B) + C\nprint(answer)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef totalSongs(oldSongs, newSongs):\n  return oldSongs - newSongs\n\nprint(totalSongs(A, B + C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef find_num_songs(a, b, c):\n  return a - b + c\n\nnew_song_total = find_num_songs(a, b, c)\nprint(\"The total number of songs on her mp3 player is: \" + str(new_song_total))",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef totalSongs(oldSongs, newSongs):\n  return (oldSongs - newSongs) + newSongs\n\nprint(totalSongs(A, B))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(old_songs, new_songs):\n  return old_songs - new_songs \n\ntotal_songs(A, B) + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_player_update(deleted_songs, new_songs):\n  return deleted_songs - new_songs\n\ntotal_songs = mp3_player_update(A, B) + C\nprint(\"Katie has \" + str(total_songs) + \" songs on her mp3 player.\")",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef katies_mp3_player(asongs, bsongs, csongs):\n  return asongs - bsongs + csongs",
          "\n\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Katie had 11 songs on her mp3 player. If she deleted 7 old songs from it and then added 24 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 28.0,
      "index": 172
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 16,
      "duration": 14.219774007797241,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        31.0,
        31.0,
        31.0,
        31.0
      ],
      "completions": [
        [
          "\n\ndef oranges_in_bin(A, B, C):\n    return A - B + C\n\noranges_in_bin(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalOranges(A, B, C): \n  return A - B + C\n\nprint(totalOranges(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A,B,C):\n  return A-B+C\n  \nAnswer = oranges(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges(A, B, C): \n  return A - B + C\n\nprint(oranges(5, 2, 3)) \n# Output: 6",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef oranges(A, B, C):\n    return A - B + C \n\nresult = oranges(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef oranges_in_bin(a, b, c):\n  return a - b + c\n  \nprint(oranges_in_bin(10, 2, 5)) # Prints 13",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef orangesInBin(a,b,c):\n  return (a - b + c)\n\nprint(orangesInBin(5,2,6)) # Prints 9",
          "\n\nAnswer = A-B+C"
        ],
        [
          "\n\ndef oranges(a, b, c) :\n    return a - b + c\n\nprint(oranges(a, b, c))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A store had 5 oranges in a bin. If they threw away 2 of the old ones and put 28 new ones in the bin how many would be in the bin? ",
      "final_answer": 31.0,
      "index": 173
    }
  },
  {
    "result": 67.0,
    "meta": {
      "n_calls": 10,
      "duration": 9.598756074905396,
      "templates": [
        "Adam had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Adam have?\nWrite a Python function that returns the answer.",
        "Adam had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Adam have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        67.0,
        67.0,
        67.0,
        67.0,
        67.0
      ],
      "completions": [
        [
          "\n\ndef book_collection(A, B, C):\n  return A - B + C\n\n# example\nbook_collection(10, 3, 4)\n# Output: 11",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bookCount(A, B, C):\n    return A - B + C\n\nanswer = bookCount(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef book_math(A, B, C):\n  return A - B + C\n\nprint(book_math(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef adam_books(A, B, C):\n  return A-B+C\n  \nprint(adam_books(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef numBooks(A, B, C):\n  return A - B + C\n\nprint(numBooks(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Adam had 48 books. If he sold 19 of them and used the money he earned to buy 38 new books, how many books would Adam have? ",
      "final_answer": 67.0,
      "index": 174
    }
  },
  {
    "result": 37.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.173774003982544,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        37.0,
        37.0,
        37.0,
        37.0,
        37.0
      ],
      "completions": [
        [
          "\n\ndef total_students_in_fourth_grade(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef student_total(A, B, C):\n    return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef students_in_grade_4(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_new_student_total(A, B, C):\n  return A + C - B\n\nprint(get_new_student_total(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade_total(A, B, C):\n  return A + C - B\n\ntotal_students = fourth_grade_total(A, B, C)\nprint(total_students)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " In fourth grade there were 31 students at the start of the year. During the year 5 students left and 11 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 37.0,
      "index": 175
    }
  },
  {
    "result": 103.0,
    "meta": {
      "n_calls": 20,
      "duration": 15.355520963668823,
      "templates": [
        "For the school bake sale Robin made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Robin made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        103.0,
        103.0,
        103.0,
        103.0,
        103.0
      ],
      "completions": [
        [
          "\n\ndef bake_sale(A,B,C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef bake_sale_cupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A, B, C):\n  return A + B + C\n  \ntotal_cupcakes(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return (A + B + C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcake_total(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bake_sale(a,b,c):\n  return (a+c)-b\n\nanswer = bake_sale(A,B,C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\nDef cupcakes(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  total = A + B + C\n  return total\n\nprint(cupcakes(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef bake_sale(a,b,c):\n  return a+b+c",
          "\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Robin made 42 cupcakes. If she sold 22 of them and then made 39 more, how many cupcakes would she have? ",
      "final_answer": 59.0,
      "index": 176
    }
  },
  {
    "result": 41.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.05242919921875,
      "templates": [
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a Python function that returns the answer.",
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        41.0,
        41.0,
        41.0,
        41.0,
        41.0
      ],
      "completions": [
        [
          "\n\ndef rose_total(A, B, C):\n    return A - B + C\n\nprint(rose_total(A, B, C))",
          "\nAnswer = A+C-B"
        ],
        [
          "\n\ndef rose_calculator(A, B, C):\n  return A - B + C\n\nprint(rose_calculator(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef rose_count(A, B, C):\n  return A + C - B\n\nprint(rose_count(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_roses(A, B, C):\n  return A - B + C\n\nprint(total_roses(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef rose_count(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " A florist had 11 roses. If she sold 2 of them and then later picked 32 more, how many roses would she have? ",
      "final_answer": 41.0,
      "index": 177
    }
  },
  {
    "result": 22.0,
    "meta": {
      "n_calls": 12,
      "duration": 11.01849913597107,
      "templates": [
        "Frank had A dollars. At the store he spent $3 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a Python function that returns the answer.",
        "Frank had A dollars. At the store he spent $3 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        22.0,
        22.0,
        22.0,
        22.0,
        22.0
      ],
      "completions": [
        [
          "\n\ndef get_total_money(A, B):\n  return A + B - 3\n\n#print(get_total_money(10, 5)) # prints 12",
          "\nAnswer = A + B - 3"
        ],
        [
          "\n\ndef money_after_shopping(A, B):\n  return A + B - 3\n\nanswer = money_after_shopping(A, B)",
          "\nAnswer = A + B - 3"
        ],
        [
          "\n\ndef get_total_money(A, B):\n    return A + B - 3\n\ntotal = get_total_money(A, B)\nprint(total)",
          "\n\nAnswer = A + B - 3"
        ],
        [
          "\n\ndef money_total(A, B):\n  return A + B - 3\n\nprint(money_total(A, B))",
          "\nAnswer = A + B - 3"
        ],
        [
          "\n\ndef frank_total(A,B):\n  return A+B-3",
          "\nAnswer = A + B - 3"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef moneyCalc(a, b):\n  return a + b - 3  # Subtract 3 for the cost of the game purchased at the store.",
          "\nAnswer = A + B - 3"
        ]
      ]
    },
    "source": {
      "question": " Frank had 11 dollars. At the store he spent $3 on a new game. If he got another 14 dollars for his allowance, how much money does he have now? ",
      "final_answer": 22.0,
      "index": 178
    }
  },
  {
    "result": 46.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.858129024505615,
      "templates": [
        "Haley was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Haley was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        46.0,
        46.0,
        46.0,
        46.0,
        46.0
      ],
      "completions": [
        [
          "\n\ndef lives_left(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_calculator(A, B, C):\n    return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_calculator(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef livesCounter(A, B, C): \n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef total_lives(A, B, C):\n    # Calculates the total number of lives after playing a game\n    total = A - B + C\n    return total",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Haley was playing a video game and had 14 lives. In a hard part of the game she lost 4 lives. If she got 36 more lives in the next level, how many lives would she have? ",
      "final_answer": 46.0,
      "index": 179
    }
  },
  {
    "result": 58.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.408506870269775,
      "templates": [
        "Luke had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a Python function that returns the answer.",
        "Luke had A dollars in January. By March he had spent B dollars. If he got another C dollars from his mom, how much money would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        58.0,
        58.0,
        58.0,
        58.0,
        58.0
      ],
      "completions": [
        [
          "\n\ndef money_balance(A, B, C):\n  return A + C - B",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef invested_money (A, B, C):\n  return A+C-B\n\nprint(invested_money(100, 30, 40))\n# 110",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef find_balance(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_money(A, B, C):\n  return A + C - B\n\nprint(total_money(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef moneySpent(a, b, c):\n  return a + c - b",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef money_left(A, B, C):\n  return A + C - B",
          " \nAnswer = A + C - B;"
        ]
      ]
    },
    "source": {
      "question": " Luke had 48 dollars in January. By March he had spent 11 dollars. If he got another 21 dollars from his mom, how much money would he have? ",
      "final_answer": 58.0,
      "index": 180
    }
  },
  {
    "result": 41.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.827554941177368,
      "templates": [
        "Emily was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Emily was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        41.0,
        41.0,
        41.0,
        41.0,
        41.0
      ],
      "completions": [
        [
          "\n\nDefine the function\ndef calculate_lives(A, B, C):\n\nCalculate the answer\n  return A - B + C\n\nCall the function\ncalculate_lives(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef find_lives(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives_remaining(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_lives_count(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef play(A, B, C): \n  return A-B+C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_lives(a, b, c):\n  return a - b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_lives(a, b, c):\n  return a-b+c",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Emily was playing a video game and had 42 lives. In a hard part of the game she lost 25 lives. If she got 24 more lives in the next level, how many lives would she have? ",
      "final_answer": 41.0,
      "index": 181
    }
  },
  {
    "result": 58.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.194435119628906,
      "templates": [
        "Debby had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a Python function that returns the answer.",
        "Debby had A coloring books. If she gave away B of them, but then bought C more, how many would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        58.0,
        58.0,
        58.0,
        58.0,
        58.0
      ],
      "completions": [
        [
          "\n\ndef total_coloring_books(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_coloring_books(A, B, C):\n  return A - B + C\n\nprint(total_coloring_books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef get_coloring_books(A, B, C):\n  return A - B + C\n\nprint(get_coloring_books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_coloring_books(A, B, C):\n  return A-B+C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef coloring_books(A, B, C):\n return A - B + C\n\ncoloring_books(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Debby had 30 coloring books. If she gave away 7 of them, but then bought 35 more, how many would she have total? ",
      "final_answer": 58.0,
      "index": 182
    }
  },
  {
    "result": 23.0,
    "meta": {
      "n_calls": 44,
      "duration": 33.31513977050781,
      "templates": [
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a Python function that returns the answer.",
        "The school cafeteria had A apples. If they used B to make lunch for the students and then bought C more, how many apples would they have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        23.0,
        23.0
      ],
      "completions": [
        [
          " \n\ndef calculate_apples(A, B, C):\n    return A - B + C\n\nprint(calculate_apples(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_apples(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalApples(A,B,C):\n  return A + B + C\n\ntotalApples(A,B,C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateApples(a, b, c):\n  return a + b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apple_calculation(A, B, C):\n \treturn A + B + C",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef total_number_of_apples(a, b, c):\n  return a + b + c",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n    return A + B + C",
          "\n\nA + C - B = Answer \nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A,B,C):\n    return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C\n\n# Call the function\ncalculate_apples(10, 5, 7)\n# Output: 22",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef apple_count(A, B, C):\n  return A + B - C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n    return A + B + C\n\ntotal_apples(A, B, C)",
          "\nAnswer = A + C"
        ],
        [
          "\n\ndef apples(A,B,C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef calculate_apples(a, b, c):\n  return a + b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_apples(A, B, C):\n  return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_of_apples(A, B, C):\n    return A + B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_apples(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_apples(a,b,c):\n  return a + b + c\n\nanswer = number_of_apples(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " The school cafeteria had 12 apples. If they used 8 to make lunch for the students and then bought 19 more, how many apples would they have? ",
      "final_answer": 23.0,
      "index": 183
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.917164087295532,
      "templates": [
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a Python function that returns the answer.",
        "At the fair there were A people in line for the bumper cars. If B of them got tired of waiting and left and C more got in line, how many people would be in line?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        31.0,
        31.0,
        31.0,
        31.0
      ],
      "completions": [
        [
          "\n\ndef wait_for_bumper_cars(A, B, C):\n  return A - B + C\n\nprint(wait_for_bumper_cars(A, B, C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef bumperCars(A, B, C):\n  return A - B + C\n\nprint(bumperCars(A, B, C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef bumper_cars(A, B, C):\n  return A - B + C",
          "\nAnswer = A+C-B"
        ],
        [
          "\n\ndef totalInLine(A,B,C):\n  return A - B + C\n\nprint(totalInLine(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef people_in_line(A, B, C):\n  return A - B + C \n\nanswer = people_in_line(A, B, C)",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_line_size(a, b, c):\n  return a - b + c\n\nprint(get_line_size(A, B, C))",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " At the fair there were 31 people in line for the bumper cars. If 25 of them got tired of waiting and left and 25 more got in line, how many people would be in line? ",
      "final_answer": 31.0,
      "index": 184
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.685233354568481,
      "templates": [
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a Python function that returns the answer.",
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef num_roses(A, B, C):\n    return A - B + C\n\nprint(num_roses(12, 5, 6))\n# Output: 13",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses(A, B, C):\n  return A - B + C  # subtract the number of roses sold, then add the number of roses picked later",
          " \nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses_total (A,B,C): \n    return A - B + C\n\nprint (roses_total(A, B, C))",
          " to solve this problem.\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " A florist had 50 roses. If she sold 15 of them and then later picked 21 more, how many roses would she have? ",
      "final_answer": 56.0,
      "index": 185
    }
  },
  {
    "result": 23.0,
    "meta": {
      "n_calls": 22,
      "duration": 18.620434045791626,
      "templates": [
        "Zoe had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a Python function that returns the answer.",
        "Zoe had A songs on her mp3 player. If she deleted B old songs from it and then added C new songs, how many songs does she have on her mp3 player?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        23.0,
        23.0,
        23.0,
        23.0,
        23.0
      ],
      "completions": [
        [
          " \n\ndef songs(A,B,C):\n  return A - B + C",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef mp3_player(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef number_of_songs(A, B, C):\n  return A - B + C\n  \nanswer = number_of_songs(A, B, C)",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A - B + C"
        ],
        [
          "\n\ndef totalSongs(A, B, C): \n  return A - B + C \n\ntotalSongs(A, B, C)",
          "\nAnswer = A - B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef mp3_total_songs(old_songs, new_songs):\n  return old_songs - new_songs\n\nprint(mp3_total_songs(A, B + C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef numOfSongs(A, B, C):\n  numSongs = A - B + C\n  return numSongs",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateSongs(a,b,c):\n  return a - b + c\n\nprint(calculateSongs(A,B,C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs_on_mp3(a,b,c):\n  return a - b + c\n\nprint(total_songs_on_mp3(A, B, C))",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_songs(a, b, c):\n    return a-b+c\n\nprint(total_songs(10, 5, 8)) # answer is 13",
          "\nAnswer = A - B + C"
        ],
        [
          "\n\ndef total_song_number(a,b,c):\n  return a-b+c\n\nnumber_of_songs = total_song_number(A,B,C)",
          "\nAnswer = A - B + C"
        ]
      ]
    },
    "source": {
      "question": " Zoe had 6 songs on her mp3 player. If she deleted 3 old songs from it and then added 20 new songs, how many songs does she have on her mp3 player? ",
      "final_answer": 23.0,
      "index": 186
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.930875062942505,
      "templates": [
        "At the arcade Dave won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Dave won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef getTickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculateTickets(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef remainingTickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets_total(A, B, C):\n  return A + C - B\n\ntickets_total(A, B, C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets_total(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calcTotalTickets(A, B, C):\n  answer = A + C - B\n  return answer",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef arcade_tickets(A, B, C):\n    answer = A + C - B\n    return answer",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the arcade Dave won 11 tickets. If he spent 5 tickets on a beanie and later won 10 more tickets, how many would he have? ",
      "final_answer": 16.0,
      "index": 187
    }
  },
  {
    "result": 28.0,
    "meta": {
      "n_calls": 46,
      "duration": 41.93638300895691,
      "templates": [
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers to wait on. If B customers left and he got another C customers, how many customers would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        28.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A, B, C):\n  return A + (C - B)\n\nanswer = total_customers(A, B, C)",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateTotalCustomers(A,B,C):\n  return A+B+C\n\n#Call the function\nprint(calculateTotalCustomers(A,B,C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef customer_count(a, b, c): \n  return a + b + c \n  \ncustomer_count(a, b, c)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef num_customers(A,B,C):\n  return A-B+C\n\nprint(num_customers(10,2,7))\n# Output: 15",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customer_total(a, b, c):\n  return a - b + c\n\ntotal_customers = customer_total(a, b, c)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalCustomers(a, b, c):\n  return a + (b - c)\n\ntotalCustomers(a, b, c)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalCustomers(a, b, c): \n  return a - b + c \n\nprint(totalCustomers(a, b, c))",
          " \nAnswer = A + B + C"
        ],
        [
          "\n\ndef customer_count(A,B,C):\n  return A + C - B\n \n#Example\ntotal_customers = customer_count(5,3,4)\nprint(total_customers)\n\n#Output\n6",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a - b + c\n  \ntotal_customers(a, b, c)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\nprint(total_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef find_total_customers(a, b, c):\n    return a - b + c\n\ntotal_customers = find_total_customers(a, b, c)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef get_customers(A, B, C): \n  return A - B + C\n\nprint(get_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n    return A - B + C\n\nprint(waiter_customers(10, 5, 2))\n# Output: 7",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n  return a + b + c\n\nprint(total_customers(a, b, c))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef waiter_customers(a, b, c):\n  return a - b + c\n\nprint(waiter_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numOfCustomers(a, b, c):\n    return a - b + c\n\nprint(numOfCustomers(a, b, c))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef count_customers(a, b, c):\n  return a + c - b\n\nprint(count_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customer_count(a, b, c):\n  return a + b + c\n\nprint(customer_count(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_customers(A, B, C):\n    return A + C - B\n\nprint(num_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\ntotal_customers(A, B, C)",
          "\nAnswer = A+B+C"
        ],
        [
          "\n\ndef num_customers(a, b, c):\n  return a + b + c\n  \nprint(num_customers(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A - B + C\n\nprint(total_customers(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef customerTotal(a,b,c):\n  return a-b+c\n\nprint(customerTotal(A,B,C))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 33 customers to wait on. If 31 customers left and he got another 26 customers, how many customers would he have? ",
      "final_answer": 28.0,
      "index": 188
    }
  },
  {
    "result": 47.0,
    "meta": {
      "n_calls": 14,
      "duration": 11.80674695968628,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        47.0,
        47.0,
        47.0,
        47.0,
        47.0
      ],
      "completions": [
        [
          "\n\ndef fourth_grade_students(A, B, C):\n  return A + C - B\n\nprint(fourth_grade_students(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef end_of_grade(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          " \n\ndef fourth_grade(A, B, C): \n\treturn A + C - B \n\nprint(fourth_grade(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade(A, B, C): \n  return (A - B + C)\n\nprint(fourth_grade(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGrade(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef forth_grade(A, B, C):\n  final_number = A - B + C\n  return final_number\n\nanswer = forth_grade(A, B, C)\nprint(answer)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade_class(a,b,c):\n  return a+c-b\n\nprint(fourth_grade_class(A,B,C))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " In fourth grade there were 11 students at the start of the year. During the year 6 students left and 42 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 47.0,
      "index": 189
    }
  },
  {
    "result": 33.0,
    "meta": {
      "n_calls": 12,
      "duration": 10.542391061782837,
      "templates": [
        "Oliver had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a Python function that returns the answer.",
        "Oliver had A socks. If he threw away B old ones that didn't fit and bought C new ones, how many socks would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        33.0,
        33.0,
        33.0,
        33.0,
        33.0
      ],
      "completions": [
        [
          "\n\ndef numOfSocks(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef new_socks(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\nAssuming the values of A, B, and C are given integers, the function would look like this:\n\ndef calculateSocks(A,B,C): \n    return A - B + C\n\nIn this case, Oliver would have A - B + C socks.",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\ndef get_num_socks(A, B, C):\n  return A + C - B\n  \nprint(get_num_socks(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef socks(A,B,C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef newSockCount (a, b, c):\n  return a - b + c \n  \nnewSockCount(a, b, c)",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Oliver had 11 socks. If he threw away 4 old ones that didn't fit and bought 26 new ones, how many socks would he have? ",
      "final_answer": 33.0,
      "index": 190
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.99112606048584,
      "templates": [
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a Python function that returns the answer.",
        "A store had A oranges in a bin. If they threw away B of the old ones and put C new ones in the bin how many would be in the bin?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef store_oranges(A, B, C):\n  return A - B + C\n  \n# Example\n\nstore_oranges(50, 10, 20) # returns 60",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_oranges(A, B, C):\n  return A - B + C\n\nprint(calculate_oranges(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges_in_bin(A, B, C):\n  return A + C - B\n\nprint(oranges_in_bin(34, 12, 18))\n\n# Output: 40",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef oranges_in_bin(A, B, C):\n  return A-B+C\n\nprint(oranges_in_bin(50, 10, 20)) # Output: 60",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef binning_oranges(A, B, C):\n  return A - B + C\n\n# Calling the function\nbinning_oranges(10, 4, 6) # Output: 12",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef update_oranges(a, b, c):\n  return a - b + c\n  \nprint(update_oranges(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A store had 40 oranges in a bin. If they threw away 25 of the old ones and put 21 new ones in the bin how many would be in the bin? ",
      "final_answer": 36.0,
      "index": 191
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.46405291557312,
      "templates": [
        "At the arcade Edward won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a Python function that returns the answer.",
        "At the arcade Edward won A tickets. If he spent B tickets on a beanie and later won C more tickets, how many would he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef total_tickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef winningTickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalTickets(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef edwardTickets(A, B, C):\n  return A + C - B",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef tickets_calculation(A,B,C):\n  return A+C-B",
          "\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef ticketsTotaled(a,b,c):\n  return a+c-b",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " At the arcade Edward won 9 tickets. If he spent 4 tickets on a beanie and later won 4 more tickets, how many would he have? ",
      "final_answer": 9.0,
      "index": 192
    }
  },
  {
    "result": 43.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.847202777862549,
      "templates": [
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a Python function that returns the answer.",
        "In fourth grade there were A students at the start of the year. During the year B students left and C new students came to school. How many students were in fourth grade at the end?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        43.0,
        43.0,
        43.0,
        43.0,
        43.0
      ],
      "completions": [
        [
          "\n\ndef fourthGradeStudents(A,B,C):\n    return A + C - B\n\nfourthGradeStudents(A,B,C)",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourthGradeStudents(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef end_of_year_total(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef totalFourthGradeStudents(A, B, C):\n  return A + C - B",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef fourth_grade(A, B, C):\n  return A+C-B\n\nanswer = fourth_grade(A, B, C)\nprint(answer)",
          " \n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef grade4students(A,B,C):\n  result = A+C-B\n  return result",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " In fourth grade there were 4 students at the start of the year. During the year 3 students left and 42 new students came to school. How many students were in fourth grade at the end? ",
      "final_answer": 43.0,
      "index": 193
    }
  },
  {
    "result": 26.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.33051586151123,
      "templates": [
        "Haley picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a Python function that returns the answer.",
        "Haley picked A carrots from her garden. If she threw out B of them and then picked C more the next day, how many carrots would she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        26.0,
        26.0,
        26.0,
        26.0
      ],
      "completions": [
        [
          "\n\ndef totalCarrots(A, B, C):\n    return A - B + C\n    \ntotalCarrots(A, B, C)",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef calculate_carrots(A, B, C):\n  return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrot_calc(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_carrots(A, B, C):\n  return A - B + C\n\nprint(total_carrots(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef carrots(A, B, C):\n  total_carrots = A - B + C\n  return total_carrots",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef carrot_count(A, B, C):\n  total_carrots = A-(B)+C\n  return total_carrots",
          "\n\nA + C - B = Answer \nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_carrots(a, b, c):\n  return a - b + c\n  \nprint(count_carrots(A, B, C))",
          "\n\nAnswer = A + (C - B)"
        ]
      ]
    },
    "source": {
      "question": " Haley picked 28 carrots from her garden. If she threw out 11 of them and then picked 9 more the next day, how many carrots would she have total? ",
      "final_answer": 26.0,
      "index": 194
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.541561126708984,
      "templates": [
        "Roger had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Roger have?\nWrite a Python function that returns the answer.",
        "Roger had A books. If he sold B of them and used the money he earned to buy C new books, how many books would Roger have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0,
        34.0,
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef calculateBooks(A, B, C): \n    return A - B + C\n\nprint(calculateBooks(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef number_of_books(A, B, C):\n  return A - B + C\n\nprint(number_of_books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef books(A, B, C):\n    return A - B + C\n\nprint(books(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          " \n\n\ndef how_many_books(A, B, C):\n  return A - B + C\n\nprint(how_many_books(A,B,C))",
          "\nAnswer = A + C -B"
        ],
        [
          "\n\ndef books(A,B,C):\n  return A - B + C\n\nprint(books(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef books_calc(a, b, c):\n  return a - b + c\n\nprint(books_calc(A, B, C))",
          "\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " Roger had 25 books. If he sold 21 of them and used the money he earned to buy 30 new books, how many books would Roger have? ",
      "final_answer": 34.0,
      "index": 195
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.364124774932861,
      "templates": [
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a Python function that returns the answer.",
        "A florist had A roses. If she sold B of them and then later picked C more, how many roses would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef numRoses(A, B, C):\n  return A - B + C\n\nprint(numRoses(A, B, C))",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef findRoses(A, B, C):\n  return A - B + C\n\nprint(findRoses(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef how_many_roses(A, B, C):\n  return A - B + C\n\nprint(how_many_roses(A, B, C))",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roses_count(A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef roseCalc(A,B,C):\n  return A + C - B\n  \nprint(roseCalc(A,B,C))",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef roseTotal(a, b, c):\n  return a - b + c",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef count_roses(a,b,c):\n    return a - b + c\n\n#Example:\nprint(count_roses(10, 5, 2))\n#Output: 7",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_roses(a, b, c):\n  return a - b + c\n\nprint(total_roses(A, B, C))",
          "\n\nAnswer = A + C - B"
        ]
      ]
    },
    "source": {
      "question": " A florist had 5 roses. If she sold 3 of them and then later picked 34 more, how many roses would she have? ",
      "final_answer": 36.0,
      "index": 196
    }
  },
  {
    "result": 41.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.454653978347778,
      "templates": [
        "Wendy was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a Python function that returns the answer.",
        "Wendy was playing a video game and had A lives. In a hard part of the game she lost B lives. If she got C more lives in the next level, how many lives would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        41.0,
        41.0,
        41.0,
        41.0,
        41.0
      ],
      "completions": [
        [
          "\n\ndef calculate_lives(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef lives (A, B, C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef WendyLives(A,B,C):\n  return A - B + C",
          "\n\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return A - B + C",
          "\nAnswer = A + C - B"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A - B + C",
          "\n\nAnswer = A + C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Wendy was playing a video game and had 10 lives. In a hard part of the game she lost 6 lives. If she got 37 more lives in the next level, how many lives would she have? ",
      "final_answer": 41.0,
      "index": 197
    }
  },
  {
    "result": 29.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.027091026306152,
      "templates": [
        "John had A dollars. At the store he spent $2 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a Python function that returns the answer.",
        "John had A dollars. At the store he spent $2 on a new game. If he got another B dollars for his allowance, how much money does he have now?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        29.0,
        29.0,
        29.0,
        29.0,
        29.0
      ],
      "completions": [
        [
          "\n\ndef newMoney(A, B):\n  return A + B - 2",
          "\n\nAnswer = A + B - 2"
        ],
        [
          "\n\ndef calculate_total(A, B):\n  return A + B - 2\n\ntotal = calculate_total(A, B)",
          "\nAnswer = A + B - 2"
        ],
        [
          "\n\ndef spending_calculator(A, B):\n  return A + B - 2 # Subtracting 2 because he spent $2 for the game\n\nprint(spending_calculator(A, B))",
          "\nAnswer = A + B - 2"
        ],
        [
          "\n\n\ndef money_total(A, B):\n  return A+B-2",
          "\n\nAnswer = A + B - 2"
        ],
        [
          "\n\ndef calc_total_money(A, B):\n  return A+B-2",
          "\nAnswer = A + B - 2"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calcMoney(a,b):\n  return a + b - 2\n\nprint(calcMoney(A,B))",
          "\nAnswer = A + B - 2"
        ]
      ]
    },
    "source": {
      "question": " John had 5 dollars. At the store he spent $2 on a new game. If he got another 26 dollars for his allowance, how much money does he have now? ",
      "final_answer": 29.0,
      "index": 198
    }
  },
  {
    "result": 61.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.11858320236206,
      "templates": [
        "For the school bake sale Chloe made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a Python function that returns the answer.",
        "For the school bake sale Chloe made A cupcakes. If she sold B of them and then made C more, how many cupcakes would she have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        61.0,
        61.0,
        61.0,
        61.0
      ],
      "completions": [
        [
          "\n\ndef calculate_cupcakes(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A, B, C):\n  return A + B + C",
          " \n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_cupcakes(A,B,C):\n  return A+B+C",
          "\nAnswer =A + B + C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bake_sale(a, b, c):\n  return a + b + c",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numCupcakes(A, B, C): \n  return A - B + C",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " For the school bake sale Chloe made 28 cupcakes. If she sold 25 of them and then made 8 more, how many cupcakes would she have? ",
      "final_answer": 11.0,
      "index": 199
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.771091938018799,
      "templates": [
        "At the town carnival Billy rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a Python function that returns the answer.",
        "At the town carnival Billy rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0,
        50.0,
        50.0,
        50.0,
        50.0
      ],
      "completions": [
        [
          "\n\ndef ticket_amount(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef ticket_usage(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_tickets(A,B,C):\n  return (A*C) + (B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef ticketsUsed(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef totalTickets(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_tickets(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " At the town carnival Billy rode the ferris wheel 7 times and the bumper cars 3 times. If each ride cost 5 tickets, how many tickets did he use? ",
      "final_answer": 50.0,
      "index": 200
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 34,
      "duration": 34.83610916137695,
      "templates": [
        "Chloe was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Chloe have total?\nWrite a Python function that returns the answer.",
        "Chloe was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Chloe have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef total_clothes(A, B, C):\n  return A*(B+C)\n\ntotal = total_clothes(A, B, C)\n\nprint('Chloe has a total of ' + str(total) + ' pieces of winter clothing.')",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winterClothing(A,B,C):\n  return A*(B + C)\n\nAnswer: Chloe had A*(B+C) pieces of winter clothing.",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef total_winter_clothing(A, B, C):\n  return A*(B + C)\n\nprint(total_winter_clothing(3, 5, 7))\n\nThis prints out 36, so Chloe had 36 pieces of winter clothing.",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_clothing(A, B, C):\n  return A * (B + C)\n\ntotal_clothing(3, 2, 4) # returns 18",
          "\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winter_clothes(A, B, C):\n  return A * (B + C)\n  \nprint(winter_clothes(3, 4, 5))\n# Prints 32",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothes(A, B, C):\n    return A*(B+C)\n\nAnswer: Chloe had A*(B+C) pieces of winter clothing.",
          "\n\nAnswer = A + (B x 2) + (C x 2)"
        ],
        [
          "\n\ndef WinterClothing(A,B,C):\n    total_clothes = A*(B+C)\n    return total_clothes\n\nprint (WinterClothing(3,2,4))\n\nAnswer: 24",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return (A * (B + C))\n\ntotal = winter_clothing(3, 12, 8)\nprint(total)\n\n# Answer: 48",
          "\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef winter_clothing():\n  A = int(input(\"How many boxes did Chloe have? \"))\n  B = int(input(\"How many scarves were in each box? \"))\n  C = int(input(\"How many mittens were in each box? \"))\n  return A * (B + C)\n\nprint(winter_clothing())",
          "\n\nAnswer = (A x 2) + (B x 2) + C"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A * (B + C)\n\nprint(winter_clothing(3, 2, 4))\n# prints 20",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef get_winter_clothing(a, b, c):\n    return a*b+a*c\n\nprint(get_winter_clothing(A, B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C): \n  return (A * (B + C))\n\nAnswer = winterClothing(A, B, C)",
          "\n\nAnswer = A + (B x 2) + (C x 2)"
        ],
        [
          "\n\ndef winter_clothes(A, B, C):\n    return A * (B + C)\n\n# example \nwinter_clothes(2, 3, 4)\n# answer \n14",
          "\n\nAnswer = A (B + C)"
        ],
        [
          "\n\ndef winterClothes(boxA, scarvesB, mittensC):\n  return boxA * (scarvesB + mittensC)\n\nprint(winterClothes(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winter_clothing(a, b, c):\n  return a * (b + c)\n\nAnswer: Chloe had a total of A*(B+C) pieces of winter clothing.",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winterClothes(A,B,C):\n  return A*(B+C)\n\nprint(winterClothes(2,3,4))\n\nAnswer: 22",
          "\nAnswer = A + (B * C)"
        ],
        [
          "\n\ndef winter_clothes(a,b,c):\n    return (a * (b + c))\n\nwinter_clothes(A,B,C)",
          "\nAnswer = (A x B) + C"
        ]
      ]
    },
    "source": {
      "question": " Chloe was unboxing some of her old winter clothes. She found 4 boxes of clothing and inside each box there were 2 scarves and 6 mittens. How many pieces of winter clothing did Chloe have total? ",
      "final_answer": 32.0,
      "index": 201
    }
  },
  {
    "result": 90.0,
    "meta": {
      "n_calls": 30,
      "duration": 26.638219118118286,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        90.0,
        90.0,
        90.0,
        90.0
      ],
      "completions": [
        [
          "\n\ndef waiter(A, B, C):\n  return A * (B + C)\n\n# Example\n# 10 tables, 2 women and 3 men at each table\nwaiter(10, 2, 3)\n# returns 80",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef number_customers(A, B, C):\n  return A * (B + C)\n\nprint (number_customers(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_tables(A, B, C):\n  return A * (B + C)\n\ntotal_customers = waiter_tables(A, B, C)\nprint(total_customers)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef num_customers(A, B, C):\n  return A*(B+C)\n\nprint(num_customers(5, 4, 3)) #returns 35",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_customers(a, b, c):\n  return a*(b+c)\n\nprint(num_of_customers(A, B, C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef num_customers(A, B, C): \n  return (A * (B + C))\n\nprint(num_customers(A, B, C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A * (B + C)\n  \nprint(waiter_customers(A, B, C))",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef num_customers(A,B,C):\n  return A*(B+C)\n\nnum_customers(A,B,C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiterCustomers(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef customers_total(A, B, C):\n  return A*(B+C)\n\nprint(customers_total(A, B, C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\nprint(total_customers(A, B, C))",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A * (B + C)\n\nprint(waiter_customers(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A * B * C\n\nprint(total_customers(A, B, C))",
          "\n\nAnswer = A \u00d7 (B+C)"
        ],
        [
          "\n\ndef calculate_customers(A, B, C):\n    return A * (B + C)\n\nprint(calculate_customers(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n    return A*(B+C)",
          "\n\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 9 tables he was waiting on, with 7 women and 3 men at each table. How many customers total did the waiter have? ",
      "final_answer": 90.0,
      "index": 202
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 20,
      "duration": 17.121405839920044,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Emily bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Emily bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0,
        12.0,
        12.0,
        12.0,
        12.0
      ],
      "completions": [
        [
          "\n\ndef aprilsDiscountFlowers(A, B, C):\n    return A*(B+C)\n\n#Emily spent (A*B + A*C) dollars.",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flowerSale(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef price(A, B, C): \n  return A*(B+C)\n\nprice(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\n\ndef total_flowers(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate(A, B, C):\n    return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flower_price(A, B, C):\n  return A*(B+C)\n\n# the function would be called \nflower_price(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef purchase_flowers(a,b,c):\n    return a * (b + c)\n\nprint purchase_flowers(A,B,C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_flowers_cost(A, B, C):\n  total = (A * B) + (A * C)\n  return total\n\nprint(total_flowers_cost(2, 10, 5))\n# Prints 70",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef sale(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef flower_sale(a, b, c):\n  return a * (b + c)\n\ntotal = flower_sale(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 3 dollars. If Emily bought 2 roses and 2 daisies, how much did she spend? ",
      "final_answer": 12.0,
      "index": 203
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.699842929840088,
      "templates": [
        "Isabel had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a Python function that returns the answer.",
        "Isabel had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef homework_problems(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef questions_total(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef math_reading_homework(A,B,C): \n  total_problems = A*C + B*C\n  return total_problems",
          "\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef math_reading_problems(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * B * C"
        ],
        [
          "\n\ndef math_homework(a, b, c):\n  return a*c + b*c\n\nAnswer = math_homework(A, B, C)",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Isabel had 2 pages of math homework and 4 pages of reading homework. If each page had 5 problems on it, how many problems did she have to complete total? ",
      "final_answer": 30.0,
      "index": 204
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 24,
      "duration": 16.59734582901001,
      "templates": [
        "Wendy was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Wendy was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef calculateScore(A, B , C): \n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef findScore(A, B, C):\n    return A*(B+C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef score_calculator(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef score_calc(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * B + A *C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef score(A,B,C):\n    return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef treasure_score(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculateScore(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n  totalScore = A * (B + C)\n  return totalScore",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef findScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef calculate_score(a, b, c):\n    return a * (b + c)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef score(A,B,C):\n return (A*B)+(A*C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef treasureScore(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Wendy was playing a video game where she scores 5 points for each treasure she finds. If she found 4 treasures on the first level and 3 on the second, what would her score be? ",
      "final_answer": 35.0,
      "index": 205
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.21244478225708,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C",
          "\nAnswer = (A + B) x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\nprint(total_lives(2, 3, 5))\n# Answer: 50",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nAnswer = lives_total(A, B, C)",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C + B*C\n\ntotalLives(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A+B)*C",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return A*C + B*C \n\nprint(total_lives(3, 4, 5)) \n\nThis will return 45, since 3*5 + 4*5 = 45.",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A + B) * C",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return ((A + B) * C)\n\ntotal_lives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nprint(lives_total(A, B, C))",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\ntotal_lives(2, 3, 4)\n\nAnswer: 24",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef friends_game(A, B, C): \n    return A*C + B*C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_lives(A, B, C):\n  return (A + B)*C\n\nprint(num_lives(2, 3, 4))\n# Output: 24",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef calc_total_lives(A, B, C):\n  return (A + B) * C\n  \nprint(calc_total_lives(2, 3, 5))\n\nAnswer: 50",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * C + B * C\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_lives(A, B, C): \n  return (A + B) * C \nAnswer = num_lives(A, B, C)",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return (A + B) * C \n\nprint(total_lives(2, 4, 3)) \n# Output: 24",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C\n  \ntotal_lives(2, 3, 5)  # returns 35",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n  \nprint(\"The total number of lives is: \", lives_total(A,B,C))",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef totalLives(a, b, c):\n  return a * c + b * c\n\nprint(totalLives(3, 4, 5))  # prints 45",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return A*C + B*C \n\nprint(total_lives(A, B, C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_lives(A,B,C): \n  return A*C + B*C",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n    return (A+B)*C\n\nprint(lives_total(A, B, C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C\n\ntotalLives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef numLives(A, B, C):\n  return (A + B) * C\n  \nprint(numLives(2, 3, 4))  # prints 24",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nlives_total(A, B, C)",
          "\n\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " There were 7 friends playing a video game online when 2 more players joined the game. If each player had 7 lives, how many lives did they have total? ",
      "final_answer": 63.0,
      "index": 206
    }
  },
  {
    "result": 90.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.471567153930664,
      "templates": [
        "Paul bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a Python function that returns the answer.",
        "Paul bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        90.0,
        90.0,
        90.0,
        90.0,
        90.0
      ],
      "completions": [
        [
          "\n\ndef candy_total(A,B,C):\n  return A*C + B*C\n \nprint(candy_total(3,4,7))\n#Prints 77",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalCandyPieces(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef candyTotal(A,B,C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef candy_count(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef calculate_total_candy(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_candy(a, b, c):\n  return a*c + b*c",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef total_candy_pieces(A,B,C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Paul bought 6 boxes of chocolate candy and 4 boxes of caramel candy. If each box has 9 pieces inside it, how much candy did he have total? ",
      "final_answer": 90.0,
      "index": 207
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 24,
      "duration": 25.5176420211792,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef total_birds(A, B, C):\n  return A*(B + C)\n\n#Example\ntotal_birds(3, 10, 5)\n#returns 45",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef findNumBirds(A,B,C): \n  return A*(B+C)\n\nprint(findNumBirds(A,B,C))",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef petstore_birds(A,B,C):\n  return A*(B+C)\n\n#Example \npetstore_birds(3,2,1)\n# returns 9",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef pet_store_birds(A, B, C):\n  return A * (B + C)\n\ntotal_birds = pet_store_birds(5, 3, 7) # returns 50",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef petStore(A,B,C): \n  return (A * (B + C))\n\nprint(petStore(A,B,C))",
          " \n\nAnswer = A x (B + C)"
        ],
        [
          " \n\ndef total_birds(A, B, C): \n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef bird_total(A, B, C):\n   return (A * B) + (A * C)\n\nprint(bird_total(3, 5, 6))\n\nAnswer: 63",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calculate_birds(A,B,C):\n  return A * (B + C)\n\ntotal_birds = calculate_birds(A,B,C)\nprint(total_birds)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef birds_total(A,B,C):\n  return A*(B+C)\n\nprint(birds_total(A,B,C))",
          "\n\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef pet_store_birds(a, b, c):\n    total_birds = a*b + a*c\n    return total_birds\n\nprint(pet_store_birds(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\n# Define a function to calculate the total number of birds \ndef total_birds(A, B, C): \n \n    # Calculate total number of birds \n    total_birds = A * (B + C) \n  \n    # Return total number of birds \n    return total_birds \n  \n# Get the total number of birds \nA = 12\nB = 3\nC = 5\nprint(\"Total number",
          "\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef total_birds(A, B, C):\n  return A * (B + C)\n  \nprint(total_birds(A, B, C))",
          "\nAnswer =  A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 6 bird cages. If each cage has 6 parrots and 2 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 48.0,
      "index": 208
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 34,
      "duration": 27.976869106292725,
      "templates": [
        "Rachel was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Rachel was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef number_of_books(A,B,C): \n    return A * B + A * C \n\nprint(number_of_books(A,B,C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef getNumberOfBooks(A, B, C):\n  return A*B + A*C\n\n# example\nprint(getNumberOfBooks(10, 3, 5))\n# Output: 80",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_books(A,B,C):\n  return A*(B+C)\n\ntotal_books(5, 4, 5)\n\nanswer: 50 books",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateBookCount(A, B, C): \n  return A * (B + C)\n\nanswer = calculateBookCount(A, B, C) \nprint(answer)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_books(A,B,C): \n  return A * (B + C) \n\nprint(total_books(5,4,2)) \n\nThis prints out a total of 30 books.",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef books_total(shelves_mystery, shelves_picture):\n  return shelves_mystery * B + shelves_picture * C",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_books(B,C):\n    return B*A + C*A\n\ntotal_books(B,C)",
          "\n\nAnswer = B x 10 + C x 5"
        ],
        [
          "\n\ndef total_books(b, c):\n  return b*A + c*A\n\ntotal_books(b, c)",
          "\nAnswer = AB + C"
        ],
        [
          "\n\ndef MysteryBooks(A, B, C): \n  return A * (B + C)\n\nprint(MysteryBooks(25,3,2))\n# Answer: 125 books",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_total_books(b, c):\n    return b * 5 + c * 10\n\ntotal_books = calculate_total_books(b, c)",
          " \nAnswer = A(B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C):\n  return B * C\n\nprint(totalBooks(B, C))",
          " \nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef bookNumber(A,B,C): \n  return A * (B + C) \n\nprint(bookNumber(10, 5, 2)) \n\nAnswer: 70 books",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n    return B * C\n\ntotal = total_books(B, C)\nprint(total)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef num_books(B,C):\n  return B*12 + C*8\n\nprint(num_books(B,C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C): \n  return B + C",
          "\nAnswer = AB + C"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B*C\n  \nprint(total_books(B, C))",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\n\ndef total_books(B, C):\n    return B * C",
          "\n\nAnswer = A*(B+C)"
        ]
      ]
    },
    "source": {
      "question": " Rachel was organizing her book case making sure each of the shelves had exactly 9 books on it. If she had 6 shelves of mystery books and 2 shelves of picture books, how many books did she have total? ",
      "final_answer": 72.0,
      "index": 209
    }
  },
  {
    "result": 49.0,
    "meta": {
      "n_calls": 26,
      "duration": 24.791059017181396,
      "templates": [
        "Rachel was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Rachel have total?\nWrite a Python function that returns the answer.",
        "Rachel was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Rachel have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        49.0,
        49.0,
        49.0,
        49.0
      ],
      "completions": [
        [
          "\n\ndef winter_clothing(A, B, C):\n    return A*(B+C)\n\nAnswer: Rachel had A*(B+C) pieces of winter clothing.",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winterClothingTotal(A,B,C):\n  return A*(B+C)\n\nprint(winterClothingTotal(3,4,4))\nAnswer: 24",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef winterClothingTotal(A,B,C):\n  return A * (B + C)\n\nwinterClothingTotal(2,3,4)\n\nThis will return 14, which means that Rachel had a total of 14 pieces of winter clothing.",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_clothes(A, B, C):\n  return A*(B + C)\n\ntotal = total_clothes(A, B, C)\nprint(total)",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winter_clothing(A,B,C):\n  return A*(B+C)\n\nprint(winter_clothing(A,B,C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing_total(a, b, c):\n  return a * (b + c)\n\nAnswer: winter_clothing_total(A, B, C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothes(A, B, C):\n  return A*(B+C)\n\nAnswer = winter_clothes(A, B, C)",
          "\nAnswer = (A x 2) + (B + C)"
        ],
        [
          "\n\ndef findTotalPieces(A, B, C):\n  return (A * (B + C))\n\nprint(findTotalPieces(3, 5, 7)) # will print 26",
          "\nAnswer = A + (B x 2) + (C x 2)"
        ],
        [
          "\n\ndef WinterClothes(A, B, C):\n  return A*(B+C)\n  \nAnswer: Rachel had A*(B+C) pieces of winter clothing.",
          "\nAnswer = A + (B x 2) + (C x 2)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n    return A*(B+C)\n\nprint(f\"Rachel has {winter_clothing(A,B,C)} pieces of winter clothing.\")",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C):\n  return A * (B + C)\n\n#Example\nprint(winterClothing(2, 3, 5))\n# Returns 16",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C):\n  return (A*(B + C))\n\nprint(winterClothing(3,2,4))\n\nAnswer: 24",
          "\nAnswer = A + (B x C)"
        ]
      ]
    },
    "source": {
      "question": " Rachel was unboxing some of her old winter clothes. She found 7 boxes of clothing and inside each box there were 3 scarves and 4 mittens. How many pieces of winter clothing did Rachel have total? ",
      "final_answer": 49.0,
      "index": 210
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 16,
      "duration": 15.56311821937561,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef calculate_birds(A, B, C):\n    return A * (B + C)\n\n# You can call the function like this:\ntotal_birds = calculate_birds(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_birds(A, B, C):\n    return A * (B + C)\n\ntotal_birds(3, 4, 5)  # 27",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBirds(A, B, C):\n  return A*(B+C)\n\n# Example:\ntotalBirds(2, 3, 4)\n# Returns 18",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef num_birds(A, B, C):\n  return A*(B+C)\n\nprint(num_birds(5, 2, 3))\n# Output: 35",
          " \nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculateBirds(A, B, C):\n  return A * (B + C)\n\nprint(calculateBirds(A, B, C))",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef count_birds(A, B, C):\n  return A * (B + C)\n\ncount_birds(3,4,5) # returns 27",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef bird_total(A,B,C):\n  return A*(B+C)\n\nprint(bird_total(2,2,3)) #Prints 10",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef pet_store_birds(A, B, C):\n  return A*(B+C)\n  \ntotal_birds = pet_store_birds(A, B, C)\nprint(total_birds)",
          " \n\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 9 bird cages. If each cage has 2 parrots and 2 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 36.0,
      "index": 211
    }
  },
  {
    "result": 80.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.034045934677124,
      "templates": [
        "Cody bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a Python function that returns the answer.",
        "Cody bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        80.0,
        80.0,
        80.0,
        80.0,
        80.0
      ],
      "completions": [
        [
          "\n\ndef total_candy(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef candy_total(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalCandy(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef candy_total(A, B, C):\n    return (A * C) + (B * C)",
          " \n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef candy(A,B,C):\n    return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy_count(a, b, c):\n  return a*c + b*c\n\n# To find the total number of candy Cody had\ncandy_count(A, B, C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef amount_of_candy(A, B, C):\n    return A*C + B*C\n\nprint(amount_of_candy(2, 3, 10))\n# Answer: 50",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_candy(A, B, C):\n  total = A * C + B * C\n  return total",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Cody bought 7 boxes of chocolate candy and 3 boxes of caramel candy. If each box has 8 pieces inside it, how much candy did he have total? ",
      "final_answer": 80.0,
      "index": 212
    }
  },
  {
    "result": 13.5,
    "meta": {
      "n_calls": 26,
      "duration": 22.753777027130127,
      "templates": [
        "At Billy's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a Python function that returns the answer.",
        "At Billy's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        13.5,
        13.5,
        13.5,
        17.25,
        13.5
      ],
      "completions": [
        [
          "\n\ndef bill_total(A, B, C):\n  return (A*C) + (B*(C/2))",
          "\n\nAnswer = A*C + B*(C - (C/2))"
        ],
        [
          "\n\ndef bill_calculator(A, B, C):\n  return (A * C) + (B * C * 0.75)",
          "\n\nAnswer = A * C + B * (C * 0.75)"
        ],
        [
          " \n\ndef bill (A, B, C):\n  return A * C + B * C * 0.5",
          "\n\nAnswer = A * C + B * 0.5 * C"
        ],
        [
          "\n\ndef billtotal(A,B,C):\n  return (A * C) + (B * (C/2))",
          "\nAnswer = A*C + B*C/2"
        ],
        [
          "\n\ndef billCalculator(A,B,C):\n  return A*C + B*C/2",
          "\n\nAnswer = A * C + B * (C / 2)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef restaurant_bill(A, B, C):\n  return A * C + B * C * 0.5",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef bill_for_meal(A,B,C):\n  return (A*C + B*(C*0.75))",
          " \nAnswer = A * C + B * (C/2)"
        ],
        [
          "\n\ndef billAmount(A, B, C):\n  return (A * C) + (B * (C * 0.75))",
          " \nAnswer = A * C + B * C/2"
        ],
        [
          " \n\ndef billTotal(A, B, C): \n  return (A*C + B*(C/2))\n\nprint(billTotal(5, 3, 15)) \n#prints 90",
          "\nAnswer = AC + BC/2"
        ],
        [
          "\ndef restaurant_bill (A, B, C):\n    total_cost = A * C + B * (C / 2)\n    return total_cost",
          "\n\nAnswer = A * C + B * (C/2)"
        ],
        [
          "\n\ndef calculate_bill(adults, children, mealCost):\n  return adults * mealCost + children * mealCost / 2",
          "\n\nAnswer = A * C + B * C/2"
        ],
        [
          "\n\ndef billTotal(A, B, C): \n    return A * C + B * C * 0.8 \n\nprint(billTotal(4, 3, 30)) \n\nAnswer: 138.0",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef restaurant_bill(A,B,C):\n  bill = A * C + B *(C/2)\n  return bill",
          "\nAnswer = A * C + B * (C/2)"
        ]
      ]
    },
    "source": {
      "question": " At Billy's Restaurant a group with 2 adults and 5 children came in to eat. If each meal cost 3 dollars, how much was the bill? ",
      "final_answer": 21.0,
      "index": 213
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.523449897766113,
      "templates": [
        "Paul was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Paul was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef cansCollected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalCans(A, B, C):\n    return A * C + B * C\n\nanswer = totalCans(10, 8, 15) \nprint(answer)  # output: 240",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected (A, B, C): \n  return (A * C) + (B * C)",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cansPickedUp(a, b, c):\n    return (a * c) + (b * c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_cans(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_cans_collected(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          " \n\ndef total_cans(A,B,C):\n  return A * C + B * C\n\ntotal_cans(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " Paul was collecting cans for recycling. On Saturday he filled 6 bags up and on Sunday he filled 3 more bags. If each bag had 8 cans in it, how many cans did he pick up total? ",
      "final_answer": 72.0,
      "index": 214
    }
  },
  {
    "result": 50.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.535634279251099,
      "templates": [
        "While playing a trivia game, Adam answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a Python function that returns the answer.",
        "While playing a trivia game, Adam answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        50.0,
        50.0,
        50.0,
        50.0,
        50.0
      ],
      "completions": [
        [
          "\n\ndef getScore(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n \treturn (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef calc_score(A, B, C):\n    return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_score(A, B, C):\n  return A*C + B*C",
          "\n\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef final_score(A,B,C):\n  return (A*C)+(B*C)",
          "\nAnswer = AC + BC"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef calc_score(a,b,c):\n  return (a*c) + (b*c)\n\nfinal_score = calc_score(A,B,C)",
          "\n\nAnswer = A * C + B * C"
        ]
      ]
    },
    "source": {
      "question": " While playing a trivia game, Adam answered 5 questions correct in the first half and 5 questions correct in the second half. If each question was worth 5 points, what was his final score? ",
      "final_answer": 50.0,
      "index": 215
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.845688104629517,
      "templates": [
        "Haley's favorite band was holding a concert where tickets were A dollars each. Haley bought B tickets for herself and her friends and C extra tickets in case anyone else wanted to go. How much did she spend?\nWrite a Python function that returns the answer.",
        "Haley's favorite band was holding a concert where tickets were A dollars each. Haley bought B tickets for herself and her friends and C extra tickets in case anyone else wanted to go. How much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          " \n\ndef ticketCalculator(A, B, C):\n    return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef concert_cost(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef ticket_cost(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          " Make A, B, and C parameters in the function.\n\ndef calculateTicketCost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef cost(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef price(a, b, c):\n  total = a * (b + c)\n  return total\n\nprice(A, B, C)",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Haley's favorite band was holding a concert where tickets were 4 dollars each. Haley bought 3 tickets for herself and her friends and 5 extra tickets in case anyone else wanted to go. How much did she spend? ",
      "final_answer": 32.0,
      "index": 216
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 22,
      "duration": 17.06727886199951,
      "templates": [
        "Luke was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a Python function that returns the answer.",
        "Luke was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef total_coins(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef coins_total(A,B,C):\n    return (A*C)+(B*C)\n\ncoins_total(5, 10, 10)\n# Answer: 150",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef coin_total(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef coins(A, B, C):\n  return (A*C + B*C)",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef coins_total(A, B, C):\n    return (A*C)+(B*C);",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = (A*25) + (B*10)"
        ],
        [
          "\n\ndef coins_total(quarters, dimes, coins):\n  return quarters * coins + dimes * coins\n\nprint(coins_total(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numCoins(A, B, C):\n  return (A * C) + (B * C)\n\nnumCoins(2, 3, 5)\n# returns 40 coins",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef calculate_coins(A, B, C):\n  return A*C + B*C\n  \nanswer = calculate_coins(3, 4, 10)\nprint (answer) # 120",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coins(a,b,c):\n  return (a*c)+(b*c)",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " Luke was putting his spare change into piles. He had 5 piles of quarters and 5 piles of dimes. If each pile had 3 coins in it, how many coins did he have total? ",
      "final_answer": 30.0,
      "index": 217
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 24,
      "duration": 17.349323987960815,
      "templates": [
        "Victor and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Victor bought B decks and his friend bought C decks?\nWrite a Python function that returns the answer.",
        "Victor and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Victor bought B decks and his friend bought C decks?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0,
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef trick_deck_cost(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef deck_spend (A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trickDecks(A, B, C):\n    return A * (B + C)",
          "\nAnswer = A*B + A*C"
        ],
        [
          "\n\ndef cost(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef trickDeckCost(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef trickDeckCost (A, B, C):\n  totalCost = A * (B + C)\n  return totalCost",
          "\nAnswer = A x (B + C)"
        ],
        [
          " \n\ndef trickDeck(a,b,c):\n    return (a * b) + (a * c)",
          "\nAnswer = A * (B+C)"
        ],
        [
          "\n\ndef spend(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef trick_deck_price(a,b,c):\n  return a * (b + c)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef trick_deck_cost(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef spend_for_decks(A, B, C):\n  total_spend = A * (B + C)\n  return total_spend",
          "\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef buy_decks(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Victor and his friend were buying trick decks from the magic shop for 8 dollars each. How much did they spend if Victor bought 6 decks and his friend bought 2 decks? ",
      "final_answer": 64.0,
      "index": 218
    }
  },
  {
    "result": 90.0,
    "meta": {
      "n_calls": 20,
      "duration": 13.374106168746948,
      "templates": [
        "Katie had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a Python function that returns the answer.",
        "Katie had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        90.0,
        90.0,
        90.0,
        90.0
      ],
      "completions": [
        [
          "\n\ndef homeworkProblems(A,B,C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return C * (A + B)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef homework_problems(A,B,C):\n  return A*C + B*C\n\nprint(homework_problems(A,B,C))",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_problems(A, B, C):\n  return A*C + B*C \n\nprint(total_problems(A, B, C))",
          "\n\nAnswer = A * B * C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * B * C"
        ],
        [
          "\n\ndef homework(A, B, C): \n  return A*C + B*C",
          "\nAnswer = AC + BC"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x B x C"
        ],
        [
          "\n\ndef total_problems(A,B,C):\n  return A*C + B*C",
          "\n\nAnswer = A * B * C"
        ],
        [
          "\n\ndef homework_total(A, B, C):\n    total = A * C + B * C\n    return total",
          "\nAnswer = A*C + B*C"
        ]
      ]
    },
    "source": {
      "question": " Katie had 7 pages of math homework and 3 pages of reading homework. If each page had 9 problems on it, how many problems did she have to complete total? ",
      "final_answer": 90.0,
      "index": 219
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 32,
      "duration": 20.678555965423584,
      "templates": [
        "Faye was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Faye was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef calculateScore(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef video_game_score(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef score(A, B, C): \n  return A * (B + C)",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef findScore(A, B, C):\n    return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef score (A, B, C):\nreturn A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculate_score(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score_calculation (a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score_game(a,b,c):\n  return (a*b + a*c)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef computeScore(A, B, C):\n    return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef getScore(A,B,C):\n    return A*(B+C)",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef findScore(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef get_score (A, B, C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef getScore(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Faye was playing a video game where she scores 7 points for each treasure she finds. If she found 2 treasures on the first level and 6 on the second, what would her score be? ",
      "final_answer": 56.0,
      "index": 220
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 24,
      "duration": 18.38993787765503,
      "templates": [
        "Gwen was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Gwen was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef totalBooks(A,B,C):\n  return A*B + A*C\n\nprint(totalBooks(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C):\n  return (B * A) + (C * A)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef num_books(A, B, C):\n  return A*(B + C)\n\nprint(num_books(7, 5, 3))\n# Result: 56",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          " \n\ndef myBookcase(A,B,C):\n  return A * B + A * C\n\nprint(myBookcase(7,4,2))\n# Output: 56",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef book_count(A,B,C):\n  return A * (B + C)\n\nprint(book_count(20, 3, 10))\n# Answer = 380",
          "\n\nAnswer = (A * B) + (A * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numBooks(B, C):\n    return B * 5 + C * 4  #assuming each shelf had 5 mystery books, and 4 picture books!",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef total_books(b, c):\n  return b * 8 + c * 4",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef book_case(A,B,C):\n  return A*(B+C)\n  \nprint(book_case(A,B,C))",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C): \n  return (B * 5) + (C * 10)\n\ntotalBooks(B, C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculate_total_books(b, c):\n  total_books = (b * 5) + (c * 3)\n  return total_books\n\nprint(calculate_total_books(b, c))",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef book_count (b,c):\n  return b * 5 + c * 3\n\nprint(book_count(B, C))",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef numBooks(B, C):\n  return (B * A + C * A)",
          "\n\nAnswer = AB + C"
        ]
      ]
    },
    "source": {
      "question": " Gwen was organizing her book case making sure each of the shelves had exactly 9 books on it. If she had 3 shelves of mystery books and 5 shelves of picture books, how many books did she have total? ",
      "final_answer": 72.0,
      "index": 221
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 50,
      "duration": 39.821999073028564,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0
      ],
      "completions": [
        [
          " \n\ndef total_lives(A, B, C):\n\treturn (A + B) * C",
          "\n\nAnswer = (A + B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C + B*C\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n    return A*C + B*C\n\ntotal_lives(A,B,C)",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A+B)*C\n\ntotal_lives(3, 4, 5) # Returns 60",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef gameLives(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives_total(a,b, c):\n    return a * c + b * c\n\nlives_total(A,B,C)",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A + B) * C\n\ntotal_lives(2, 5, 3) # returns 21",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A,B,C):\n    return (A + B) * C\n    \nlives_total(4,2,3) \n# Returns 24",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          " \n\ndef total_lives(A, B, C):\n  return (A + B) * C",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A + B) * C\n\n# Example\ntotal_lives(5, 3, 4)\n# returns 60",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(friends, players, lives):\n  return (friends + players) * lives",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A + B) * C\n\ntotalLives(3, 2, 5) # returns 35",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return A*C + B*C\n\ntotalLives(3, 2, 3)\n# Answer: 24",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n  \nlives_total(3, 5, 3)\n# returns 36",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef get_total_lives(friends, players, lives):\n  return friends*lives + players*lives",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_calc(A, B, C):\n    overall_lives = (A + B) * C\n    return overall_lives",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives(A, B, C):\n    return (A + B) * C\n\nprint(lives(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return A * C + B * C",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef findTotalLives(A, B, C):\n  totalLives = A * C + B * C\n  return totalLives\n\nprint(findTotalLives(5, 3, 3)) # prints 45",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A,B,C):\n  return (A + B) * C\n  \ntotalLives(4,5,3) # Output: 45",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef friends_game(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef num_lives(a, b, c):\n  return (a + b) * c\n\nprint(num_lives(a, b, c))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(num_friends, num_players, lives_per_player):\n  return (num_friends + num_players) * lives_per_player\n  \ntotal_lives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\nprint(total_lives(2, 3, 5))\n# Output: 35",
          "\nAnswer = A + B + C"
        ]
      ]
    },
    "source": {
      "question": " There were 2 friends playing a video game online when 2 more players joined the game. If each player had 6 lives, how many lives did they have total? ",
      "final_answer": 24.0,
      "index": 222
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 26,
      "duration": 21.09842824935913,
      "templates": [
        "Wendy bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a Python function that returns the answer.",
        "Wendy bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef minutes_needed(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_minutes(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef assembleFurniture(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef furniture_time(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef furniture_assembly_time(A, B, C):\n    return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef furnitureAssembly(a, b, c):\n  return a * c + b * c",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef minutesToComplete(A, B, C):\n  totalTime = A * C + B * C\n  return totalTime",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  time_total = A*C + B*C\n  return time_total",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef furnitureAssembly(A, B, C):\n return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef assemble_furniture(a, b, c):\n  return a * c + b * c\n\nprint(assemble_furniture(6, 3, 30))\n#180",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef furniture_time(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef purchasesTime(A,B,C): \n    totalTime = A*C + B*C \n    return totalTime\n\nprint(purchasesTime(A,B,C))",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef timeSpent(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Wendy bought 4 new chairs and 4 new tables for her house. If she spent 6 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ",
      "final_answer": 48.0,
      "index": 223
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 26,
      "duration": 22.20103693008423,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Zoe bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Zoe bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef flowerPurchase(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef april_sale(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flowers_cost(A, B, C): \n    return (A*B + A*C)\n\n#Example\n\nflowers_cost(5, 3, 6)\n# 45",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flower_sale(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C);"
        ],
        [
          "\n\ndef Aprils_Sale (A,B,C):\n    return (A * (B + C))\n\nprint (Aprils_Sale (5, 8, 9))\n# Output: 145",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef cost_of_flowers(A,B,C):\n  return A * (B + C)\n  \ncost_of_flowers(2,3,4) # answer is 20",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef flower_cost(A, B, C):\n  cost = (A * B) + (A * C)\n  return cost\n\nflower_cost(2, 3, 5)  # returns 16",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_sale(A, B, C):\n  cost = (A * B) + (A * C)\n  return cost",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef flower_sale(A,B,C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef flower_total(A,B,C):\n  total = (A*B + A*C)\n  return total\n\nprint(flower_total(2,3,4))\n\n# Output: 20",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef flower_price(A,B,C):\n    return A*(B+C)\nprint(flower_price(2,3,4)) # prints 20",
          " \nAnswer = A(B + C)"
        ],
        [
          "\n\ndef AprilsDiscountFlowers(a,b,c):\n    return a * (b + c)\n\nprint(AprilsDiscountFlowers(2,3,4))\n# Output: 20",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef flowers_price(a, b, c):\n  return (a*b + a*c)\n\nprint(flowers_price(A, B, C))",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 3 dollars. If Zoe bought 8 roses and 2 daisies, how much did she spend? ",
      "final_answer": 30.0,
      "index": 224
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 44,
      "duration": 37.595515966415405,
      "templates": [
        "Paige was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Paige have total?\nWrite a Python function that returns the answer.",
        "Paige was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Paige have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef calculate_items(A, B, C):\n  return A * (B +C)\n\n# Answer: Paige had a total of A * (B + C) pieces of winter clothing.",
          "\nAnswer = (A * (B + C))"
        ],
        [
          "\n\ndef winter_clothing(A, B, C): \n    return A*(B + C)\n\nAnswer = winter_clothing(A, B, C)",
          "\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winter_clothes(a, b, c):\n  return (a * (b + c))\n\nanswer = winter_clothes(A, B, C)",
          "\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef winter_clothes(A,B,C): \n  return (A*(B+C))\n\nAnswer: Paige had (A*(B+C)) pieces of winter clothing.",
          "\n\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A * (B + C)\n\nprint(winter_clothing(A, B, C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothes(a, b, c):\n  return (a * (b + c))\n\nanswer = winter_clothes(A, B, C)\nprint(answer)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(a,b,c):\n  return a*(b+c)\n\nAnswer:\nwinter_clothing(A,B,C)",
          "\nAnswer = A + (B x C)"
        ],
        [
          "\n\ndef winterClothes(a,b,c):\n  return a*b+a*c\n\nprint(winterClothes(A,B,C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C):\n  return A*(B+C)\n\nprint(winterClothing(A, B, C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return (A * (B + C))\n\nprint(winter_clothing(5, 3, 4))\n\nThis prints out 35 pieces of winter clothing.",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A * (B + C) \n\nprint(winter_clothing(A, B, C))",
          "\nAnswer = A x (B+C)"
        ],
        [
          "\n\ndef winter_clothes(a,b,c):\n  return a*b+a*c\n  \nanswer = winter_clothes(A,B,C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(a,b,c):\n  return (a * (b + c))\n\nAnswer: Paige had a total of (a * (b + c)) pieces of winter clothing.",
          "\nAnswer = (A * (B + C))"
        ],
        [
          "\n\ndef winter_clothing(A,B,C):\n    return A*(B+C)\n\nprint(winter_clothing(3,2,4))\n\nThe answer is 18.",
          "\n\nAnswer = (A x 2) + B + C"
        ],
        [
          "\n\ndef winter_clothing_count(A,B,C):\n    total = A*(B+C)\n    return total\n\nprint(winter_clothing_count(3,2,4))\n\nAnswer: 24",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winter_clothes(A, B, C):\n  return A*(B + C) \n\nAnswer: Paige had A*(B + C) pieces of winter clothing.",
          "\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef winter_clothing(A,B,C):\n    total_items = A * (B + C)\n    return total_items\n\nprint(winter_clothing(A,B,C))",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_winter_clothing(a, b, c):\n  total = a * (b + c)\n  return total\n\ntotal_winter_clothing(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef winter_clothing(a,b,c):\n  return a * (b + c)\n\nwinter_clothing(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothes(A,B,C):\n  return A*(B+C)\n\nAnswer = winter_clothes(A,B,C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A*(B+C)\n\nAnswer = winter_clothing(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A*2 + B + C\n\ntotal_pieces = winter_clothing(A, B, C)\nprint(total_pieces)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Paige was unboxing some of her old winter clothes. She found 6 boxes of clothing and inside each box there were 5 scarves and 5 mittens. How many pieces of winter clothing did Paige have total? ",
      "final_answer": 60.0,
      "index": 225
    }
  },
  {
    "result": 42.0,
    "meta": {
      "n_calls": 26,
      "duration": 18.33582615852356,
      "templates": [
        "Sam was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Sam was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        42.0,
        42.0,
        42.0,
        42.0
      ],
      "completions": [
        [
          "\n\ndef recycling_total(A, B, C):\n  return (A*C + B*C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef cansPickedUp(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A,B,C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef cansRecycled(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cans_collected(a, b, c):\n  return (a * c) + (b * c)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef collectCans(A, B, C):\n  totalCans = A * C + B * C\n  return totalCans",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef num_cans(A,B,C):\n    return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_cans(a, b, c):\n  return (a * c) + (b * c)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_cans(a, b, c): \n  return a * c + b * c",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_cans(A, B, C):\n  return A * C + B * C\n  \ntotal_cans(2, 3, 4)  # returns 20",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef cans_picked_up(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Sam was collecting cans for recycling. On Saturday he filled 4 bags up and on Sunday he filled 3 more bags. If each bag had 6 cans in it, how many cans did he pick up total? ",
      "final_answer": 42.0,
      "index": 226
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 24,
      "duration": 17.412468194961548,
      "templates": [
        "George was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did George make in those two days?\nWrite a Python function that returns the answer.",
        "George was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did George make in those two days?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef calculate_pay(A, B, C):\n  return (A * B) + (A * C)\n\nanswer = calculate_pay(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef money_made(A, B, C):\n  return A*B+A*C",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_wages(A,B,C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_pay(A, B, C):\n  return (A*B)+(A*C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculatePay(A,B,C):\n  return A*B + A*C \n\nanswer = calculatePay(A,B,C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calc_pay(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A\u00d7(B + C)"
        ],
        [
          "\n\ndef moneyMade(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef wage_calculator(a, b, c):\n  return a * b + a * c\n  \n# Answer:\nwage_calculator(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef compute_wages(a,b,c):\n  return a*b + a*c\n\n#example\ncompute_wages(10, 8, 5) #returns 170",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef money_made(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef moneyMade(A, B, C):\n  return A * B + A * C\n\nmoneyMade(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef GeorgeMoney(A,B,C):\n return A*B+A*C",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " George was working as a sacker at a grocery store where he made 5 dollars an hour. On Monday he worked 7 hours and on Tuesday he worked 2 hours. How much money did George make in those two days? ",
      "final_answer": 45.0,
      "index": 227
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.91172981262207,
      "templates": [
        "While playing a trivia game, Frank answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a Python function that returns the answer.",
        "While playing a trivia game, Frank answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0,
        15.0,
        15.0,
        15.0,
        15.0
      ],
      "completions": [
        [
          "\n\ndef finalScore(A,B,C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef final_score(A,B,C): \n    score = (A * C) + (B * C)\n    return score",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef FinalScore (A, B, C):\n      return (A * C) + (B * C)",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While playing a trivia game, Frank answered 3 questions correct in the first half and 2 questions correct in the second half. If each question was worth 3 points, what was his final score? ",
      "final_answer": 15.0,
      "index": 228
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 16,
      "duration": 10.992422103881836,
      "templates": [
        "Edward and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Edward bought B decks and his friend bought C decks?\nWrite a Python function that returns the answer.",
        "Edward and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Edward bought B decks and his friend bought C decks?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef trick_deck_cost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_spent(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef trickDeckPrices(A,B,C):\n  return A*(B + C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef calculatePrice(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef spend(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef trick_deck_cost(a, b, c):\n  return a*(b+c)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef total_cost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef magic_shop(a,b,c):\n  return a*(b+c)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Edward and his friend were buying trick decks from the magic shop for 9 dollars each. How much did they spend if Edward bought 4 decks and his friend bought 4 decks? ",
      "final_answer": 72.0,
      "index": 229
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 22,
      "duration": 15.113195896148682,
      "templates": [
        "Tom and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Tom bought B decks and his friend bought C decks?\nWrite a Python function that returns the answer.",
        "Tom and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Tom bought B decks and his friend bought C decks?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0,
        64.0,
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef magic_shop(A,B,C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef trick_decks(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef trick_deck_cost(A,B,C):\n  return A * (B + C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trick_deck_cost(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trick_deck_spent(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef buy_trick_decks(a, b, c):\n    return a*(b+c)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trick_decks_cost(a,b,c):\n  return a*(b+c)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef spend(A, B, C):\n    return A*B + A*C",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef trick_decks (A, B, C):\n  return (A*B + A*C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef spendCost(A, B, C):\n    return (A * B) + (A * C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_cost_of_decks(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Tom and his friend were buying trick decks from the magic shop for 8 dollars each. How much did they spend if Tom bought 3 decks and his friend bought 5 decks? ",
      "final_answer": 64.0,
      "index": 230
    }
  },
  {
    "result": 70.0,
    "meta": {
      "n_calls": 42,
      "duration": 36.49696707725525,
      "templates": [
        "While shopping for music online, Megan bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Megan buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Megan bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Megan buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        70.0
      ],
      "completions": [
        [
          " \n\ndef num_songs(A, B, C):\n  return A * C + B * C\n\nprint(num_songs(A, B, C))",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_songs(A, B, C):\n  return (A * C) + (B * C)\n  \ntotal_songs(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs_bought(A,B,C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A + B + C",
          "\n\nAnswer =A + B \u00d7 C"
        ],
        [
          "\n\ndef song_total(A, B, C):\n  return A*C + B*C\n  \ntotal_songs = song_total(A, B, C)",
          "\n\nAnswer = A + B + (C x (A + B))"
        ],
        [
          "\n\ndef calculate_songs(A, B, C) {\n  return A * C + B * C \n}\n\nprint(calculate_songs(A, B, C))",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\n  return A * C + B * C\n\nprint(totalSongs(A, B, C))",
          "\n\nAnswer =AC + BC"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A * C + B * C\n \nprint(num_songs(3, 4, 6))\n# Output: 42",
          "\nAnswer = A + B + (C \u00d7 (A + B))"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C\n\ntotal_songs(A, B, C)",
          "\nAnswer = AxBxC"
        ],
        [
          "\n\ndef music_purchase(A, B, C):\n  return (A + B) * C\n\n#Example\nprint(music_purchase(10, 15, 3))\n# Answer: 45",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef songs_bought(a,b,c):\n  return a * c + b * c\n\nprint(songs_bought(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numSongs(A, B, C): \n  return A*C + B*C\n\nnumSongs(A, B, C)",
          "\nAnswer = A + B + (C * A) + (C * B)"
        ],
        [
          "\n\ndef numSongs(a,b,c):\n  return a*c + b*c\n\nanswer = numSongs(A,B,C)",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef music_songs(A, B, C):\n  return A * C + B * C\n\nprint(music_songs(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A*C + B*C\n\ntotalSongs = numSongs(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\n  return A*C + B*C \n\ntotalSongs(A, B, C)",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef music_purchase(A, B, C):\n  return A*C + B*C\n\nprint(music_purchase(2, 4, 5))\n\nOutput: 30",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A*C + B*C\n\nprint(num_songs(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef number_of_songs(A, B, C):\n  return A * C + B * C\n\nprint(number_of_songs(5, 3, 12))\n\nAnswer: 72",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Megan bought 2 country albums and 8 pop albums. Each album came with a lyric sheet and had 7 songs. How many songs did Megan buy total? ",
      "final_answer": 70.0,
      "index": 231
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 22,
      "duration": 17.213906049728394,
      "templates": [
        "Victor was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Victor make in those two days?\nWrite a Python function that returns the answer.",
        "Victor was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Victor make in those two days?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef calculatePay(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef Victor_money(A,B,C):\n  return A*B + A*C\n\nanswer = Victor_money(A,B,C)",
          "\nAnswer = A*B + A*C"
        ],
        [
          " Let the function be named \"DollarsPerHour\" and accept three parameters A, B, and C, where A is the wage, B is the hours worked on Monday, and C is the hours worked on Tuesday.\n\ndef DollarsPerHour(A, B, C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef moneyMade(A, B, C):\n  return (A*B + A*C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n    return A*B + A*C\n\n#Call the function\nmoney_earned(8, 4, 6)\nAnswer: 112",
          "\n\nAnswer = (A * B) + (A * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef twoDaysPay (A, B, C): \n return A*(B+C)",
          "\nAnswer = (A \u00d7 B) + (A \u00d7 C)"
        ],
        [
          "\n\ndef TotalIncome(A, B, C):\n  return A * B + A * C\n\n#Usage\nprint(TotalIncome(8, 6, 4)) #returns 96",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef money_made(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef victors_pay(A,B,C):\n  total = A*B + A*C\n  return total",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef VictorEarnings(A, B, C):\n  return A*B + A*C",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calculate_pay(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Victor was working as a sacker at a grocery store where he made 6 dollars an hour. On Monday he worked 5 hours and on Tuesday he worked 5 hours. How much money did Victor make in those two days? ",
      "final_answer": 60.0,
      "index": 232
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 14,
      "duration": 12.100704908370972,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef birdStore(A, B, C):\n  return A * (B + C)\n\n# Call the function\nprint(birdStore(5, 2, 3))\n# Output: 25",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBirds(A, B, C):\n  return A*(B+C)\n\ntotalBirds(3, 5, 6)  # returns 33",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_birds(A, B, C):\n  return A*(B+C)\n\nprint(total_birds(5, 2, 3))\n# prints 40",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_birds(A,B,C):\n  return A*(B+C)\n\nprint(calculate_birds(A,B,C))",
          " \n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_birds(A,B,C):\n   return A*(B+C)\n\n#example \ntotal_birds(3,4,5) \n#returns 27",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\ndef totalBirds(A, B, C):\n  return A * (B + C)",
          "\nAnswer = (A x B) + (A x C)"
        ],
        [
          "\n\ndef count_birds(a, b, c):\n  return a * (b + c)\n  \nprint(count_birds(A, B, C))",
          "\nAnswer = A*(B+C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 6 bird cages. If each cage has 2 parrots and 7 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 54.0,
      "index": 233
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.660789012908936,
      "templates": [
        "Maria bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a Python function that returns the answer.",
        "Maria bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef furniture_time(A, B, C):\n    return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef time_to_assemble(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef time_taken(A, B, C):\n  return A * C + B * C\n\ntime_taken(3, 2, 10)\n# returns 60",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef furniture_assembly (A, B, C):\n    return A*C + B*C\n\nprint(furniture_assembly(2, 3 ,30))\n#120",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef furnitureTime(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = (A * C) + (B * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef assembleFurniture(a,b,c):\n  return a * c + b * c",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef assembleFurniture(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef furniture_time(A, B, C): \n  return (A*C + B*C) \n\nprint(furniture_time(5,3,20))\n\nAnswer: 200",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_time(A, B, C):\n  time = A * C + B * C \n  return time\n\ntotal_time(2, 4, 15) # 120",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Maria bought 2 new chairs and 2 new tables for her house. If she spent 8 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ",
      "final_answer": 32.0,
      "index": 234
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 40,
      "duration": 28.279059886932373,
      "templates": [
        "Olivia was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Olivia was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef game(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef gameScore(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef score(A, B, C):\n  return (A*B) + (A*C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef treasure_score(A, B, C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef treasureScore(A, B, C):\n  return A*B + A*C",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef score_treasure(A,B,C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef scoreCalculator(a, b, c):\n    return a*b + a*c\n\nprint(scoreCalculator(A, B, C))",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score_calculator(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A (B + C)"
        ],
        [
          "\n\ndef get_total_score(A, B, C):\n  total_score = A*(B+C)\n  return total_score\n\nprint(get_total_score(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          " \n\ndef score(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B+C)"
        ],
        [
          "\n\ndef gameScore(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*B + A*C\n  \nprint(score(A, B, C))",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score_treasure(A, B, C):\n    return A*(B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*B + A*C",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef scoreCalc(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef TreasureScore(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A(B+C)"
        ]
      ]
    },
    "source": {
      "question": " Olivia was playing a video game where she scores 8 points for each treasure she finds. If she found 2 treasures on the first level and 2 on the second, what would her score be? ",
      "final_answer": 32.0,
      "index": 235
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.95889401435852,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef waiterCustomers(A, B, C):\n  return A*(B+C)\n\nanswer = waiterCustomers(A,B,C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return (A * (B + C))\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_total_customers(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_customers(A,B,C):\n  return A*(B+C)\n\ntotal_customers(A,B,C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_total(A,B,C):\n  return A*(B+C)\n\ntotal_customers = waiter_total(A,B,C)\nprint(total_customers)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalCustomers(A, B, C):\n  return A*(B+C)\n\ntotalCustomers(A, B, C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n    return A*(B + C)\n\nprint(waiter_customers(2, 4, 3))\n# Output: 22",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiterTotal(A, B, C):\n  return A * (B + C)\n\nAnswer = waiterTotal(A, B, C)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 6 tables he was waiting on, with 3 women and 5 men at each table. How many customers total did the waiter have? ",
      "final_answer": 48.0,
      "index": 236
    }
  },
  {
    "result": 70.0,
    "meta": {
      "n_calls": 32,
      "duration": 28.615602254867554,
      "templates": [
        "Faye was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a Python function that returns the answer.",
        "Faye was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        70.0,
        70.0,
        70.0
      ],
      "completions": [
        [
          "\n\ndef Earnings(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C): \n return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef necklace_sale(A, B, C):\n  return A * C + B * C\n\nanswer = necklace_sale(A, B, C)",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_earnings(a, b, c):\n  return a * c + b * c",
          "\n\nA*C + B*C = Answer \nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef necklace_earnings(a, b, c):\n    return a*c + b*c\n\nanswer = necklace_earnings(A, B, C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef sold_necklaces(a,b,c):\n  return (a*c)+(b*c)",
          "\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef moneyEarned(a,b,c):\n  return (a * c) + (b * c) \n# the function takes 3 parameters a,b, and c and returns the total money earned. \n# a is the number of bead necklaces sold, b is the number of gem stone necklaces sold, and c is the cost of each necklace.",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return A*C + B*C\n  \nmoney_earned(25, 10, 5) # returns 175",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_money(a,b,c):\n  return (a*c)+(b*c)",
          "\nAnswer = A * C  + B * C"
        ],
        [
          "\n\ndef necklace_sales(a, b, c):\n  return a*c + b*c\n\nprint(necklace_sales(A, B, C))",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculate_earnings(a, b, c):\n  return (a*c) + (b*c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculate_earnings(a,b,c):\n    return (a * c) + (b * c)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalMoneyEarned(a, b, c):\n  return a * c + b * c",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef necklaceEarnings(a,b,c):\n  return (a*c) + (b*c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          " \n\ndef earn(a, b, c):\n  return (a*c)+(b*c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          " \n\ndef calculateEarning(a, b, c):\n  total = (a * c) + (b * c)\n  return total\n  \ncalculateEarning(A, B, C) # where A, B and C are the number of bead and gem stone necklaces and the price for each necklace respectively",
          "\n\nAnswer = A*C + B*C"
        ]
      ]
    },
    "source": {
      "question": " Faye was selling her necklaces at a garage sale. She sold 3 bead necklaces and 7 gem stone necklaces. If each necklace cost 7 dollars, how much money did she earn? ",
      "final_answer": 70.0,
      "index": 237
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.250115156173706,
      "templates": [
        "At the town carnival Oliver rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a Python function that returns the answer.",
        "At the town carnival Oliver rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef carnival_tickets(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_tickets(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef tickets_used(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef carnival_tickets(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef carnival_rides(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef tickets_used(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef ticket_total(a, b, c):\n  return a*c + b*c",
          "\n\nAnswer = (A x C) + (B x C)"
        ],
        [
          "\n\ndef carnival_tickets(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef ticketCalc(A, B, C):\n  totalTickets = A * C + B * C\n  return totalTickets",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef ticket_cost(A, B, C):\n  tickets_used = A * C + B * C\n  return tickets_used\n\nprint(ticket_cost(A, B, C))",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " At the town carnival Oliver rode the ferris wheel 5 times and the bumper cars 4 times. If each ride cost 7 tickets, how many tickets did he use? ",
      "final_answer": 63.0,
      "index": 238
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 44,
      "duration": 38.44441890716553,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0
      ],
      "completions": [
        [
          "\n\ndef lives(A, B, C):\n  return (A + B) * C\n\nprint(lives(A, B, C))",
          "\nAnswer = (A+B)*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_lives(a, b, c):\n  return (a + b) * c\n\nprint(total_lives(A, B, C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C + B*C\n  \ntotalLives(A, B, C)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n \ntotal_lives(5, 3, 2) # returns 20",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef get_total_lives(friends, players, lives):\n  return friends * lives + players * lives",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A + B) * C\n\ntotalLives(5, 3, 7)  # returns 70",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C\n\nprint(total_lives(4, 5, 3))\n# Answer: 45",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef totalLives(A,B,C):\n    return A*C + B*C\n    \ntotalLives(5,3,3) # returns: 24",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A+B)*C\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  total_lives = (A + B) * C\n  return total_lives\n\nprint(total_lives(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\ntotal_lives(3, 4, 5)  # returns 55",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B)*C \n\nprint(total_lives(2, 3, 4))  # Output: 24",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A * C + B * C\n\ntotalLives(4, 3, 2) # returns 20",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A + B) * C\n\nprint(totalLives(A, B, C))",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return (A + B) * C\n\ntotal_lives(4, 2, 3) # returns 30",
          "\nAnswer = (A + B) x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return A * C + B * C\n\ntotal_lives = lives_total(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return (a + b) * c\n\nprint(total_lives(A, B, C))",
          "\n\nAnswer = A + B*C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n   return a * c + b * c\n\ntotal_lives(a, b, c)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A + B) * C",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n  \n  \nprint(total_lives(8, 4, 3))  # Output: 72",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\ntotal_lives(3, 5, 2) # Answer: 20",
          "\nAnswer = A + B * C"
        ]
      ]
    },
    "source": {
      "question": " There were 5 friends playing a video game online when 2 more players joined the game. If each player had 8 lives, how many lives did they have total? ",
      "final_answer": 56.0,
      "index": 239
    }
  },
  {
    "result": 21.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.367419004440308,
      "templates": [
        "Katie was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a Python function that returns the answer.",
        "Katie was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        21.0,
        21.0,
        21.0,
        21.0,
        21.0
      ],
      "completions": [
        [
          "\n\ndef money_earned(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef earnings(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = (A*C) + (B*C)"
        ],
        [
          "\n\ndef total_earnings(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef garageSaleProfit(A, B, C):\n  return (A*C)+(B*C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef sales(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_earnings(a, b, c):\n  return (a*c) + (b*c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef profit(a, b, c): \n  return (a * c) + (b * c)",
          "\n\nAnswer = A * C + B * C"
        ]
      ]
    },
    "source": {
      "question": " Katie was selling her necklaces at a garage sale. She sold 4 bead necklaces and 3 gem stone necklaces. If each necklace cost 3 dollars, how much money did she earn? ",
      "final_answer": 21.0,
      "index": 240
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.565160036087036,
      "templates": [
        "Edward was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Edward make in those two days?\nWrite a Python function that returns the answer.",
        "Edward was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Edward make in those two days?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef edward_earnings(A, B, C):\n    return A * B + A * C\n\nprint(edward_earnings(15, 5, 8))\n\n#OUTPUT = 195",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef edward_pay(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_salary(A,B,C):\n    return A*B + A*C\n\nanswer = calculate_salary(A,B,C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef moneyMade(A, B, C):\n  return (A * B) + (A * C)",
          " \n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_money_made(A, B, C):\n  return A * B + A * C\n\nanswer = calculate_money_made(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateMoneyEarned(A, B, C):\n  return A * B + A * C\n\nanswer = calculateMoneyEarned(A, B, C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef edward_mon_tue(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_earnings(a,b,c):\n  return a*b + a*c\n\nprint(calculate_earnings(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef edward_pay(a,b,c):\n    return (a*b + a*c)\n\nprint(edward_pay(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef twoDayMoney(A, B, C): \n  return (A * B) + (A * C)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Edward was working as a sacker at a grocery store where he made 6 dollars an hour. On Monday he worked 3 hours and on Tuesday he worked 5 hours. How much money did Edward make in those two days? ",
      "final_answer": 48.0,
      "index": 241
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 18,
      "duration": 14.238811016082764,
      "templates": [
        "While playing a trivia game, Mike answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a Python function that returns the answer.",
        "While playing a trivia game, Mike answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          "\n\ndef final_score(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef score (A,B,C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C): \n  return (A*C) + (B*C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef final_score(A,B,C):\n    return (A*C)+(B*C)",
          " \n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef finalScore(A, B, C): \n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          " \n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = (A \u00d7 C) + (B \u00d7 C)"
        ],
        [
          "\n\ndef final_score(a, b, c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = (A*C) + (B*C)"
        ]
      ]
    },
    "source": {
      "question": " While playing a trivia game, Mike answered 3 questions correct in the first half and 5 questions correct in the second half. If each question was worth 3 points, what was his final score? ",
      "final_answer": 24.0,
      "index": 242
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 28,
      "duration": 20.81278109550476,
      "templates": [
        "Amy was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Amy was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef calculateScore(A, B, C):\n    return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_score(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A*B + A*C"
        ],
        [
          " \n\ndef calculate_score(A, B, C): \n  return (A * B) + (A * C)",
          "\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef scoreCalculator(a, b, c):\n  return a*(b+c)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef get_score(A, B, C):\n    score = A * (B + C)\n    return score",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef getScore(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef compute_score(A, B, C):\n  score = A*(B+C)\n  return score",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef get_score(a, b, c):\n  return (a*b) + (a*c)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculateScore(a,b,c):\n  return a*(b+c)\n  \nscore = calculateScore(A,B,C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef compute_score(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef gameScore(A, B, C):\n  return A * ( B + C )",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef findScore(A, B, C):\n  return A * (B+C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef gamePoints(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Amy was playing a video game where she scores 4 points for each treasure she finds. If she found 6 treasures on the first level and 2 on the second, what would her score be? ",
      "final_answer": 32.0,
      "index": 243
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 26,
      "duration": 24.73876929283142,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef waiter_customers(A,B,C):\n  return A * (B + C)\n\n# example\nwaiter_customers(3, 4, 5)  # returns 27",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\n\ndef customers_waiter_had(A, B, C):\n  return A * (B + C)\n  \nprint(customers_waiter_had(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A * (B + C)\n\nprint(waiter_customers(3, 5, 7))\n# Output: 48",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\nprint(total_customers(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef totalNumberOfCustomers(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiter_customer_total(A, B, C):\n  return A*(B+C)\n  \nprint(waiter_customer_total(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef customer_count(A, B, C):\n  return A*(B+C)\n\ncustomer_count(A, B, C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiterTotalCustomers(A,B,C):\n  return A*(B+C)\n\nprint(waiterTotalCustomers(3, 2, 4)) #Output: 24",
          " \nAnswer = AB + CB"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A*(B + C)\n\nwaiter_customers(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A*(B+C)\n\nprint(waiter_customers(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiterCustomers(A, B, C):\n    return A * (B + C)\n\nprint(waiterCustomers(4, 6, 3))\n# Output: 36",
          "\nAnswer = A x (B+C)"
        ],
        [
          "\n\ndef waiter_customer_total(A, B, C):\n  return A * (B + C)\n\ncustomer_total = waiter_customer_total(A, B, C)\nprint(customer_total)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 9 tables he was waiting on, with 4 women and 3 men at each table. How many customers total did the waiter have? ",
      "final_answer": 63.0,
      "index": 244
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 26,
      "duration": 24.636934995651245,
      "templates": [
        "Chloe was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Chloe was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef numBooks(A,B,C):\n  return (A*B)+(A*C)\n\nprint(numBooks(4,5,6)) \nThis would return 80 books.",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B*A + C*A\n  \nresult = total_books(B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef books(A, B, C):\n  return A * (B + C)\n\ntotal_books = books(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef num_books(A,B,C):\n    return A*(B+C)\n\nprint(num_books(15,4,3))\n# prints 90",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef book_case(A,B,C):\n  return A*B + A*C\n\nprint(book_case(3,4,6))\n\nThis function returns 42 books.",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef bookNumber(A, B, C):\n  totalBooks = (A * B) + (A * C)\n  return totalBooks\n  \nprint(bookNumber(12, 3, 5)) # Answer is 84",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          " \n\ndef book_calculator(B,C):\n  total_number_of_books = B + C\n  return total_number_of_books\n\nprint(book_calculator(B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef number_of_books(B, C):\n  return B * 10 + C * 20\n\nprint(number_of_books(B,C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef num_books(B, C):\n  return B * 5 + C * 10\n  \nprint(num_books(B, C))",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return A*B + A*C\n\nprint(total_books(A, B, C))",
          " :\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef total_books(A, B, C):\n  return A * (B + C)\n\nprint(total_books(3, 4, 5))  # Returns 27",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculate_total_books(shelf_mystery, shelf_picture):\n  total_books = shelf_mystery * B + shelf_picture * C\n  return total_books\n\nprint(calculate_total_books(B,C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef numBooks(a,b,c):\n  return a*b+a*c\n\nprint(numBooks(5,10,8))\n# Result: 140 books",
          "\nAnswer = A*(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Chloe was organizing her book case making sure each of the shelves had exactly 6 books on it. If she had 5 shelves of mystery books and 4 shelves of picture books, how many books did she have total? ",
      "final_answer": 54.0,
      "index": 245
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 38,
      "duration": 31.517566919326782,
      "templates": [
        "While shopping for music online, Isabel bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Isabel buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Isabel bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Isabel buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef num_songs(A, B, C):\n    return A * C + B * C\n\nprint(\"Number of songs bought:\", num_songs(A, B, C))",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalSongsIsabelBought(A,B,C):\n  return A*C + B*C\ntotalSongsIsabelBought(A,B,C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef music_purchase(A, B, C):\n  return A * C + B * C\n\nanswer = music_purchase(A, B, C)",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalSongs(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numSongs(a,b,c):\n  return (a*c) + (b*c)\n\nprint(numSongs(A,B,C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A * C + B * C\n\nanswer = num_songs(A,B,C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef purchased_songs(A, B, C):\n  return A * C + B * C\n\nprint(purchased_songs(A, B, C))",
          "\n\nAnswer = (A x C) + (B x C)"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef music_calculator(a,b,c):\n    total_songs = a * c + b * c\n    return total_songs\n\nprint(music_calculator(A,B,C))",
          "\nAnswer = A + B + (C * A) + (C * B)"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A*C + B*C\n\nprint(numSongs(2, 4, 10))\n# Output: 60",
          "\n\nAnswer = (A x C) + (B x C)"
        ],
        [
          "\n\ndef totalSongsPurchased(A, B, C):\n  return A*C + B*C\n\ntotalSongsPurchased(A, B, C)",
          "\nAnswer = A + B + (C x A) + (C x B)"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return (A*C) + (B*C)",
          "\nAnswer = A + B + (C * (A + B))"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return (A * C) + (B * C)\n\nprint(total_songs(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          " \n\ndef num_songs(A, B, C):\n  return A + B + C",
          "\n\nAnswer = A + B + (C * A) + (C * B)"
        ],
        [
          "\n\ndef num_songs_bought(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs_bought(A,B,C):\n  return A*C + B*C\n\nsongs_bought(2,3,4) \n# Returns 24",
          "\nAnswer = A + B + C"
        ],
        [
          " \n\ndef num_songs (a, b, c):\n  return a * c + b * c\n\nprint(num_songs(A,B,C))",
          "\n\nAnswer = A + B x C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Isabel bought 6 country albums and 2 pop albums. Each album came with a lyric sheet and had 9 songs. How many songs did Isabel buy total? ",
      "final_answer": 72.0,
      "index": 246
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.828591108322144,
      "templates": [
        "At Oliver's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a Python function that returns the answer.",
        "At Oliver's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0,
        12.0,
        12.0,
        12.0,
        18.0
      ],
      "completions": [
        [
          "\ndef restaurant_bill(A, B, C):\n    return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef olivers_bill(A, B, C):\n  return (A * C) + (B * (C/2))",
          "\n\nAnswer = A*C + B*(C/2)"
        ],
        [
          "\n\ndef meal_cost(A, B, C):\n  return (A*C + B*C/2)",
          "\n\nAnswer = A*C + B*(C - (C / 2))"
        ],
        [
          "\n\ndef total_cost(A, B, C):\n  return (A * C) + (B * C /2)",
          "\nAnswer = A * C + B * (C/2)"
        ],
        [
          "\n\ndef billTotal(A, B, C):\n    return A*C + B*C/2",
          "\nAnswer = A*C + B*(C/2)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef restaurant_bill(A,B,C):\n  return A*C + B*C*0.75",
          "\n\nAnswer = A*C + B*(C/2)"
        ],
        [
          "\n\ndef bill(A,B,C):\n  return (A*C)+(B*C)",
          "\n\nAnswer = A x C + (B x C) / 2"
        ],
        [
          "\n\ndef getBill(a, b, c):\n  return (a * c) + (b * c/2)\n\nanswer = getBill(A, B, C)",
          "\nAnswer = A x C + B x C/2"
        ],
        [
          "\n\ndef bill(A, B, C):\n  total = (A * C) + (B * C/2)\n  return total",
          "\nAnswer = A \u00d7 C + B \u00d7 C/2"
        ]
      ]
    },
    "source": {
      "question": " At Oliver's Restaurant a group with 2 adults and 4 children came in to eat. If each meal cost 3 dollars, how much was the bill? ",
      "final_answer": 18.0,
      "index": 247
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.24715280532837,
      "templates": [
        "Tiffany had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a Python function that returns the answer.",
        "Tiffany had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef problems_total(A,B,C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n    return A*C + B*C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalProblems(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef homework_problems (A, B, C):\n  return A*C + B*C\n\nprint(homework_problems(A, B, C))",
          "\nAnswer = A*B*C"
        ],
        [
          "\n\ndef totalHomeworkProblems(A, B, C): \n  return A*C + B*C",
          "\n\nAnswer = A x B x C"
        ],
        [
          "\n\ndef homework(A,B,C):\n  return (A + B) * C\n\nprint(homework(A,B,C))",
          "\nAnswer = A x B x C"
        ],
        [
          " \n\ndef homework_problems(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * B * C"
        ],
        [
          "\n\ndef homework_problems(A, B, C): \n  return (A*C) + (B*C)",
          "\nAnswer = A * B * C"
        ],
        [
          "\n\ndef totalProblems(A,B,C):\n  return A * C + B * C",
          "\nAnswer = A * B * C"
        ]
      ]
    },
    "source": {
      "question": " Tiffany had 6 pages of math homework and 4 pages of reading homework. If each page had 3 problems on it, how many problems did she have to complete total? ",
      "final_answer": 30.0,
      "index": 248
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.789689064025879,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Robin bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Robin bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0,
        27.0,
        27.0,
        27.0
      ],
      "completions": [
        [
          "\n\ndef cost(A,B,C): \n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef costof_flowers(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_cost(A,B,C):\n  return A*(B+C)\n\nanswer = flower_cost(A,B,C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_cost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef april_sale(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 3 dollars. If Robin bought 5 roses and 4 daisies, how much did she spend? ",
      "final_answer": 27.0,
      "index": 249
    }
  },
  {
    "result": 80.0,
    "meta": {
      "n_calls": 32,
      "duration": 31.54046320915222,
      "templates": [
        "Zoe was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Zoe have total?\nWrite a Python function that returns the answer.",
        "Zoe was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Zoe have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        80.0,
        80.0,
        80.0,
        38.0
      ],
      "completions": [
        [
          "\n\ndef winter_clothing(A,B,C):\n  return A*B+C\n\n#example\nwinter_clothing(3,4,5)\nAnswer: 17",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_clothing(A, B, C):\n  return A * (B + C)\n\nprint(total_clothing(2, 3, 4))\n# Output: 22",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winter_clothing_total(A,B,C):\n  return A*(B+C)\n\nwinter_clothing_total(4,3,4)\nAnswer: 28",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef winter_clothes(A,B,C):\n  return A * (B + C)\n\nAnswer: Zoe had (A * (B + C)) pieces of winter clothing.",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winter_clothing(A, B, C):\n    total = (A * (B + C))\n    return total\n\nprint (winter_clothing(A, B, C))",
          "\n\nAnswer = (A * B) + C"
        ],
        [
          "\n\ndef winterClothing(A,B,C):\n  return A * (B + C)\n\nwinterClothing(A,B,C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_winter_clothing(A, B, C):\n  return A * (B + C)\n\ntotal_winter_clothing(A, B, C)",
          " \nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef count_winter_clothes(A, B, C):\n  return A * (B + C)\n\nanswer = count_winter_clothes(A, B, C)\nprint(\"Zoe has a total of \" + str(answer) + \" pieces of winter clothing.\")",
          "\n\nAnswer = (A x 2) + (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  total = A * (B + C)\n  return total\n\nprint(winter_clothing(2, 3, 4))\n# This would return 14, which is 2 boxes (A) times the sum of 3 scarves (B) and 4 mittens (C).",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef find_winter_clothing(A, B, C):\n  return A * (B + C)\n\ntotal_winter_clothing = find_winter_clothing(A, B, C)\nprint(total_winter_clothing)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\nA + (B + C) \n\ndef winter_clothing(A, B, C): \n  return A + (B + C) \n\nprint(winter_clothing(2, 3, 4)) \n\n# Output: 9",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef totalWinterClothes(A, B, C):\n    return A * (B + C)\n\n# Example\ntotalWinterClothes(2, 3, 5) # returns 16",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winter_clothing(a, b, c):\n  return a * (b + c)\n\nprint (winter_clothing(A, B, C))",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C):\n  return A*(B + C)\n\nAnswer: Zoe had A*(B + C) pieces of winter clothing.",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef winter_clothing_count(a, b, c):\n  total = a*(b+c)\n  return total\n\n# if Zoe has 3 boxes of clothing, 4 scarves, and 5 mittens:\nprint(winter_clothing_count(3, 4, 5)) #returns 27",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef winterClothing(A, B, C):\n  return A * (B + C)\n\nAns: winterClothing(A, B, C)",
          " \nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Zoe was unboxing some of her old winter clothes. She found 8 boxes of clothing and inside each box there were 4 scarves and 6 mittens. How many pieces of winter clothing did Zoe have total? ",
      "final_answer": 80.0,
      "index": 250
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 48,
      "duration": 42.252792835235596,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0
      ],
      "completions": [
        [
          "\n\ndef calc_lives(A, B, C):\n  return A*C + B*C\n  \ntotal_lives = calc_lives(A, B, C)",
          "\nAnswer = (A + B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalLives(A,B,C):\n  totalLives = A*C + B*C\n  return totalLives\n\ntotalLives(4,3,2)\n# This function returns 20 lives.",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C\n\nprint(totalLives(5, 3, 2))  # Output: 20",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\ntotal_lives(3, 5, 6) # returns 90",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(a,b,c):\n  return a*c + b*c\n\nprint(total_lives(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A+B)*C",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C+B*C",
          "\n\nAnswer = A + B * C"
        ],
        [
          " \n\ndef lives_total(A, B, C):\n  return A*C + B*C\n\nThe total number of lives is: lives_total(A, B, C)",
          "\nAnswer = AC + B"
        ],
        [
          "\n\ndef totalLives(a,b,c):\n  return (a + b) * c\n\ntotalLives(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A + B  x C"
        ],
        [
          "\n\ndef lifeTotal(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n  return A*C + B*C\n\nprint(totalLives(3, 5, 8))\n\nOutput: 80",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C + B*C\n  \ntotal_lives(2, 3, 5) \n  # returns 35",
          "\n\nAnswer = (A + B) x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C\n \ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef numLives(A, B, C):\n  return (A + B) * C\n \nnumLives(2, 3, 4) # returns 24",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return (A + B) * C\n\ntotal_lives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives(A,B,C):\n    return (A + B) * C\n\ntotalLives = lives(A,B,C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C\n\ntotalLives(3, 5, 2) # returns 20",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return A*C + B*C\n\ntotal_lives(A, B, C)",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef num_of_lives(a, b, c):\n  return (a + b) * c\n\nprint(num_of_lives(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(a,b,c):\n  return a*c + b*c\n\nprint(lives_total(5,4,3))\n#Answer: 27",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A + B) * C\n\nprint(lives_left(A, B, C))",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives():\n  a = int(input('How many friends were playing the game? ')) \n  b = int(input('How many more players joined the game? '))\n  c = int(input('How many lives did each player have? '))\n  return (a + b) * c\n\nprint('The total number of lives that the players had is', total_lives(), '.')",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n    return A*C + B*C\n\nlives_total(4, 2, 3) \nreturns 24",
          "\n\nAnswer = A + B x C"
        ]
      ]
    },
    "source": {
      "question": " There were 2 friends playing a video game online when 2 more players joined the game. If each player had 3 lives, how many lives did they have total? ",
      "final_answer": 12.0,
      "index": 251
    }
  },
  {
    "result": 28.0,
    "meta": {
      "n_calls": 28,
      "duration": 23.61173105239868,
      "templates": [
        "Adam bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a Python function that returns the answer.",
        "Adam bought A boxes of chocolate candy and B boxes of caramel candy. If each box has C pieces inside it, how much candy did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        28.0,
        28.0,
        28.0,
        28.0
      ],
      "completions": [
        [
          "\n\ndef candy_calculator(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_candy(A, B, C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_candy(A, B, C):\n  return A * C + B * C\n\nprint(total_candy(3, 2, 10))\n\n# Output: 50",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalCandy(A, B, C):\n  return A*C + B*C\n\ntotalCandy(2, 3, 10) \n# This would return 50 candy pieces.",
          "\n\nAnswer = (A * C) + (B * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalCandy(A, B, C):\n  candyTotal = A*C + B*C\n  return candyTotal",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n \ttotal_candy = A * C + B * C\n \treturn total_candy\n\n#Example\nanswer = candy_calculator(2, 4, 10)\nprint(answer) # Output - 80",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef candy_total(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_candy(a, b, c):\n    return a * c + b * c",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef candy_amount(A,B,C):\n    total = (A * C) + (B * C)\n    return total\n\ncandy_amount(2,3,10)  # returns 50",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calc_total_candy(a, b, c):\n    return a*c + b*c",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef candyCount(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalCandy(A, B, C): \n    return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_candy(A,B,C):\n    return A*C + B*C\n    \ntotal_candy(2,3,10)\n# Returns 60 Candy",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalCandy(A, B, C):\n  x = A * C\n  y = B * C\n  return x + y",
          "\n\nAnswer = A * C + B * C"
        ]
      ]
    },
    "source": {
      "question": " Adam bought 2 boxes of chocolate candy and 5 boxes of caramel candy. If each box has 4 pieces inside it, how much candy did he have total? ",
      "final_answer": 28.0,
      "index": 252
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 14,
      "duration": 12.639704704284668,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef total_birds(A, B, C):\n  return A * (B + C)\n\ntotal = total_birds(A, B, C)\nprint(\"The pet store has %d birds.\" % total)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef bird_total(A,B,C):\n    return A*(B + C)\n\nprint(bird_total(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef pet_store_birds(A,B,C):\n  return A * (B + C)\n\nprint(pet_store_birds(2,5,3)) # Answer: 16",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_birds(A, B, C):\n  return A * (B + C)\n\ntotal_birds(3, 8, 10) \nReturns 50",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef pet_store_birds(A, B, C):\n  return A*(B + C)\n\nprint(pet_store_birds(4, 3, 2))\n\nOutput: 20",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_birds(a, b, c):\n  return a * (b + c)\n\nprint(number_of_birds(A, B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef count_birds(A, B, C):\n  return A * (B + C)\n\ncount_birds(A,B,C)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 8 bird cages. If each cage has 2 parrots and 7 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 72.0,
      "index": 253
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.837828159332275,
      "templates": [
        "Lana's favorite band was holding a concert where tickets were A dollars each. Lana bought B tickets for herself and her friends and C extra tickets in case anyone else wanted to go. How much did she spend?\nWrite a Python function that returns the answer.",
        "Lana's favorite band was holding a concert where tickets were A dollars each. Lana bought B tickets for herself and her friends and C extra tickets in case anyone else wanted to go. How much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef concert_cost(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_spend(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef lana_spent(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef concertTickets(A,B,C):\n  return A*(B+C)",
          " \nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef lana_tickets(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef ticket_spend(A, B, C):\n  total = A * (B + C)\n  return total",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef ticket_expenditure(A, B, C):\n  cost = A * (B + C)\n  return cost",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Lana's favorite band was holding a concert where tickets were 6 dollars each. Lana bought 8 tickets for herself and her friends and 2 extra tickets in case anyone else wanted to go. How much did she spend? ",
      "final_answer": 60.0,
      "index": 254
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 26,
      "duration": 19.684038877487183,
      "templates": [
        "At Tom's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a Python function that returns the answer.",
        "At Tom's Restaurant a group with A adults and B children came in to eat. If each meal cost C dollars, how much was the bill?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef get_bill(A, B, C):\n  return (A*C + B*C/2)",
          "\n\nAnswer = A * C + B * (C / 2)"
        ],
        [
          "\n\ndef calculate_bill(A, B, C):\n  return A*C+B*(C/2)",
          "\nAnswer = A * C + B * (C * 0.5)"
        ],
        [
          "\n\ndef calculate_bill(A,B,C):\n  return (A*C) + (B*(C/2))",
          "\nAnswer = A * C + B * (C/2)"
        ],
        [
          "\n\ndef restaurant_bill(A, B, C):\n  return (A * C) + (B * C * 0.5)",
          "\n\nAnswer = A * C + B * (C/2)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef restaurant_bill(A, B, C):\n  return A * C + B * (C / 2)",
          "\n\nAnswer = AC + BC/2"
        ],
        [
          "\n\ndef restaurant_bill(A, B, C):\n  return (A * C) + (B * C * 0.75)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef restaurant_bill(A,B,C):\n  return (A*C + B*C)",
          "\nAnswer = A * C + B * (C /2)"
        ],
        [
          "\n\ndef bill(A, B, C):\n  total_bill = A*C + B*C*0.75\n  return total_bill",
          "\n\nAnswer = A * C + B * (C * 0.5)"
        ],
        [
          "\n\ndef amount_owed(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*(C/2)"
        ],
        [
          "\n\ndef bill(a, b, c):\n  return a * c + b * c/2\n\nbill(A, B, C)",
          "\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef total_bill(A, B, C):\n  return (A*C + B*C)",
          "\n\nAnswer = A*C + B*(C/2)"
        ],
        [
          "\n\ndef restaurant_bill(adults, children, cost):\n  return adults*cost + children*cost/2",
          "\n\nAnswer = A * C + B * (C/2)"
        ]
      ]
    },
    "source": {
      "question": " At Tom's Restaurant a group with 2 adults and 5 children came in to eat. If each meal cost 8 dollars, how much was the bill? ",
      "final_answer": 56.0,
      "index": 255
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 20,
      "duration": 17.448678970336914,
      "templates": [
        "Gwen was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Gwen was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef calc_books(B,C):\n  return B*A + C*A\n  \nanswer = calc_books(B,C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C):\n  return B*A + C*A\n\nprint(totalBooks(B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_books(A, B, C):\n  return A*B + A*C\n\n#Example \ncalculate_books(10, 4, 3) #returns 130",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef calculateBooks(A, B, C):\n  return A*B + A*C\n\nprint(calculateBooks(5, 3, 4)) # prints 45",
          "\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_books(B,C):\n  return B*A + C*A\n\nprint(\"Gwen has \" + str(number_of_books(B,C)) + \" books total.\")",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef bookCase(A,B,C):\n    return A*(B+C)\n\nprint(bookCase(10,5,2))\n# Output: 70",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef totalBooks(B, C):\n  return B * 8 + C * 3\n\ntotal_books = totalBooks(B, C)\nprint(total_books)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef book_count(B, C):\n  return B + C\n\ntotal_books = book_count(B, C)\nprint(\"Gwen has \", total_books, \" books total.\")",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef book_count(A, B, C):\n    return A * B + A * C\n\nprint(book_count(A, B, C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef gwens_books(B, C): \n    return B*20 + C*10\n\nprint(gwens_books(B, C))",
          "\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Gwen was organizing her book case making sure each of the shelves had exactly 4 books on it. If she had 5 shelves of mystery books and 3 shelves of picture books, how many books did she have total? ",
      "final_answer": 32.0,
      "index": 256
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 28,
      "duration": 23.388558864593506,
      "templates": [
        "While shopping for music online, Isabel bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Isabel buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Isabel bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Isabel buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\ndef total_songs(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A*C + B*C\n\ntotal_songs(2, 3, 5)\n\n# Answer: 25 songs",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A*C + B*C   # Multiply number of albums for each genre by number of songs per album to get the total number of songs.",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_songs(a,b,c):\n  return a*c + b*c\n\nprint(number_of_songs(A,B,C))",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculateSongs(A, B, C):\n  return A * C + B * C\n\n# example\ncalculateSongs(2, 5, 8)\n# returns 88",
          "\n\nAnswer = C x (A + B)"
        ],
        [
          " \n\ndef music_purchase(A, B, C):\n  return A * C + B * C\n  \nAnswer: Isabel bought C * (A + B) songs.",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef songs_bought (A, B, C):\n    return A * C + B * C\n\nprint(songs_bought(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef song_total(A, B, C): \n  return A*C + B*C\n\n#Call the function \ntotal = song_total(2, 3, 10)\nprint(total)\n\n#Output\n60",
          "\n\nAnswer = A + B + (C x (A+B))"
        ],
        [
          "\n\ndef isabel_purchase(A, B, C):\n  return A * C + B * C\n\nprint(isabel_purchase(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\n  return A * C + B * C\n\nanswer = totalSongs(A, B, C)",
          "\n\nAnswer = A + B + (C \u00d7 A) + (C \u00d7 B)"
        ],
        [
          "\n\ndef numSongs(a, b, c):\n  return a * c + b * c",
          "\nAnswer = A + B + (C * (A + B))"
        ],
        [
          "\n\ndef numSongs(A,B,C):\n  return A*C + B*C\n  \nprint(numSongs(A,B,C))",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Isabel bought 4 country albums and 5 pop albums. Each album came with a lyric sheet and had 8 songs. How many songs did Isabel buy total? ",
      "final_answer": 72.0,
      "index": 257
    }
  },
  {
    "result": 90.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.560844898223877,
      "templates": [
        "Megan was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a Python function that returns the answer.",
        "Megan was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        90.0,
        90.0,
        90.0,
        90.0,
        90.0
      ],
      "completions": [
        [
          "\n\ndef calculate(A, B, C):\n  return A * C + B * C \n\nanswer = calculate(A,B,C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef necklace_sale(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalSales(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_earnings(A,B,C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef earn_total(A,B,C):\n  return (A*C) + (B*C)",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef necklace_sales(a, b, c):\n    return (a * c) + (b * c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          " \n\ndef calculateEarnings(a, b, c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculate_earnings(a, b, c):\n    return (a*c) + (b*c)",
          "\nAnswer = (A * C) + (B * C)"
        ]
      ]
    },
    "source": {
      "question": " Megan was selling her necklaces at a garage sale. She sold 7 bead necklaces and 3 gem stone necklaces. If each necklace cost 9 dollars, how much money did she earn? ",
      "final_answer": 90.0,
      "index": 258
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 36,
      "duration": 26.84603786468506,
      "templates": [
        "Rachel was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Rachel was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef score(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef video_game_score(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef findScore(A,B,C): \n  return A*(B+C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef gameScore(A,B,C):\n  return (A*B) + (A*C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef treasureGame(A, B, C): \n    return A*(B + C)",
          "\n\nAnswer = A x (B+C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score (A,B,C):\n  return A*(B+C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef get_score(a, b, c):\n  return a*b + a*c\n\nprint(get_score(A, B, C))",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_score(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef findScore(A,B,C):\n  totalScore = (A * B) + (A * C)\n  return totalScore",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculateScore(A,B,C):\n  score = A*(B+C)\n  return score",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef getScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef treasureScore(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score_calculator(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef treasure_points(a, b, c):\n  return a*(b+c)",
          "\n\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Rachel was playing a video game where she scores 9 points for each treasure she finds. If she found 5 treasures on the first level and 2 on the second, what would her score be? ",
      "final_answer": 63.0,
      "index": 259
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.458368062973022,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Katie bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Katie bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef flower_cost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flowerCost(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flowerPurchase(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_spend(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_sale(A,B,C):\n    return A*(B+C)\n\nflower_sale(2,4,6)\nThe result would be A*(B+C)=2*(4+6)=20",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flowerCost(a, b, c):\n  cost = (a*b) + (a*c)\n  return cost\n\nflowerCost(3, 6, 4) # Answer: 42",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef aprilsDiscountFlowers(A,B,C):\n  return (A*B) + (A*C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef aprils_discount(a,b,c):\n  total = a*(b+c)\n  return total",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flower_sale(a,b,c):\n  return a * (b+c)\n\n#Usage\nflower_sale(3, 10, 8) #Answer: \n#returns the answer: 90",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef flower_sale(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 6 dollars. If Katie bought 5 roses and 5 daisies, how much did she spend? ",
      "final_answer": 60.0,
      "index": 260
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 26,
      "duration": 22.0952308177948,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          " \n\ndef total_birds(A, B, C):\n  return A * (B + C)\n\ntotal_birds(10, 4, 8)  # returns 120",
          "\n\nAnswer = (A * B) + (A * C)"
        ],
        [
          "\n\ndef num_birds(A, B, C):\n  return A * (B + C)\n\nprint(num_birds(5, 10, 15))  # Output: 100",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef bird_total(A, B, C):\n  return A * (B + C)\n\nanswer = bird_total(A, B, C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef calculateTotalBirds(A,B,C):\n  return A * (B + C)\n\ntotalBirds = calculateTotalBirds( A, B, C )",
          "\nAnswer =A*(B+C)"
        ],
        [
          "\n\ndef bird_total(A, B, C):\n  return A*(B+C)\n  \nprint(bird_total(4, 3, 5))\n\nThe pet store has 32 birds total.",
          "\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef birds_total(A, B, C):\n  return A * (B + C)\n\ntotal_birds = birds_total(A, B, C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef bird_count(a, b, c):\n  return a * (b + c)\n\nprint(bird_count(A, B, C))",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef birds(a, b, c):\n  return (a * b + a * c)\n\nbirds(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef count_birds(A, B, C):\n  return A * (B + C)\n\ncount_birds(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef bird_total(a,b,c):\n  return a*(b+c)\n\nbird_total(A,B,C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef pet_store_birds(A,B,C):\n    return A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculateTotalBirds(A, B, C): \n\n  return A * (B + C)\n  \nprint(calculateTotalBirds(A, B, C))",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_birds(a,b,c):\n  return a*(b+c)\n\ntotal_birds(A,B,C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 9 bird cages. If each cage has 2 parrots and 6 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 72.0,
      "index": 261
    }
  },
  {
    "result": 42.0,
    "meta": {
      "n_calls": 30,
      "duration": 25.086623907089233,
      "templates": [
        "Roger was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a Python function that returns the answer.",
        "Roger was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        42.0,
        42.0,
        42.0
      ],
      "completions": [
        [
          "\n\ndef roger_coins(A, B, C):\n    return (A*C) + (B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalCoins(A, B, C):\n  return (A*C + B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef num_coins(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef calculateTotalCoins(A, B, C):\n  total_coins = (A * C) + (B * C)\n  return total_coins\n\nprint(calculateTotalCoins(6, 8, 10))\n# Output: 180",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef count_coins(A, B, C):\n  return (A*C + B*C)\n\nanswer = count_coins(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numberOfCoins(A, B, C):\n  return (A*C) + (B*C)",
          "\nAnswer = (A * 25) + (B * 10)"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return A * C + B * C\n  \ncoins_total(4, 5, 9) # returns 117",
          "\nAnswer = (A x 25) + (B x 10) x C"
        ],
        [
          "\n\ndef coins_in_piles(A, B,C):\n    total_coins = A*C + B*C\n    return total_coins",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef get_total(a,b,c):\n  return a*c + b*c\n\nprint(get_total(A,B,C))",
          "\nAnswer = (A x 25) + (B x 10) = C"
        ],
        [
          "\n\ndef coin_calculator(A, B, C):\n    total_coins = (A * C) + (B * C)\n    return total_coins",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef numCoins(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coinsTotal(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coins(A, B, C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = (A * 25) + (B * 10) + (C * C)"
        ],
        [
          "\n\ndef num_coins(a, b, c):\n  return (a * c) + (b * c)\n\nprint(num_coins(3, 5, 7))\n#ans: 84",
          "\n\nAnswer = (A * 25) + (B * 10) + C"
        ],
        [
          "\n\ndef calculate_coins(a, b, c):\n  return (a * c) + (b * c)\n\nanswer = calculate_coins(A, B, C)",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Roger was putting his spare change into piles. He had 3 piles of quarters and 3 piles of dimes. If each pile had 7 coins in it, how many coins did he have total? ",
      "final_answer": 42.0,
      "index": 262
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.74836564064026,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef lives_total(A, B, C):\n    return (A + B) * C\n\nlives_total(4, 2, 3) \n# Returns 36",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return a * c + b * c",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef numberOfLives(A, B, C):\n  return (A + B) * C\n\nprint(numberOfLives(4, 5, 3))\n# Answer: 45",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A,B,C):\n  return (A + B)*C\n\nprint(lives_total(A,B,C))",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B)* C",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A+B)*C",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n    return A*C + B*C\n\ntotal_lives(A,B,C)",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n    return (A + B) * C\n\ntotalLives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives(A, B, C): \n  return (A + B) * C\n  \nlives(A, B, C)",
          "\n\nAnswer = A + B*C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n return (A + B) * C\n\nAnswer = lives_total(A, B, C)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return (a + b) * c\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C\n\nprint(totalLives(A, B, C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef game_lives_total(A,B,C):\n    return (A + B) * C\n\nprint(game_lives_total(5,3,2)) # returns 20",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return A * C + B * C\n\nlives_total(4, 5, 3)  # This will return 27",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nprint(lives_total(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A + B) * C\n\ntotalLives(5, 3, 4)  # returns 60",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives (A, B, C):\n  return A*C + B*C\n\ntotal_lives (3, 2, 3) \n# Returns 18",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef game_lives(A, B, C):\n  return (A+B)*C\n\nprint(game_lives(3, 5, 2))  #output: 20",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef num_lives(a, b, c):\n  return a * c + b * c\n\nprint(num_lives(10, 5, 3))\n# Output: 45",
          " \nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return a * c + b * c",
          "\nAnswer = (A + B) \u00d7 C"
        ],
        [
          "\n\ndef getTotalLives(A, B, C):\n  return (A + B) * C\n\ntotalLives = getTotalLives(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return A*C + B*C\n\nprint(totalLives(2, 3, 4))\n# Output: 28",
          "\nAnswer = A + B + C"
        ],
        [
          " \n\ndef game_lives(a, b, c):\n  return (a + b) * c\n  \nAnswer: game_lives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n  return (A + B) * C\n\ntotal_lives = calculate_lives(A, B, C)\nprint(total_lives)",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nprint(lives_total(3, 5, 4))\n# Output: 60",
          "\nAnswer = A + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " There were 2 friends playing a video game online when 2 more players joined the game. If each player had 8 lives, how many lives did they have total? ",
      "final_answer": 32.0,
      "index": 263
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 22,
      "duration": 17.727837324142456,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A,B,C):\n    return A * (B + C)\n\ntotal = total_customers(A,B,C)\nprint(total)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef customer_total(A, B, C):\n    return A*(B+C)\n\nprint(customer_total(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef number_customers(A, B, C):\n  return A * (B + C)\n\nprint(number_customers(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\nprint(total_customers(A, B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef total_customers(A, B, C):\n    return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef table_customers(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef number_of_customers(A, B, C): \n  return A * (B + C)\n\nnumber_of_customers(A, B, C)",
          "\n\nAnswer = A (B + C)"
        ],
        [
          "\n\ndef waiterTotal(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_number_of_customers(A, B, C): \n  return A * (B + C)\n\nprint(total_number_of_customers(3, 4, 5))  #Prints 42",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef number_of_customers(A, B, C):\n    return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_customers(a, b, c):\n    return a*b*c\ntotal_customers(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 7 tables he was waiting on, with 7 women and 2 men at each table. How many customers total did the waiter have? ",
      "final_answer": 63.0,
      "index": 264
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 18,
      "duration": 12.55846118927002,
      "templates": [
        "Tiffany was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Tiffany was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef TreasureGameScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n    return (A*B) + (A*C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef computeScore(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calcScore(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef findScore(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateScore(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculation(A, B, C):\n    score = A*(B+C)\n    return score",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n  totalScore = A * (B + C)\n  return totalScore",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef Score(A,B,C):\n  return (A*B)+(A*C)",
          "\n\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Tiffany was playing a video game where she scores 6 points for each treasure she finds. If she found 3 treasures on the first level and 5 on the second, what would her score be? ",
      "final_answer": 48.0,
      "index": 265
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 30,
      "duration": 24.07524013519287,
      "templates": [
        "While shopping for music online, Zoe bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Zoe buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Zoe bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Zoe buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          "\n\ndef song_total(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef music_shopping(A, B, C):\n  return A*C + B*C\n\nmusic_shopping(A, B, C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef songs_bought(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef num_songs_bought(A, B, C):\n  return (A*C)+(B*C)\n\nprint(num_songs_bought(A, B, C))",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef numSongs(A, B, C):\n  return A * C + B * C \n\nanswer = numSongs(3, 5, 9)\nprint(answer)\n\nThe answer is 54 songs.",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef songs_bought(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs(A, B, C):\n  return (A*C)+(B*C)\n\nsongs(A, B, C)",
          " \n\nAnswer = (A x C) + (B x C)"
        ],
        [
          "\n\ndef totalSongs(A,B,C):\n  return A*C + B*C\n\ntotalSongs(A,B,C)",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n    return A * C + B * C\n\ntotal_songs(5, 10, 8)\n\n# Answer: 80 songs",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C\n\ntotal_songs(A, B, C)",
          "\nAnswer = A + B + (C x A) + (C x B)"
        ],
        [
          "\n\ndef music_purchase(A, B, C):\n  return A*C + B*C\n  \nmusic_purchase(A, B, C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef buyMusic(A, B, C):\n  return A * C + B * C\n\nprint(buyMusic(2, 4, 10))\n# 80 songs",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef buyMusic(A,B,C):\n  return (A + B) * C\n\nprint(buyMusic(10,20,15))\n#Output: 450",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef music_calc(A, B, C):\n  total_songs = A * C + B * C\n  return total_songs\n\n# Call the function\nmusic_calc(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs_bought(A, B, C):\n  return A * C + B * C\n\nAnswer: Zoe bought (A*C) + (B*C) songs in total.",
          "\n\nAnswer = AC + BC"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Zoe bought 3 country albums and 5 pop albums. Each album came with a lyric sheet and had 3 songs. How many songs did Zoe buy total? ",
      "final_answer": 24.0,
      "index": 266
    }
  },
  {
    "result": 70.0,
    "meta": {
      "n_calls": 24,
      "duration": 22.143813133239746,
      "templates": [
        "Megan was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Megan was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        70.0,
        70.0,
        70.0,
        70.0,
        70.0
      ],
      "completions": [
        [
          "\n\ndef number_of_books(B, C):\n  return B * A + C * A\n\nnumber_of_books(B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBooks(A, B, C):\n  return (A*B + A*C)\n\nprint(totalBooks(5, 4, 3))\n# Output: 65",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef book_total(A, B, C):\n  return A*(B + C)\n\n\nprint(book_total(3, 4, 5))\n# prints 45",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_books(A,B,C):\n  return A*(B+C)\n\ntotal_books(8,10,5)\nThis would return 80 total books.",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalBooks(A,B,C):\n    return (A*B + A*C)\n\ntotalBooks(7,3,4)  # This will return 77 books.",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bookTally(a, b, c):\n    total = (a*b) + (a*c)\n    return total\n\nprint(bookTally(5, 5, 6))\n# This would return 55 books (5 books per shelf, 5 shelves of mystery books and 6 shelves of picture books).",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef num_books (A, B, C):\n  total_books = A * (B + C)\n  return total_books\n\nprint(num_books(10, 2, 3)) # prints 60",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B + C",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef book_count(A, B, C):\n  return A * (B + C)\n\nprint(book_count(7, 4, 3))\n# Answer: 49 books",
          " \nAnswer = A(B + C)"
        ],
        [
          " \n\ndef total_books(A, B, C): \n  return (A*B) + (A*C)\n\nprint(total_books(3, 4, 5)) \n# prints 60",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  total = B * A + C * A\n  return total\n\nprint total_books(B, C)",
          "\n\nAnswer = A\u2022(B+C)"
        ],
        [
          "\n\ndef total_books(b, c):\n  return (b * 12) + (c * 8)  \n\ntotal_books(b, c)",
          "\n\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Megan was organizing her book case making sure each of the shelves had exactly 7 books on it. If she had 8 shelves of mystery books and 2 shelves of picture books, how many books did she have total? ",
      "final_answer": 70.0,
      "index": 267
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.414638757705688,
      "templates": [
        "Isabel was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a Python function that returns the answer.",
        "Isabel was selling her necklaces at a garage sale. She sold A bead necklaces and B gem stone necklaces. If each necklace cost C dollars, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef totalSales(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef garageSale(A, B, C):\n    return (A*C) + (B*C)",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef total_earnings(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef necklace_sales(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef sale_earnings(A, B, C):\n  return A*C + B*C \n\n# A = number of bead necklaces \n# B = number of gem stone necklaces \n# C = cost of each necklace \n\n#Example \nsale_earnings(3, 4, 10) \n# Output : 70",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef moneyEarned(A,B,C):\n    return (A*C) + (B*C)",
          "\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef money_earned(a, b, c):\n  return a*c + b*c\n \nmoney_earned(A, B, C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalEarnings(A, B, C): \n    return (A * C) + (B * C)",
          "\n\nAnswer = AC + BC"
        ]
      ]
    },
    "source": {
      "question": " Isabel was selling her necklaces at a garage sale. She sold 3 bead necklaces and 3 gem stone necklaces. If each necklace cost 6 dollars, how much money did she earn? ",
      "final_answer": 36.0,
      "index": 268
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 24,
      "duration": 18.39280605316162,
      "templates": [
        "Frank was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Frank was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef recycling_cans(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A,B,C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef num_total_cans(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef can_collection(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_of_cans(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef total_cans_picked(a, b, c):\n  total_cans = a * c + b * c\n  return total_cans\n\nprint(total_cans_picked(A, B, C))",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalCans(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef recycle_cans(a, b, c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Frank was collecting cans for recycling. On Saturday he filled 5 bags up and on Sunday he filled 3 more bags. If each bag had 5 cans in it, how many cans did he pick up total? ",
      "final_answer": 40.0,
      "index": 269
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 18,
      "duration": 14.483842849731445,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Vanessa bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Vanessa bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef flowerSale(A,B,C):\n  return (A*B) + (A*C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flower_pricing(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flower_purchase(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_sale(A, B, C):\n    return A*(B + C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef flower_spend(A, B, C):\n  return A*B + A*C\n\n# If April's discount flowers was selling each flower for $3, and Vanessa bought 2 roses and 4 daisies, she spent: \nflower_spend(3, 2, 4) # Return: 18",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flower_sale(a, b, c): \n  total_cost = a * (b + c)\n  return total_cost\n\n# To find out how much Vanessa spent on her flowers, replace the variables with the appropriate values. \n# For example:\n\nflower_sale(2, 4, 6)\n\n# Output: 28",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flowerCost(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef flower_shopping(A, B, C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef april_discount_flowers(A, B, C):  \n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 8 dollars. If Vanessa bought 3 roses and 3 daisies, how much did she spend? ",
      "final_answer": 48.0,
      "index": 270
    }
  },
  {
    "result": 80.0,
    "meta": {
      "n_calls": 22,
      "duration": 16.550685167312622,
      "templates": [
        "Will was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Will make in those two days?\nWrite a Python function that returns the answer.",
        "Will was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Will make in those two days?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        80.0,
        80.0,
        80.0,
        80.0,
        80.0
      ],
      "completions": [
        [
          " \n\ndef will_pay(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_pay(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A*B + A*C"
        ],
        [
          "\n\ndef money_made(A, B, C):\n  return A*B + A*C",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculateTotal(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef MoneyMade(A,B,C):\n  return A*B + A*C",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_wage(a, b, c):\n  return a * (b + c)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_pay(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_wage(dollars, hours_monday, hours_tuesday):\n    return dollars * (hours_monday + hours_tuesday)\n\ncalculate_wage(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef salary(A,B,C):\n  return A*(B+C)\n\nprint(salary(A,B,C))",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef money_earned(a, b, c):\n    return a*b + a*c\n\nmoney_earned(A, B, C)",
          "\n\nAnswer = A*B + A*C"
        ],
        [
          "\n\ndef will_earnings(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Will was working as a sacker at a grocery store where he made 8 dollars an hour. On Monday he worked 8 hours and on Tuesday he worked 2 hours. How much money did Will make in those two days? ",
      "final_answer": 80.0,
      "index": 271
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 24,
      "duration": 20.71925926208496,
      "templates": [
        "Rachel bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a Python function that returns the answer.",
        "Rachel bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef minutes_spent(A, B, C):\n  return A * C + B * C\n\nprint(minutes_spent(3, 5, 10))\n# This will output 80 minutes",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef furniture_time(A,B,C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef minutes_to_assemble(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef assembly_time(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef furniture_time(A, B, C):\n   return A * C + B * C",
          " and followed by the result\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef furnitureTime (A, B, C): \n  totalMin = A * C + B * C\n  return totalMin",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef assemblyTime(a, b, c): \n  return (a + b) * c",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef furniture_time(a,b,c):\n  total_time = (a * c) + (b * c)\n  return total_time\n\nprint(furniture_time(2,3,30))\n\noutput: 180",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef furniture_assembly(chairs, tables, time):\n    return chairs * time + tables * time\n\nanswer = furniture_assembly(A, B, C)",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef furniture_time(A, B, C): \n  time = (A + B) * C\n  return time",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_time(A, B, C):\n    total_time = A * C + B * C\n    return total_time",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef furniture_assembly(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Rachel bought 7 new chairs and 3 new tables for her house. If she spent 4 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ",
      "final_answer": 40.0,
      "index": 272
    }
  },
  {
    "result": 80.0,
    "meta": {
      "n_calls": 22,
      "duration": 15.458953857421875,
      "templates": [
        "While playing a trivia game, Adam answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a Python function that returns the answer.",
        "While playing a trivia game, Adam answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        80.0,
        80.0,
        80.0,
        80.0,
        80.0
      ],
      "completions": [
        [
          "\n\ndef finalScore(A, B, C):\n  return (A + B) * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A,B,C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A,B,C):\n  return (A*C + B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef calculate_score(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = (A*C)+(B*C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = AC + BC"
        ],
        [
          "\n\ndef finalScore(A,B,C):\n  return (A*C + B*C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef calculateScore(a,b,c):\n  score = (a * c) + (b * c)\n  return score",
          "\nAnswer = A*C + B*C"
        ]
      ]
    },
    "source": {
      "question": " While playing a trivia game, Adam answered 8 questions correct in the first half and 2 questions correct in the second half. If each question was worth 8 points, what was his final score? ",
      "final_answer": 80.0,
      "index": 273
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 26,
      "duration": 24.2466299533844,
      "templates": [
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a Python function that returns the answer.",
        "A pet store has A bird cages. If each cage has B parrots and C parakeets in it, how many birds does the pet store have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef count_birds(A, B, C): \n  return (A * (B+C))\n\ncount_birds(4, 2, 3) \n#returns 22",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef num_birds(A,B,C):\n  return A*(B+C)\n\nprint(num_birds(4,3,5))\n#Prints answer of 32",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef num_birds(A,B,C): \n  return (A * (B + C)) \n  \nprint(num_birds(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef numOfBirds(A, B, C):\n  return A*(B + C)\n\nprint(numOfBirds(3, 4, 5))\n# output: 27",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_birds(a, b, c):\n  return (a * (b + c))\n\ntotal_birds = calculate_birds(A, B, C)\nprint(\"The pet store has a total of {} birds.\".format(total_birds))",
          "\n\nAnswer = (A \u00d7 B) + (A \u00d7 C)"
        ],
        [
          "\n\ndef count_birds(a,b,c): \n  return a*(b+c) \n\nprint(count_birds(A, B, C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef number_of_birds(A, B, C):\n  return A*(B+C)\n\n# Example\n\nprint(number_of_birds(3, 5, 6)) # Output: 33",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_num_birds(A, B, C):\n  return A*(B+C)\n\ntotal_num_birds(10, 5, 2)  # This will return 70.",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_birds(a, b, c):\n   return (a * b) + (a * c)\n \ntotal_birds(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef num_birds(a,b,c):\n    return a * (b + c)\n\nprint(num_birds(3,4,6))\n# Output: 30",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_birds(A, B, C): \n  return A * (B + C)",
          "\nAnswer = AB + BC"
        ],
        [
          "\n\ndef total_birds(A,B,C): \n  return A*(B+C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef count_birds(A, B, C): \n  return A * (B + C)\n\ntotal_birds = count_birds(A, B, C)",
          "\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " A pet store has 4 bird cages. If each cage has 8 parrots and 2 parakeets in it, how many birds does the pet store have total? ",
      "final_answer": 40.0,
      "index": 274
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 20,
      "duration": 14.626445055007935,
      "templates": [
        "Kaleb was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Kaleb was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef total_cans(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans(A,B,C):\n    return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef total_cans(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef num_cans(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef total_cans(A,B,C):\n    return A*C + B*C\n\ntotal_cans(A,B,C)",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef kaleb_cans(A,B,C): \n  return (A * C) + (B * C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_cans(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef cans_collected(a, b, c):\n  return a*c + b*c",
          " \nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb was collecting cans for recycling. On Saturday he filled 5 bags up and on Sunday he filled 5 more bags. If each bag had 4 cans in it, how many cans did he pick up total? ",
      "final_answer": 40.0,
      "index": 275
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 34,
      "duration": 28.052930116653442,
      "templates": [
        "Bianca was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Bianca was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          " \n\ndef num_of_books(A, B, C):\n  return (A * B) + (A * C)\nprint(num_of_books(A, B, C))",
          "\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef totalBooks(A, B, C):\n  return A * (B + C)\n\ntotalBooks(5, 3, 2)\n\n# Answer: 35",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef totalBooks(A,B,C):\n  return A * B + A * C \n\n# Then call the function\ntotalBooks(A,B,C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalBooks(A, B, C):\n    return A*(B+C)\n\nprint(totalBooks(5, 4, 3)) # Output: 35",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B * A + C * A\n\ntotal_books(B, C)",
          "\n\nAnswer = A\u00d7(B + C)"
        ],
        [
          "\n\ndef num_books(b, c):\n  return b * 12 + c * 8\n\nanswer = num_books(B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef book_case_calculator (B,C):\n  return B * 8 + C * 8",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B * 5 + C * 10\n\ntotal = total_books(B, C)\nprint(\"Bianca had a total of \", total, \"books\")",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef countBooks(B, C):\n  return B * 5 + C * 10\n\nprint(countBooks(B,C))",
          "\nAnswer = A\u00d7(B+C)"
        ],
        [
          "\n\ndef numBooks(B, C):\n  return B * 10 + C * 25 \n\nprint(numBooks(B, C))",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_Books (B, C):\n  return B*A + C*A\n\ntotal_Books(B, C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef totalBooks(A, B, C):\n  return A*B + A*C\n\nprint(totalBooks(10, 5, 7)) #prints 110",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef numberOfBooks(a, b, c):\n  return a * (b + c)\n\nprint(numberOfBooks(2, 3, 4)) # prints 20",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef num_books(b, c):\n  return b * A + c * A\n  \nnum_books(b, c)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef num_books(A, B, C):\n  return A * (B + C)\n  \n  #Example usage:\n  print(num_books(6, 3, 5))\n  #returns 78",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef bookcount(B,C):\n  return B*A + C*A\n\nprint(bookcount(B,C))",
          "\nAnswer = AB + C"
        ]
      ]
    },
    "source": {
      "question": " Bianca was organizing her book case making sure each of the shelves had exactly 8 books on it. If she had 5 shelves of mystery books and 4 shelves of picture books, how many books did she have total? ",
      "final_answer": 72.0,
      "index": 276
    }
  },
  {
    "result": 20.0,
    "meta": {
      "n_calls": 38,
      "duration": 28.79977583885193,
      "templates": [
        "Billy was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a Python function that returns the answer.",
        "Billy was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        20.0,
        20.0,
        20.0
      ],
      "completions": [
        [
          "\n\ndef total_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculate_coins(A,B,C):\n  return (A*C)+(B*C)\n\nAnswer = calculate_coins(A,B,C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_coins(A,B,C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef coins_total(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_coins(A,B,C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A*25 + B*10"
        ],
        [
          "\n\ndef coin_total(A, B, C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = (A*25) + (B*10)"
        ],
        [
          "\n\ndef count_coins(A,B,C):\n  return (A*C)+(B*C)",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef totalCoins(A, B, C): \n    return (A * C) + (B * C)",
          "\nA + B = C \nAnswer = C"
        ],
        [
          "\n\ndef numCoins(A,B,C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = (A * 25) + (B * 10) + C"
        ],
        [
          "\n\ndef coin_total(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coin_count(A,B,C):\n  return (A*C) + (B*C)",
          "\nAnswer = A*25 + B*10"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * 25 + B * 10"
        ],
        [
          "\n\ndef calculate_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*25 + B*10"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return A * C + B * C\n\n#example\nprint(coins_total(2, 3, 10))\n# prints 70",
          "\nAnswer = (A \u00d7 C) + (B \u00d7 C)"
        ],
        [
          "\n\ndef coins_total(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_coins(A, B, C):\n  return (A*C)+(B*C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_coins(A, B, C):\n  return (A * C) + (B * C)\n\n# example:\ntotal_coins(3, 5, 10)\n# returns 150",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Billy was putting his spare change into piles. He had 2 piles of quarters and 3 piles of dimes. If each pile had 4 coins in it, how many coins did he have total? ",
      "final_answer": 20.0,
      "index": 277
    }
  },
  {
    "result": 81.0,
    "meta": {
      "n_calls": 28,
      "duration": 20.666349172592163,
      "templates": [
        "Chloe was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a Python function that returns the answer.",
        "Chloe was playing a video game where she scores A points for each treasure she finds. If she found B treasures on the first level and C on the second, what would her score be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        81.0,
        81.0,
        81.0,
        81.0,
        81.0
      ],
      "completions": [
        [
          " \n\ndef calculateScore(A, B, C):\n  return (A*B) + (A*C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          " \n\ndef score(A, B, C):\n  return (A * B) + (A * C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef score(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef score(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef score_calc(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef scoreGame(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef score(A,B,C):\n  return A * (B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n return (A*B)+(A*C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef treasure_score(A, B, C):\n     return (A * B) + (A * C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calculateScore(a,b,c):\n  return a*b+a*c\n\nprint(calculateScore(A,B,C))",
          "\n\nAnswer = A(B + C)"
        ],
        [
          " \n\ndef level_score(A, B, C):\n  return (A*B) + (A*C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calculate_score(A,B,C):\n  return A * (B + C)",
          "\n\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef total_score(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef getScore(a,b,c):\n  return (a*b + a*c)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Chloe was playing a video game where she scores 9 points for each treasure she finds. If she found 6 treasures on the first level and 3 on the second, what would her score be? ",
      "final_answer": 81.0,
      "index": 278
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 28,
      "duration": 23.176291942596436,
      "templates": [
        "While shopping for music online, Nancy bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Nancy buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Nancy bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Nancy buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef num_of_songs(A, B, C): \n  return A * C + B * C\n\nnum_of_songs(A, B, C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\nreturn A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef totalSongs(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A,B,C):\n    total_songs = A * C + B * C\n    return total_songs\n\ntotal_songs(A,B,C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  num_songs = A * C + B * C\n  return num_songs\n\ntotal_songs(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef nancy_songs(A, B, C):\n    return A * C + B * C\n\n# call the function\nsongs = nancy_songs(2, 3, 5)\nprint(songs)\n#Output: 25",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef num_of_songs(A, B, C): \n  return (A * C) + (B * C)\n  \nnum_of_songs(3, 4, 10)\n\nAnswer: 70",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C\n  \ntotal_songs(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs_bought(A, B, C):\n  return (A*C) + (B*C)",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef num_songs(A,B,C):\n  return A*C + B*C\n\ntotal_songs = num_songs(A,B,C)",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Nancy bought 3 country albums and 5 pop albums. Each album came with a lyric sheet and had 8 songs. How many songs did Nancy buy total? ",
      "final_answer": 64.0,
      "index": 279
    }
  },
  {
    "result": 21.0,
    "meta": {
      "n_calls": 24,
      "duration": 22.16566300392151,
      "templates": [
        "Lana was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Lana have total?\nWrite a Python function that returns the answer.",
        "Lana was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Lana have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        21.0,
        21.0,
        21.0,
        21.0,
        21.0
      ],
      "completions": [
        [
          "\n\ndef num_winter_clothes(A, B, C):\n  return (A * (B + C))\n\nprint(num_winter_clothes(3, 5, 7)) # Answer: 36",
          "\nAnswer =A*(B+C)"
        ],
        [
          "\n\ndef winter_clothing_count(A, B, C):\n  return A*(B + C)\n\nprint(winter_clothing_count(A, B, C))",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef count_pieces(A, B, C):\n  return A*B + A*C\n\nprint(count_pieces(5, 6, 8))\n\nThis prints 80.",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n    return A * (B + C)\n\ntotal_pieces = winter_clothing(4, 8, 9)\nprint(total_pieces)\n\n# Answer: 80",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\n#A = number of boxes\n#B = number of scarves\n#C = number of mittens\n\ndef total_winter_clothes(A, B, C):\n  return A*B + A*C\n\nprint(total_winter_clothes(3, 8, 5)) # prints 45",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A * (B + C)\n\ntotal = winter_clothing(A, B, C)\nprint(total)",
          "\n\nAnswer = A + (B x C)"
        ],
        [
          "\n\ndef winter_clothes(A, B, C):\n  return (A * (B + C))\n\nprint(winter_clothes(2, 4, 6))\n# Output: 28",
          "\n\nAnswer = A + (B * C)"
        ],
        [
          "\n\ndef winter_clothing(a,b,c):\n  return a*(b+c)\n\nanswer = winter_clothing(A,B,C)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef count_winter_clothes(A, B, C):\n    return A*(B+C)\n\nanswer = count_winter_clothes(A, B, C)\nprint(answer)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef winterClothingTotal(A, B, C):\n  return (A * (B + C))\n\nprint(winterClothingTotal(A, B, C))",
          " \nAnswer = A + (B*2)"
        ],
        [
          "\n\ndef winter_clothing (a, b, c):\n  return a * (b + c)\n\nAnswer = winter_clothing(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef number_of_clothing(a, b, c):\n  return (a*2)+(b*2)+c\n\nprint(number_of_clothing(2, 3, 5))\n# Answer: 16",
          "\n\nAnswer = A + (B x C)"
        ]
      ]
    },
    "source": {
      "question": " Lana was unboxing some of her old winter clothes. She found 3 boxes of clothing and inside each box there were 3 scarves and 4 mittens. How many pieces of winter clothing did Lana have total? ",
      "final_answer": 21.0,
      "index": 280
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.123975992202759,
      "templates": [
        "Frank and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Frank bought B decks and his friend bought C decks?\nWrite a Python function that returns the answer.",
        "Frank and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Frank bought B decks and his friend bought C decks?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef trick_deck_spend(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef spend(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef calculate_trick_deck_cost(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef spending_amount(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_spent(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_spend(A,B,C):\n    return (A*B)+(A*C)\n\nprint(total_spend(10,2,3)) # Output: 80",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_spend(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef trick_deck_cost(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Frank and his friend were buying trick decks from the magic shop for 7 dollars each. How much did they spend if Frank bought 3 decks and his friend bought 2 decks? ",
      "final_answer": 35.0,
      "index": 281
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 22,
      "duration": 19.346004962921143,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef numberOfCustomers(A, B, C):\n  return A * (B + C)\n\ntotal_customers = numberOfCustomers(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef customersTotal(A, B, C):\n  return A*(B+C)\n\nprint(customersTotal(A, B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return (A * (B + C))\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_customers(A,B,C):\n    return A*(B+C)\n\ntotal = total_customers(A,B,C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\nprint(total_customers(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calculate_customers(A, B, C):\n    return A * (B + C)\n\nprint(calculate_customers(A,B,C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef customerTotal(A, B, C):\n  return A*(B+C)\n\ncustomerTotal(A, B, C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef waiter_customer_total(A, B, C):\n  return A * (B + C)\n\nprint(waiter_customer_total(2, 3, 4))\n# Output: 14",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef numCustomers(A, B, C):\n  return (A * (B + C))\n\n# Test\nprint(numCustomers(2, 5, 4)) # returns 18",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 5 tables he was waiting on, with 5 women and 3 men at each table. How many customers total did the waiter have? ",
      "final_answer": 40.0,
      "index": 282
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.086118936538696,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef lives_total(A,B,C):\n  return (A + B) * C\n\nlives_total(A,B,C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n  return a*c + b*c\n\n# For example, if there were 4 friends and 4 more players, each with 3 lives:\nlives_total(4, 4, 3) \n# returns 36",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return A*C + B*C\n\nprint(total_lives(A,B,C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives(A, B, C):\n\ttotal_lives = A * C + B * C\n\treturn total_lives\n\nprint(lives(A, B, C))",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C + B*C\n\nprint(totalLives(3, 5, 6))\n# Answer: 78",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * C + B * C\n\ntotal_lives(5, 3, 2) # returns 16",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n    return (A + B)*C\n\nlives_total(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C + B*C\n\ntotalLives(A, B, C)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A + B) * C\n\ntotal_lives(5, 3, 4)  # returns 60",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  total_lives = A*C + B*C\n  return total_lives",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = A + B + C"
        ],
        [
          "\n\ndef numOfLives(A, B, C):\n  return (A + B) * C\n\nprint(numOfLives(A, B, C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef player_lives(A, B, C):\n   return (A + B) * C\n\nprint(player_lives(3, 4, 5))\n   \nResult: 75",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\nprint(total_lives(3, 4, 5))  # prints 60",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n    return ((A + B) * C)",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nlives_total(4, 5, 3) # returns 27",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A + B) * C\n\ntotalLives(5, 3, 4) \n\n# This would return the answer of 60",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef count_lives(a, b, c):\n  return (a + b) * c\n\nprint(count_lives(A, B, C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n    return A*C + B*C\n\nprint(lives_total(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\nprint(total_lives(10, 5, 3))  # prints out 45",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A,B,C):\n    return (A + B) * C\n\nprint(lives_total(A,B,C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C \n\nprint(total_lives(A, B, C))",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef LivesTotal(A, B, C):\n  return (A + B) * C\n\nprint(LivesTotal(A, B, C))",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return a*c + b*c\n  \nprint(total_lives(a, b, c))",
          "\n\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\nprint(total_lives(5, 4, 3))  # prints 60",
          "\n\nAnswer = A + B x C"
        ]
      ]
    },
    "source": {
      "question": " There were 8 friends playing a video game online when 2 more players joined the game. If each player had 6 lives, how many lives did they have total? ",
      "final_answer": 60.0,
      "index": 283
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.77676796913147,
      "templates": [
        "Sam was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Sam was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef canCollection(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalCans(A, B, C): \n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_cans(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalCans(A,B,C): \n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef pickup_total(A ,B ,C):\n  return (A * C + B * C)\n\nprint(pickup_total(A, B, C))",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef cans(A, B, C):\n  return (A*C)+(B*C)",
          " \nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " Sam was collecting cans for recycling. On Saturday he filled 3 bags up and on Sunday he filled 4 more bags. If each bag had 9 cans in it, how many cans did he pick up total? ",
      "final_answer": 63.0,
      "index": 284
    }
  },
  {
    "result": 60.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.424500942230225,
      "templates": [
        "April's discount flowers was having a sale where each flower was A dollars. If Maria bought B roses and C daisies, how much did she spend?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each flower was A dollars. If Maria bought B roses and C daisies, how much did she spend?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        60.0,
        60.0,
        60.0,
        60.0,
        60.0
      ],
      "completions": [
        [
          "\n\ndef flowersTotal (A, B, C): \n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef april_discount(A,B,C):\n  return A * (B + C)",
          "\nAnswer = (A*B) + (A*C)"
        ],
        [
          "\n\ndef flower_purchase_total(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef flower_spend(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef flower_sale(A, B, C):\n  return (A * B) + (A * C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef aprils_sale(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef flower_cost(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef AprilDiscount(A,B,C):\n  return (A*(B+C))\n  \nAprilDiscount(2,3,4) evaluates to 14.",
          "\n\nAnswer = A(B + C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each flower was 6 dollars. If Maria bought 7 roses and 3 daisies, how much did she spend? ",
      "final_answer": 60.0,
      "index": 285
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 20,
      "duration": 17.08431100845337,
      "templates": [
        "Dave was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Dave make in those two days?\nWrite a Python function that returns the answer.",
        "Dave was working as a sacker at a grocery store where he made A dollars an hour. On Monday he worked B hours and on Tuesday he worked C hours. How much money did Dave make in those two days?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef calculateMoney(A,B,C):\n  return (A * B + A * C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef dave_earnings(A,B,C):\n    return A*B + A*C\n\nprint(dave_earnings(A,B,C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef moneyEarned(A, B, C): \n    return A*B + A*C",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef wages(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_earnings(A,B,C):\n    return A*B + A*C\n\nprint(total_earnings(5,6,8))\n# 80",
          "\nAnswer = A*B + A*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pay(A, B, C):\n  return A*B + A*C\n\n# Example:\n# pay(10, 5, 7):\n# 10*5 + 10*7 == 70\n# Output:\n70",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef daves_pay(a, b, c):\n  return a * b + a * c\n\nanswer = daves_pay(A, B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef Salary(A, B, C):\n  return A * (B + C)\n\nSalary(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef Dave_Pay(A, B, C):\n  pay = (A*B) + (A*C)\n  return pay",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef daves_salary(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Dave was working as a sacker at a grocery store where he made 6 dollars an hour. On Monday he worked 6 hours and on Tuesday he worked 2 hours. How much money did Dave make in those two days? ",
      "final_answer": 48.0,
      "index": 286
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 44,
      "duration": 38.73525667190552,
      "templates": [
        "Nancy was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a Python function that returns the answer.",
        "Nancy was organizing her book case making sure each of the shelves had exactly A books on it. If she had B shelves of mystery books and C shelves of picture books, how many books did she have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0
      ],
      "completions": [
        [
          "\n\ndef number_of_total_books(A, B, C):\n    return A*(B+C)\n\nnumber_of_total_books(20,4,5)\n# Answer: 200",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef num_books(b,c):\n    return b*5 + c*3\n\nprint(num_books(B,C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef book_total(b, c):\n  return b * 9 + c * 5\n  \nAnswer = book_total(B,C)",
          " \nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_books(B, C):\n  return B*A + C*A \n\nAnswer: B*A + C*A books",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calculate_books(b, c):\n  return b * 5 + c * 6\n\ntotal_books = calculate_books(B, C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef book_case(B, C):\n  return B * 5 + C * 10\n\n#calling the function\ntotal_books = book_case(B, C) \nprint(total_books)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef total_books(a,b,c):\n  return a*b + a*c\n\ntotal_books(10, 5, 3)\n#Answer: 80 books",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef book_case(a,b,c):\n  return a*b + a*c\n\n#Printing the output\nprint(book_case(6,4,2)) #Answer: 48",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef count_books(a, b, c):\n  return a * b + a * c\n\nprint(count_books(N, M, P))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef book_case(B, C):\n  return B*A + C*A",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return (A * B) + (A * C)\n\nprint(total_books(5, 3, 2))\n# Result: 35 books",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef NumBooks(B, C):\n  num_books = B*C\n  return num_books\n\nprint(NumBooks(B, C))",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef book_count(b, c):\n  return b * 5 + c * 10\n  \ntotal_books = book_count(B, C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef num_books(B, C):\n  return B * A + C * A\n\nanswer = num_books(B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef book_case(B, C):\n  return B * 5 + C * 2\n\nanswer = book_case(B, C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef number_of_books(A, B, C): \n  total_books = A * (B + C)\n  return total_books\n\nprint(number_of_books(4, 6, 2))\n\nAnswer: 32",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef totalBooks(A,B,C):\n  return A*(B+C)\n\ntotal = totalBooks(3,4,2)\nprint(total)   # Output: 24",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef total_books(A, B, C):\n  return (A * (B + C))\n\nprint(total_books(20, 3, 4))\n# Output: 140",
          "\nAnswer = A(B+C)"
        ],
        [
          "\n\ndef mystery_picture_books(A, B, C):\n    return A * (B + C)\n\nprint(mystery_picture_books(10, 3, 5))\n# Output: 80",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef total_books (A, B, C):\n  return A * (B + C)\n\ntotal_books(10, 5, 3)\n# Output: 80",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef totalBooks(A, B, C):\n    return A * (B + C)\n\nprint(totalBooks(4, 10, 16))\n# Output: 264",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef book_total(B, C):\n  return B * 5 + C * 4  #assuming Nancy has 5 books per shelf of mystery books and 4 books per shelf of picture books",
          "\n\nAnswer = A*(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Nancy was organizing her book case making sure each of the shelves had exactly 6 books on it. If she had 2 shelves of mystery books and 6 shelves of picture books, how many books did she have total? ",
      "final_answer": 48.0,
      "index": 287
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 28,
      "duration": 23.955088138580322,
      "templates": [
        "While shopping for music online, Faye bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Faye buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Faye bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Faye buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef total_songs(A, B, C):\n  return A*C + B*C\n\ntotal_songs(A, B, C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef calculate_songs(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          " \n\ndef songs_bought(A, B, C):\n  return A*C + B*C\n\nsongs_bought(A,B,C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef songs_bought(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_songs(A, B, C):\n  return A*C + B*C\n\nnum_songs(2, 1, 3)  # returns 9",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A,B,C):\n  return (A*C)+(B*C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef how_many_songs(a,b,c):\n  return a*c + b*c\n\nanswer = how_many_songs(A,B,C)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef total_songs(A,B,C):\n    return A*C + B*C\n\ntotal_songs(3,5,12)\n# Output: 96",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef musicCalculator(A, B, C):\n    return A*C + B*C\n\nmusicCalculator(A, B, C)",
          " \n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef song_count(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_songs(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = A + B + (C \u00d7 (A + B))"
        ],
        [
          "\n\ndef totalSongsPurchased(A, B, C):\n  return A*C + B*C\n\nprint (totalSongsPurchased(A, B, C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef songs_bought(A, B, C):\n    return A*C + B*C",
          "\n\nAnswer = A + B + (C x A) + (C x B)"
        ],
        [
          "\n\ndef songs_bought(a, b, c):\n  return (a + b) * c\n\nsongs_bought(A, B, C)",
          "\n\nAnswer = A*C + B*C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Faye bought 2 country albums and 3 pop albums. Each album came with a lyric sheet and had 6 songs. How many songs did Faye buy total? ",
      "final_answer": 30.0,
      "index": 288
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 28,
      "duration": 22.981892108917236,
      "templates": [
        "Tom was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a Python function that returns the answer.",
        "Tom was putting his spare change into piles. He had A piles of quarters and B piles of dimes. If each pile had C coins in it, how many coins did he have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef coins_total(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef count_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalCoins(A, B, C):\n  return ( A * C ) + ( B * C )",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef coin_total(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_coins(A, B, C):\n    return (A * C) + (B * C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_coins(A, B, C):\n  return (A * C) + (B * C)",
          "\n\nA x C + B x C = Answer\nAnswer = (A x C) + (B x C)"
        ],
        [
          "\ndef Total_Coins(A, B, C):\n  return A*C + B*C\n\nTotal_Coins(4,2,5)\n40",
          "\n\nAnswer = (A x 25) + (B x 10) = C"
        ],
        [
          "\n\ndef coins(A, B, C):\n    return (A * C) + (B * C)",
          "\nAnswer = (A x 25) + (B x 10) x C"
        ],
        [
          "\n\ndef total_coins(A,B,C):\n    return (A*C)+(B*C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef how_many_coins(a, b, c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalCoins(A, B, C):\n  return A*C + B*C",
          "\n\nA*C + B*C = Answer \nAnswer = AC + BC"
        ],
        [
          "\n\ndef coin_piles(A,B,C):\n  return A*C + B*C\n\nprint(coin_piles(8,5,4))\n#Result: 104",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coins(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef coins_total(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " Tom was putting his spare change into piles. He had 2 piles of quarters and 4 piles of dimes. If each pile had 5 coins in it, how many coins did he have total? ",
      "final_answer": 30.0,
      "index": 289
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.129544973373413,
      "templates": [
        "While playing a trivia game, George answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a Python function that returns the answer.",
        "While playing a trivia game, George answered A questions correct in the first half and B questions correct in the second half. If each question was worth C points, what was his final score?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          " \n\ndef final_score(A, B, C):\n    return A * C + B * C",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return (A*C) + (B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef score(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C): \n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef finalScore(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef score_calculator(a, b, c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef final_score(A, B, C):\n  return (A*C) + (B*C)",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef scoreCalculator(A, B, C):\n  finalScore = (A * C) + (B * C)\n  return finalScore",
          "\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While playing a trivia game, George answered 6 questions correct in the first half and 4 questions correct in the second half. If each question was worth 3 points, what was his final score? ",
      "final_answer": 30.0,
      "index": 290
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 24,
      "duration": 21.422751903533936,
      "templates": [
        "Lana was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Lana have total?\nWrite a Python function that returns the answer.",
        "Lana was unboxing some of her old winter clothes. She found A boxes of clothing and inside each box there were B scarves and C mittens. How many pieces of winter clothing did Lana have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef winterClothing(A,B,C):\n  return A*(B+C)\n\nprint(winterClothing(3,2,4))\n# Output: 22",
          "\nAnswer = (A * (B + C))"
        ],
        [
          " \n\ndef winter_clothing(A, B, C):\n  return A * (B + C)\n\nwinter_clothing(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef winter_clothing_total(A, B, C):\n    return A*(B+C)\n\ntotal = winter_clothing_total(A, B, C)\nprint(total)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef winter_clothes(A,B,C):\n  return A * (B + C)\n\nprint(winter_clothes(A,B,C))",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef winterClothes(A,B,C):\n  return (A * (B + C))\n  \ntotalClothes = winterClothes(5,2,3)\nprint(totalClothes)\n\nThe total is 35 pieces of winter clothing.",
          "\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef winterClothing(A, B, C):\n  return A*B+C\n\nanswer = winterClothing(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef winterClothing(a, b, c):\n  return a*(b+c)\n\nanswer = winterClothing(A, B , C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef count_clothes(a,b,c):\n  return (a*(b+c))\n\nAnswer = count_clothes(A,B,C)",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  return A*(B+C)\n\nwinter_clothing(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef winter_clothing(A, B, C):\n  answer = A * (B + C)\n  return answer\n  \nprint(winter_clothing(A, B, C))",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef calc_pieces(A, B, C):\n  return A*(B+C)\n\nprint(calc_pieces(A, B, C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_clothing(A, B, C):\n  return A * (B + C)\n\nprint(calculate_clothing(3, 3, 3))\n\nAnswer: 18",
          "\nAnswer = A x (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Lana was unboxing some of her old winter clothes. She found 4 boxes of clothing and inside each box there were 2 scarves and 6 mittens. How many pieces of winter clothing did Lana have total? ",
      "final_answer": 32.0,
      "index": 291
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 16,
      "duration": 10.814198017120361,
      "templates": [
        "At the town carnival Oliver rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a Python function that returns the answer.",
        "At the town carnival Oliver rode the ferris wheel A times and the bumper cars B times. If each ride cost C tickets, how many tickets did he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        30.0,
        30.0,
        30.0,
        30.0
      ],
      "completions": [
        [
          "\n\ndef calculateTickets(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef carnivalTickets(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          " \n\ndef total_tickets(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef ticket_cost(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef tickets_used(A, B, C): \n    return A*C + B*C",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef carnival_tickets(a,b,c):\n  return (a * c) + (b * c)",
          "\n\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef Tickets(A, B, C):\n  total = A * C + B * C\n  return total",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef carnival_tickets(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ]
      ]
    },
    "source": {
      "question": " At the town carnival Oliver rode the ferris wheel 7 times and the bumper cars 3 times. If each ride cost 3 tickets, how many tickets did he use? ",
      "final_answer": 30.0,
      "index": 292
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.353381156921387,
      "templates": [
        "Sarah had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a Python function that returns the answer.",
        "Sarah had A pages of math homework and B pages of reading homework. If each page had C problems on it, how many problems did she have to complete total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef total_problems(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef totalProblems(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = (A * C) + (B * C)"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return A * C + B * C\n\nprint(total_problems(A, B, C))",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_problems(A, B, C): \n  return A * C + B * C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = AC + BC"
        ]
      ]
    },
    "source": {
      "question": " Sarah had 4 pages of math homework and 6 pages of reading homework. If each page had 4 problems on it, how many problems did she have to complete total? ",
      "final_answer": 40.0,
      "index": 293
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 26,
      "duration": 22.175987005233765,
      "templates": [
        "Kaleb was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a Python function that returns the answer.",
        "Kaleb was collecting cans for recycling. On Saturday he filled A bags up and on Sunday he filled B more bags. If each bag had C cans in it, how many cans did he pick up total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef totalCans(A, B, C):\n  return (A*C) + (B*C)",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef recycling_cans(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef totalCans(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef Recycling(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_cans(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          " \n\ndef cans_collected(A,B,C):\n  return A*C + B*C\n\n# Call the function \ntotal_cans = cans_collected(A,B,C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef collect_cans(a, b, c):\n  return a * c + b * c",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n  return A*C + B*C",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numCans(A, B, C):\n  return A*C + B*C\n\nprint(numCans(3, 4, 5))\n# prints 45",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef cans_picked_up(A, B, C): \n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          " \n\ndef recycle_cans():\n    A = int(input('How many bags did Kaleb fill up on Saturday? '))\n    B = int(input('How many bags did Kaleb fill up on Sunday? '))\n    C = int(input('How many cans were in each bag? '))\n    return A * C + B * C\n\nprint('Kaleb picked up a total of ' + str(recycle_cans())",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef cans_collected(A, B, C):\n return A*C + B*C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef total_cans(a, b, c):\n  return a * c + b * c",
          "\n\nAnswer = A * C + B * C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb was collecting cans for recycling. On Saturday he filled 4 bags up and on Sunday he filled 6 more bags. If each bag had 4 cans in it, how many cans did he pick up total? ",
      "final_answer": 40.0,
      "index": 294
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.510594129562378,
      "templates": [
        "Edward and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Edward bought B decks and his friend bought C decks?\nWrite a Python function that returns the answer.",
        "Edward and his friend were buying trick decks from the magic shop for A dollars each. How much did they spend if Edward bought B decks and his friend bought C decks?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          " \n\ndef buy_decks(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef spending(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef trick_decks(A, B, C):\n  return A*(B + C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trick_deck_cost(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cost_of_deck(A,B,C):\n  answer=A*(B+C)\n  return answer",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef magic_deck_cost(a,b,c):\n  return a * (b + c)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef trick_deck_cost(A, B, C):\n    return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef spendAmount(a, b, c): \n    return a * (b + c)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef totalCost(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Edward and his friend were buying trick decks from the magic shop for 6 dollars each. How much did they spend if Edward bought 3 decks and his friend bought 6 decks? ",
      "final_answer": 54.0,
      "index": 295
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 26,
      "duration": 19.760557174682617,
      "templates": [
        "Emily bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a Python function that returns the answer.",
        "Emily bought A new chairs and B new tables for her house. If she spent C minutes on each piece furniture putting it together, how many minutes did it take her to finish?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef timeTaken(A, B, C):\n  return A * C + B * C",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef complete_time(A, B, C):\n    return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef assemble_furniture(A, B, C):\n  return (A * C) + (B * C)",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef time_taken(A, B, C):\n  return A*C + B*C",
          "\n\nAnswer = A * C + B * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef furnitureTime(chairs, tables, minutes): \n  return chairs * minutes + tables * minutes",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef calculate_time(A,B,C):\n    time = A * C + B * C\n    return time",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef minutes_to_assemble(num_chairs, num_tables, minutes_per_furniture):\n    time = num_chairs*minutes_per_furniture + num_tables*minutes_per_furniture\n    return time\n\nprint(minutes_to_assemble(A,B,C))",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef furniture(A,B,C):\n  return (A*C)+(B*C)\n\nfurniture(2,3,20)\nAnswer: 160 minutes",
          "\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef furniture_time(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndeftimeTaken(A, B, C):\n return A*C + B*C\n\nprint(timeTaken(2, 3, 15))\n#90",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef furniture_assembling(A, B, C):\n    total_time = (A * C) + (B * C)\n    return total_time",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef setup_time(A, B, C):\n  time = A*C + B*C\n  return time",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef assemble_furniture(chairs,tables,minutes):\n    return chairs*minutes + tables*minutes",
          "\nAnswer = A *C + B*C"
        ]
      ]
    },
    "source": {
      "question": " Emily bought 4 new chairs and 2 new tables for her house. If she spent 8 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ",
      "final_answer": 48.0,
      "index": 296
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.658863067626953,
      "templates": [
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a Python function that returns the answer.",
        "A waiter had A tables he was waiting on, with B women and C men at each table. How many customers total did the waiter have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef total_customers(A,B,C):\n  return A * (B + C)\n\nprint(total_customers(A,B,C))",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef waiter_customers(A,B,C):\n  return (A*B+A*C)\n\nprint(waiter_customers(A,B,C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalCustomers(A, B, C):\n  return A * (B + C)\n\ntotalCustomers(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef customers_total(A, B, C):\n  return A * (B + C)\n\nprint(customers_total(2, 3, 4))  # 14",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalCustomers(A, B, C):\n  return A * (B + C)\n\nprint(totalCustomers(10, 4, 3))  # prints 70",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_customers(A, B, C):\n  return A * (B + C)\n\ntotal_customers(A, B, C)",
          "\n\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef waiterNumCustomers(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef waiter_customers(a, b, c):\n  return a * (b + c)\n\nnum_cust = waiter_customers(A, B, C)",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 9 tables he was waiting on, with 2 women and 6 men at each table. How many customers total did the waiter have? ",
      "final_answer": 72.0,
      "index": 297
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 42,
      "duration": 35.152132987976074,
      "templates": [
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B more players joined the game. If each player had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0
      ],
      "completions": [
        [
          "\n\ndef getTotalLives(A, B, C):\n  return (A + B) * C\n  \ngetTotalLives(3, 5, 4) # returns the total of 3 + 5 players with 4 lives each, which is 28",
          "\n\nAnswer = (A + B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef totalLives(A, B, C): \n  return A * C + B * C\n\ntotalLives(A, B, C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef num_lives(a, b, c):\n  return (a + b) * c\n\nprint(num_lives(a, b, c))",
          "\nAnswer = AC + BC"
        ],
        [
          "\n\ndef totalLives(A,B,C):\n    return (A+B)*C\n\nprint(totalLives(2,3,4))\n#Output: 24",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef get_total_lives(players, lives):\n  return players * lives",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_sum(A,B,C):\n  return (A + B) * C\n\nlives_sum(A,B,C)",
          "\nAnswer = A + B \u00d7 C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return (a + b) * c\n\nprint(total_lives(5, 3, 4))\n\n# Output: 60",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return (A+B)*C\n\nprint(total_lives(3,5,2))\n\nAnswer: 20",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C\n\ntotalLives(2, 3, 4)\n\nAnswer: 24",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nprint(lives_total(A, B, C))",
          "\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A + B) * C",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A+B)*C\n\nprint(totalLives(5, 4, 3))\n# Output: 45",
          "\nAnswer = A + B*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A + B) * C\n\nanswer = total_lives(A, B, C)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C + B * C\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B x C"
        ],
        [
          "\n\ndef lives_total(A,B,C):\n  return (A+B)*C\n\nprint(lives_total(5,3,4))\n# Output: 60",
          "\nAnswer = A + B  * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  total_lives = (A + B) * C\n  return total_lives\n\nprint(total_lives(3, 5, 2))\n# Output: 20",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C + B*C\n\ntotalLives(A, B, C)",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return (A + B) * C\n\nprint(total_lives(A,B,C))",
          "\n\nAnswer = A + B * C"
        ],
        [
          "\n\ndef friends_lives(A, B, C): \n    return A + B * C\n\nprint(friends_lives(A, B, C))",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A + B) * C\n\nprint(lives_total(A, B, C))",
          "\nAnswer = A + B x C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return (a + b) * c\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A + B x C"
        ]
      ]
    },
    "source": {
      "question": " There were 4 friends playing a video game online when 5 more players joined the game. If each player had 3 lives, how many lives did they have total? ",
      "final_answer": 27.0,
      "index": 298
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.860217094421387,
      "templates": [
        "While shopping for music online, Janet bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Janet buy total?\nWrite a Python function that returns the answer.",
        "While shopping for music online, Janet bought A country albums and B pop albums. Each album came with a lyric sheet and had C songs. How many songs did Janet buy total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef JanetSongs(A, B, C):\n  return A * C + B * C",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef JanetSongs(A,B,C):\n  return A*C + B*C\n\nJanetSongs(2,3,4)\nAnswer: 24",
          "\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef numTotalSongs(A,B,C):\n  return A*C + B*C",
          "\nAnswer = A*C + B*C"
        ],
        [
          "\n\ndef number_of_songs(A, B, C):\n  return A*C + B*C\n\nprint(number_of_songs(4,3,10))\n\nThe answer is 70 songs.",
          "\n\nAnswer = A*C + B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef JanetSongs(A, B, C):\n  return A*C + B*C\n\nAnswer: Janet bought (A * C + B * C) songs total.",
          "\n\nAnswer = C \u00d7 (A + B)"
        ],
        [
          "\n\ndef album_songs(A,B,C):\n  return (A*C)+(B*C)\n\nAnswer: Janet bought AC+BC songs.",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef numSongsPurchased(a, b, c):\n  return (a * c) + (b * c)\n\nanswer = numSongsPurchased(A, B, C)",
          "\n\nAnswer = A * C + B * C"
        ],
        [
          "\n\ndef num_songs(A, B, C):\n    return (A*C + B*C)\n\nanswer = num_songs(A, B, C)",
          "\nAnswer = A \u00d7 C + B \u00d7 C"
        ],
        [
          "\n\ndef album_songs(A, B, C):\n  return A * C + B * C\n\nsongs = album_songs(A, B, C)",
          "\n\nAnswer = A x C + B x C"
        ],
        [
          "\n\ndef JanetSongs(A,B,C):\n  return A*C + B*C\n\nprint(JanetSongs(3,4,10))\n#prints 70",
          "\n\nAnswer = A x C + B x C"
        ]
      ]
    },
    "source": {
      "question": " While shopping for music online, Janet bought 6 country albums and 2 pop albums. Each album came with a lyric sheet and had 9 songs. How many songs did Janet buy total? ",
      "final_answer": 72.0,
      "index": 299
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 48,
      "duration": 44.34647488594055,
      "templates": [
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a Python function that returns the answer.",
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef groups(A, B, C):\n    return (A + B) // C\n\nprint(groups(10, 8, 4))\n#Output: 3",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_group(A, B, C):\n  total = A + B\n  num_groups = total // C\n  remainder = total % C\n  if remainder != 0:\n    num_groups = num_groups + 1\n  return num_groups\n\nprint(num_group(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calc_groups(A, B, C): \n    groups = A // C\n    if A % C != 0:\n        groups += 1\n    groups += B // C\n    if B % C != 0:\n        groups += 1\n    return groups\n\nprint(calc_groups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef team_groups(A, B, C):\n  return (A + B) // C\n\nprint(team_groups(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef getGroups(A, B, C):\n  return (A // C) + (B // C) + (A % C > 0) + (B % C > 0)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateGroups(A,B,C):\n  return (A + B) // C\n\nprint(calculateGroups(A,B,C))",
          "\nAnswer =  (A + B)/C"
        ],
        [
          "\n\ndef debateTeamGroups(boys,girls,groupSize):\n  totalStudents = boys + girls\n  return totalStudents // groupSize",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef getNumGroups(a, b, c):\n  num_groups = 0\n  while (a >= c and b >= c):\n    num_groups += 1\n    a -= c\n    b -= c\n  \n  return num_groups\n\n# Example\nnum_groups = getNumGroups(10, 8, 2)\nprint(num_groups)\n# Output: 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_team_groups (a, b, c):\n  return (a + b)//c",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef splitGroups(A, B, C):\n  return (A + B) // C\n\nprint(splitGroups(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef debate_team_groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) \\div C"
        ],
        [
          "\n\ndef calculateGroups(boys, girls, groupSize):\n  return (boys // groupSize + girls // groupSize + (boys % groupSize + girls % groupSize) // groupSize) \n\nprint(calculateGroups(A, B,",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_num_groups(A, B, C):\n  total_members = A + B\n  num_groups = total_members // C\n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(boys, girls, group_size):\n    total_members = boys + girls\n    total_groups = total_members // group_size\n    return total_groups\n    \nprint(groups(A,B,C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef team_groups(a, b, c):\n  return (a//c + b//c + (a % c + b % c) > 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n  return max(A//C, B//C)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef debate_groups(a, b, c):\n    return max(a // c, b // c) + (a % c > 0) + (b % c > 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(boys, girls, group_size): \n    total_people = boys + girls \n    return total_people // group_size \n  \nprint(groups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n    \"\"\"Calculate how many groups of size C can be formed with A boys and B girls\"\"\"\n    num_groups = 0\n    total = A + B\n    while total > 0:\n        total -= C\n        num_groups += 1\n    return num_groups\n\nprint(calculate_groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_teams(boys, girls, teams):\n  return (boys // teams) + (girls // teams) + (boys % teams + girls % teams > 0)\n\nprint(debate_teams(A, B, C))",
          "\nAnswer = \\(\\frac{A+B}{C}\\)"
        ],
        [
          "\n\ndef calculateGroups (A, B, C):\n  return (A + B) // C \n \nprint(calculateGroups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef debate_teams(boys, girls, num):\n  return (boys // num) + (girls // num)",
          "\n\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " The schools debate team had 26 boys and 46 girls on it. If they were split into groups of 9 how many groups could they make? ",
      "final_answer": 8.0,
      "index": 300
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.543099880218506,
      "templates": [
        "Robin uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Robin uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef how_many_pics (A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n    return (A + B) // C",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef albumPics(picsA, picsB): \n  numAlbums = 3\n  totalPics = picsA + picsB\n  return int(totalPics/numAlbums)\n\nprint(albumPics(5,10)) # Output: 7",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_pics_per_album(total_pics, num_albums):\n  pics_per_album = total_pics // num_albums\n  return pics_per_album\n\ntotal_pics = A + B\nanswer = calculate_pics_per_album(total_pics, C)\nprint(answer)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef pictures(A, B, C):\n    return (A + B) // C\n\nprint(pictures(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef picture_numbers(a, b, c):\n  totalPictures = a + b\n  return totalPictures/c\n\npicture_numbers(A, B, C)",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pictures(A,B,C):\n  return (A+B)//C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef albums():\n  pictures = A + B\n  return int(pictures/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics (A, B, C):\n  return (A+B)//C\n\nprint(album_pics(A, B, C))",
          "\nAnswer = (A + B ) / C"
        ],
        [
          "\n\ndef uploadedPictures(A, B, C): \n  totalPictures = A + B \n  picturesPerAlbum = totalPictures // C \n  return picturesPerAlbum",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef albumShare():\n  numAlbums = 3\n  numPics = A + B\n  return numPics / numAlbums\n\nprint(albumShare())",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pics_albums(A,B,C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef totalPicAlbums():\n  A = int(input(\"Enter a number of pictures from her phone: \"))\n  B = int(input(\"Enter a number of pictures from her camera: \"))\n\n  total = A + B\n  C = int(input(\"Enter a number of albums: \"))\n  \n  picsPerAlbum = int(total/C)\n  return f\"The number of pictures per album is {pics",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_photos(a, b, c):\n  return (a+b)//c\n\nprint(album_photos(A, B, C))",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albums(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef albumPics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albumPics(A, B, C): \n  x = A + B\n  return int(x / C)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef get_albums_number(pictures_number):\n  return pictures_number // C\n\n#For example: \nA = 10\nB = 25\nC = 5\n\nprint(get_albums_number(A + B)) # returns 7",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef photoAlbums(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C): \n  return int((A+B)/C)",
          "\n\nAnswer = A + B/C"
        ],
        [
          "\n\ndef albumPicCount(a,b,c):\n  return (a+b)/c\n\nalbumPicCount(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef total_pics(A, B, C):\n  return (A + B)/C\n\nprint(total_pics(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef find_albums(A, B, C):\n  total_pics = A + B\n  pics_per_album = total_pics // C\n  return pics_per_album\n\n# Call the function \nfind_albums(A, B, C)",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef album_pictures(a,b,c):\n\treturn int((a+b)/c)\n\t\nprint(album_pictures(A,B,C))",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef numPics(A, B, C):\n  return (A+B)//C\n  \nAnswer: (A+B)//C",
          "\n\nAnswer = (A + B) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " Robin uploaded 35 pictures from her phone and 5 from her camera to facebook. If she sorted the pics into 5 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 8.0,
      "index": 301
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.94644784927368,
      "templates": [
        "Kaleb had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Kaleb had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_toys(A, B, C):\n\ttoys = (A + B) // C\n\treturn toys",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef toys(A, B, C):\n    return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef total_toy_amount(A, B):\n C = (A + B) // 1 \n return C\n \ntoys = total_toy_amount(A, B) \nprint(\"Kaleb could buy\", toys, \"toys.\")",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toyPriceCalc(A, B, C):\n  totalMoney = A + B\n  numToys = totalMoney // C\n  return numToys",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toyCalculator(A, B, C):\n  total = A + B\n  return total//C \n\nprint(toyCalculator(20, 30, 10))\n# 3",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_cost(A, B, C):\n    total_money = A + B\n    num_toys = total_money // C\n    return num_toys",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B):\n  C = (A + B) // toys\n  return C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateToyPrice(A, B):\n    C = (A + B) / 3\n    return C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef new_toys(A, B, C):\n  return (A+B)//C\n\nprint(new_toys(20, 10, 5))",
          "\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef TotalMoney(A, B):\n  C = A + B\n  return C // 3\n    \ntotal_toys = TotalMoney(A, B)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toy_calculator(A, B):\n  C = (A + B) / 2\n  return C // 1\n\nprint(toy_calculator(A, B))",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef savings_calculator(A,B,C):\n  return (A+B)//C\n  \nprint(savings_calculator(100,50,20)) #returns 8",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys(A, B, C): \n    return (A + B) // C",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef toy_calculator(A, B, C):\n  total_dollars = A + B\n  num_toys = total_dollars // C\n  return num_toys",
          "\nAnswer = (A+B) \u00f7 C"
        ],
        [
          "\n\ndef buyToys(A, B):\n  return (A + B) / C",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef getTotalToys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef numToy(A, B):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys_calc(A, B):\n  total_dollars = A + B    \n  return total_dollars / C  \n \n# A is Kaleb's saved amount\n# B is Kaleb's allowance\n# C is the cost of the toys",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculate_number_toys(A, B):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toyCalc(A, B):\n  total = A + B\n  return total // C \n  \n # total is the total amount of money, C is the cost of the toy",
          "\n\nAnswer = A + B / C"
        ],
        [
          " \n\ndef toy_cost(A,B): \n    total_money = A + B\n    toys_cost = total_money // C\n    return toys_cost \n\nprint(toy_cost(A,B,C))",
          "\nAnswer = A+B / C"
        ],
        [
          "\n\ndef toys(A,B):\n  return (A+B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef toy_calculator(A, B):\n  C = (A + B) // 5\n  return C",
          "\nAnswer = A+B/C"
        ],
        [
          "\n\n\ndef buyToys(a,b):\n  return (a+b) / c",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef ToyCalculation(A,B,C): \n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb had saved up 21 dollars. If he received another 15 dollars for his allowance, how many 6 dollar toys could he buy? ",
      "final_answer": 6.0,
      "index": 302
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 44.549943923950195,
      "templates": [
        "Olivia was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a Python function that returns the answer.",
        "Olivia was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_num_bags(A, B, C): \n  return min(B//A, C//A) \n  \nprint(calculate_num_bags(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n    return min(B//A, C//A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef make_baggies(a, b, c):\n  return min(b // a, c // a)",
          "\nAnswer = \u230a(A*(B + C))/A\u230b"
        ],
        [
          "\n\ndef num_baggies(A, B, C): \n    return min(B//A, C//A)",
          "\n\nAnswer = (B + C) /A"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n    return min(B//A, C//A)",
          "\nAnswer = (A*(B+C))/A"
        ],
        [
          "\n\ndef num_baggies(A, B, C): \n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_baggies(A,B,C):\n  total_cookies = B + C\n  return total_cookies // A \n\nprint(num_baggies(A,B,C))",
          "\nAnswer = A * (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_baggies(a,b,c):\n  total_cookies = b + c\n  num_baggies = total_cookies / a \n  return num_baggies\n\nprint(calculate_baggies(A,B,C))",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef num_baggies(A,B,C): \n    return min(B//A, C//A)\n    \nnum_baggies(A,B,C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n    total = B + C\n    baggies = total // A\n    return baggies",
          "\n\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n  return (B+C)//A\n\nmake_baggies(A, B, C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = floor(A/(B + C))"
        ],
        [
          "\n\ndef cookieBaggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef cookie_baggies(A, B, C):\n  return min(B // A, C // A)",
          "\n\nAnswer =floor(A/(B+C))"
        ],
        [
          "\n\ndef number_of_baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef make_baggies (a, b, c):\n  total_cookies = b+c\n  baggies = total_cookies // a\n  return baggies \nprint(make_baggies(3, 10, 15))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (B+C) / A"
        ],
        [
          "\n\ndef calculate_baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = floor(A/(B+C))"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n    num_baggies = min(B // A, C // A)\n    return num_baggies",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(a, b, c):\n  cookies = b + c\n  baggies = cookies // a\n  return baggies",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(a, b, c):\n   baggies_total = min(b, c) // a\n   return baggies_total\n\nprint(baggies(A, B, C))",
          "\nAnswer = A * (B + C) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n  return min(B//A, C//A) \n\nprint(baggies(3, 12, 9)) \n# Output: 6",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef num_of_baggies(A,B,C):\n  return (B + C) // A\n  \nprint(num_of_baggies(A,B,C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n  return min(B//A, C//A)",
          "\n\nAnswer = A * (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Olivia was making baggies of cookies with 9 cookies in each bag. If she had 13 chocolate chip cookies and 41 oatmeal cookies, how many baggies could she make? ",
      "final_answer": 6.0,
      "index": 303
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 38,
      "duration": 38.04392218589783,
      "templates": [
        "Luke made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Luke made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef last_lawn_cash(A, B, C): \n    return (A + B) / C",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef money_lasted(A, B, C):\n  return (A + B) / C\n\nprint(money_lasted(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts (A,B,C):\n  return (A + B) / C\n\nanswer = money_lasts(A,B,C)\nprint (answer)",
          "\n\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef spending_time(A, B, C):\n    return (A + B) // C\n\nprint(spending_time(A, B, C))",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_lasts(A,B,C):\n  return (A + B) // C\n\nprint(money_lasts(10, 5, 2))\n# Output: 8",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasted(A, B, C):\n  return int((A + B) / C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_length(A, B, C): \n  return (A + B) // C\n\nmoney_length(20, 15, 5) \n\nThis would return 9 weeks.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasting(A, B, C):\n    return (A + B) // C\n\nprint(money_lasting(48, 50, 10)) # returns 11 weeks",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C): \n  return (A+B) // C\n\nprint (money_lasts(10, 5, 3))\n# Returns 5",
          "\n\nAnswer = (A + B) / C weeks"
        ],
        [
          "\n\ndef lengthMoneyLast(A, B, C):\n  return (A + B) // C\n  \n# For example, if he made $20 mowing lawns, $10 weed eating, and spent $5 a week:\ntotalMoney = lengthMoneyLast(20, 10, 5)\nprint(totalMoney) # 7 weeks",
          "\n\nAnswer = (A+B)/C weeks"
        ],
        [
          "\n\ndef calculate_time(a, b, c):\n  total = a + b\n  time = total / c\n  return time\n\nprint(calculate_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_weeks(A, B, C):\n    total_dollars = A + B\n    return total_dollars // C\n\nprint(calculate_weeks(20, 15, 5))\n\nThis should print 7, indicating that the money would last him 7 weeks.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n\ttotal_dollars = A + B\n\tnum_weeks = total_dollars // C \n\treturn num_weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_money_weeks(A,B,C):\n  total_amount = A + B\n  return total_amount/C\n\nprint(calculate_money_weeks(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  return (A + B) / C\n\n#Test\nmoney_lasts(50, 25, 5)\n#Answer: 10 weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef num_of_weeks(A, B, C):\n  return (A+B)//C\n  \n#Example\nnum_of_weeks(80,20,10)\nreturn 8",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateWeeks(a,b,c):\n  total = a + b\n  weeks = total / c\n  return weeks",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n    return (A + B) // C  # Floor division to find the integer answer\n    \n#Example\nmoney_lasts(100, 50, 10) # Would return 10 weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long(A, B, C):\n  total_money = A + B\n  return total_money / C\n\nprint(how_long(A, B, C))",
          "\n\nAnswer = (A + B) / C;"
        ]
      ]
    },
    "source": {
      "question": " Luke made 9 dollars mowing lawns and 18 dollars weed eating. If he only spent 3 dollar a week, how long would the money last him? ",
      "final_answer": 9.0,
      "index": 304
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 47.73634910583496,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef groupDivide(a, b, c):\n    totalPlayers = a + b\n    groups = int(totalPlayers / c)\n    return groups",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef group_numbers(A, B, C):\n  total_players = A + B\n  number_of_groups = total_players // C\n  return number_of_groups\n\nprint(group_numbers(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef group_number(A, B, C):\n  return (A + B) // C\n\nprint(group_number(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a, b, c): \n  return (a + b) // c\n\nprint(num_groups(5, 8, 3))\n\nThe answer is 4.",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef group_number(a, b, c):\n    return ((a + b) // c)",
          "\nAnswer = (A+B) \u00f7 C"
        ],
        [
          "\n\ndef no_of_groups(A, B, C):\n  return (A + B) // C\n  \n# Call the function with parameters\nno_of_groups(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(a, b, c): \n     return (a + b) // c \n \ngroups(a, b, c)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_count(A, B, C):\n    total_players = A + B\n    return total_players // C\n\nprint(group_count(15, 10, 5))\n# Output: 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(A, B, C):\n    return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_maker(A, B, C):\n  num_groups = (A+B)//C\n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_calculator(A, B, C):\n    return (A + B) // C\n\ngroup_calculator(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a, b, c):\n  return (a + b) // c\n\nprint(num_groups(2, 4, 3))\n#Output: 2",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n    total_players = A + B \n    groups = total_players // C\n    remainder = total_players % C\n    if remainder > 0:\n        groups += 1\n    return groups",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef groups(A, B, C): \n  return (A + B) // C\n\ngroups(5, 10, 8)\n\n# This function will return 3 groups.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef baseballTeamGroups(A, B, C):\n  return (A + B) // C \n\nprint (baseballTeamGroups(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n    return (A + B) // C\n\nprint(calculate_groups(3, 5, 4))\n# Output: 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  total_players = A + B\n  groups = total_players // C\n  return groups",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef baseball_groups (A, B, C):\n  total_players = A + B\n  num_groups = total_players // C\n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C):\n  total_players = A + B\n  return total_players // C\n  \nprint(number_of_groups(4, 8, 5))  # Returns 3",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculate_groups(a, b, c):\n    total_players = a + b\n    groups = total_players // c\n    remainding_players = total_players % c\n    if remainding_players > 0:\n        groups += 1\n    return groups\n\ncalculate_groups(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef find_groups(A, B, C):\n    total = A + B\n    return total // C\n\n# Test\nfind_groups(15, 10, 5)\n# Output: 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef num_of_groups(a, b, c):\n    result = (a + b) // c\n    return result\nprint(num_of_groups(a, b, c))",
          " \nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n    return (A + B) // C\n\nprint(calculate_groups(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  total = A + B\n  if total % C == 0:\n    return total // C\n  else:\n    return total // C + 1\n\n#Example with A = 10, B = 5, and C = 4\n\ncalculate_groups(10, 5, 4) \n# Output: 4",
          "\nAnswer = A+B/C"
        ],
        [
          "\n\ndef num_groups(a, b, c):\n  total_players = a + b \n  groups = total_players // c \n  return groups",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 48 new players and 6 returning players. If the coach put them into groups with 6 players in each group, how many groups would there be? ",
      "final_answer": 9.0,
      "index": 305
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 50.328383922576904,
      "templates": [
        "For a birthday party Jerry bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a Python function that returns the answer.",
        "For a birthday party Jerry bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelves_needed(A, B, C):\n   shelves_needed = (A + B) // C\n   return shelves_needed\n   \nprint(shelves_needed(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef sodas_shelves(A,B,C):\n  return (A//C)+(B//C)",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef refrigerator(A, B, C): \n    return (A // C) + (B // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled_up(a, b, c):\n  return (a//c + b//c)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    total_sodas = A + B\n    shelves = total_sodas // C\n    if total_sodas % C != 0:\n        shelves += 1\n    \n    return shelves\n\ncalculate_shelves(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A + B) // C\n\n#Test\nprint(calculate_shelves(6, 4, 3)) #Answer: 2",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef shelves(A,B,C):\n    return math.ceil((A+B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_party_shelves(A, B, C):\n  return math.ceil((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef fridgeShelves(A, B, C):\n    shelves = (A + B) // C\n    return shelves",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesFilled(A, B, C): \n  return (A + B) // C\n\nshelvesFilled(7, 3, 4)\n# Output: 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A // C) + (B // C) + (A % C + B % C) // C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n  \n# example\nshelves(15, 15, 4)\n# returns 5 (15 regular plus 15 diet divided by 4 sodas per shelf)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n    return (A // C + B // C + (A % C + B % C > 0))\nprint(shelves(A, B, C))",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C): \n  total_sodas = A + B\n  shelves_needed = total_sodas // C\n  if total_sodas % C != 0:\n    shelves_needed += 1\n  return shelves_needed\n\nprint(num_shelves(4, 10, 3)) # Answer: 4 shelves",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef JerrysShelves(A, B, C):\n  return (A//C + B//C + (A % C + B % C) // C + (A % C + B % C) % C)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  return ((A + B)//C) + (1 if (A + B) % C > 0 else 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef sodashelves(A, B, C): \n    return (A//C + B//C + (A % C + B % C)//C)\n\nprint(sodashelves(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  num_shelves = (A + B) // C\n  return num_shelves",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelvesForParty(A,B,C):\n  return (A + B) // C\t\t\t//Number of shelves",
          "\n\nAnswer = (A +B)/C"
        ],
        [
          "\n\ndef fridge_shelves(A,B,C):\n\treturn math.ceil((A + B) / C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(3, 5, 4))\n# Output: 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(a, b, c):\n    return (a//c) + (b//c)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelvesFilled(A, B, C):\n  return math.ceil((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef jerry_soda(A, B, C):\n  return (A//C + B//C + (A%C+B%C)//C)\n\nprint(jerry_soda(10, 5, 3)) \n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesFilled(A, B, C):\n  return (A + B) // C\n\n#Call the function\nshelvesFilled(12, 18, 4) \n# Output: 6",
          "\n\nAnswer = A/C + B/C"
        ]
      ]
    },
    "source": {
      "question": " For a birthday party Jerry bought 41 regular sodas and 22 diet sodas. If his fridge would only hold 9 on each shelf, how many shelves would he fill up? ",
      "final_answer": 7.0,
      "index": 306
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 18,
      "duration": 15.86973524093628,
      "templates": [
        "Paige and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Paige recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Paige and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Paige recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0,
        64.0,
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef recycling_points(A, B, C):\n  return A*(B+C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n  return (A*B + A*C)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef points(A, B, C): \n  return (A*B + A*C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recyclePoints(A, B, C):\n  return A*(B+C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycler_points(A, B, C):\n    return (A*B)+(A*C)",
          "\n\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef recycle_points(A,B,C):\n  points = (B + C) / A\n  return points",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef total_points(A, B, C): \n  return (B + C) / A",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef paper_recycling(A, B, C):\n  return (B + C) / A\n\ntotal_points = paper_recycling(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef get_points(A, B, C):\n  total_points = (B + C) / A\n  return total_points",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Paige and her friends were recycling paper for their class. For every 4 pounds they recycled they earned one point. If Paige recycled 14 pounds and her friends recycled 2 pounds, how many points did they earn? ",
      "final_answer": 4.0,
      "index": 307
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 58.54391407966614,
      "templates": [
        "For homework Nancy had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a Python function that returns the answer.",
        "For homework Nancy had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef total_homework_time(A, B, C):\n\treturn (A + B)/C\n\nprint(total_homework_time(50, 25, 5)) # will return 10 minutes",
          "\nAnswer = (60 min / C) * (A + B)"
        ],
        [
          "\n\ndef finish_problems(A, B, C):\n  return (A + B)/C\n\nanswer = finish_problems(A, B, C)\nprint(\"It will take Nancy {} hours to finish all the problems.\".format(answer))",
          "\n\nAnswer = B/(C/A) hours"
        ],
        [
          "\n\ndef problem_time(a, b, c):\n  total_time = a + b + c\n  return \"It will take Nancy \" + str(total_time) + \" minutes to finish all the problems.\"\n\nprint(problem_time(20, 10, 1))\n# Output: It will take Nancy 31 minutes to finish all the problems.",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef timeTaken(A, B, C):\n  totalTime = A + B + C\n  return totalTime\n\nprint(timeTaken(5, 10, 10))",
          "\nAnswer = A/C + B/C + C"
        ],
        [
          "\n\ndef problems_time(a, b, c):\n    total_problems = a + b + c \n    total_time = total_problems * (1/c)\n    return total_time\n\nprint(problems_time(2, 3, 4)) #should return 1.75",
          "\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef time_to_complete(a, b, c): \n    return (a + b)/c\n\nprint(time_to_complete(A, B, C))",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef nancys_homework(a, b, c):\n  return (a + b) / c\n  \nprint(nancys_homework(2, 8, 4)) # Output: 3",
          "\n\nAnswer = ((A + B) / C) * 60 minutes"
        ],
        [
          "\n\ndef calculateHours(a, b, c):\n  return (a + b) / c\n\nprint(calculateHours(A, B, C))",
          "\nAnswer = A + B + C \u00f7 3"
        ],
        [
          "\n\ndef time_to_complete(a,b,c):\n  return (a+b)/c\n\nprint(time_to_complete(A,B,C))",
          "\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef Nancy_Time(A, B, C):\n  total_problems = A + B + C\n  time = total_problems * 60\n  return time\n\nanswer = Nancy_Time(10, 5, 4)\nprint(\"Nancy will need \" + str(answer) + \" minutes to complete all her problems.\")",
          "\n\nAnswer = 1 hour + (A + B) / C"
        ],
        [
          "\n\ndef time_to_finish_hw(A, B, C):\n  total_problems = A + B + C\n  return total_problems * 60 / C",
          "\n\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef homework_time(A, B, C):\n  return A / C + B / C\n\nprint(homework_time(5, 10, 8))\n# Output: 2.5",
          "\n\nAnswer = A + B + C / 1 Hour"
        ],
        [
          "\n\ndef homework_time(A, B, C):\n  total_problems = A + B + C\n  time_taken = total_problems / C\n  return time_taken\n\nprint(homework_time(A, B, C))",
          "\nAnswer = (A+B+C)/1 hour"
        ],
        [
          "\n\ndef get_total_time(a, b, c):\n  total_time = (a+b)/c\n  return total_time\n\nprint(get_total_time(4, 6, 2))\n#Output: 5.0",
          "\n\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef timeForProblems(A, B, C):\n  total_time = A + B + C\n  return total_time\n  \nprint(timeForProblems(2, 5, 1)) # Output: 8",
          "\nAnswer = (A + B + C) / 1 h"
        ],
        [
          "\ndef homework_time(a,b,c):\n  return a/c + b/c\n\nprint(homework_time(A,B,C))",
          "\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef calculateTime(A, B, C):\n  totalProblems = A + B + C\n  timeToFinish = totalProblems / C\n  return timeToFinish\n\nprint(calculateTime(3, 5, 2)) # This will print 4.5",
          "\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef calculate_time_taken(A, B, C):\n    total_problems = A + B + C\n    time_taken = total_problems / C\n    return time_taken\n\nanswer = calculate_time_taken(2, 3, 4)\nprint(answer) # 1.5 hours",
          "\nAnswer = A + B + C / 60"
        ],
        [
          "\n\ndef total_problems (a, b, c):\n  return (a + b + c) / 1\n\nprint(total_problems(a,b,c))",
          "\nAnswer = A + B + C / 60"
        ],
        [
          "\n\ndef time_needed(A, B, C):\n  total_problems = A + B + C\n  time = total_problems / C\n  return time\n\nprint(time_needed(3, 5, 10))  # 1.8",
          "\nAnswer = A + B + C hours"
        ],
        [
          "\n\ndef get_time(A, B, C): \n  total_time = (A + B) / C \n  return total_time\n\nprint(get_time(A, B, C))",
          "\n\nAnswer = (A + B + C) / 1h"
        ],
        [
          " \n\ndef homework_time(A, B, C):\n  total = A + B\n  return total/C\n\nprint(homework_time(A, B, C))",
          "\n\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef find_time(A, B, C):\n  total_time = A + B + C\n  return total_time\n\nprint(find_time(30, 30, 1))\n# Output: 61",
          "\n\nAnswer = A + B + C / 60 minutes"
        ],
        [
          "\n\ndef TimeToFinish(A, B, C):\n    return A / C + B / C\n\n# Example answer:\ntime = TimeToFinish(2, 5, 1)\nprint('It will take Nancy ' + str(time) + ' hours to finish all the problems.')",
          "\n\nAnswer = (A + B + C)/1 hour"
        ],
        [
          "\n\ndef get_homework_duration(math_problems, spelling_problems, other_problems, hour):\n    total_problems = math_problems+spelling_problems+other_problems\n    if total_problems == 0:\n        return 0\n    else:\n        return hour * (total_problems/other_problems)\n\nprint(get_homework_duration(A, B, C,",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ]
      ]
    },
    "source": {
      "question": " For homework Nancy had 17 math problems and 15 spelling problems. If she can finish 8 problems in an hour how long will it take her to finish all the problems? ",
      "final_answer": 4.0,
      "index": 308
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 45.73569321632385,
      "templates": [
        "Will was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "Will was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_pages(new_cards, old_cards): \n  total_cards = new_cards + old_cards\n  return math.ceil(total_cards/A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef pagesForBinder(newCards, oldCards):\n    return round(newCards / A) + round(oldCards / A)",
          "\n\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef num_pages(B, C):\n  return ((B + C) // A) + 1",
          "\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef num_pages(B,C):\n  return math.ceil((B+C)/A)",
          "\n\nAnswer = A + (B + C) / A"
        ],
        [
          "\n\ndef organize_cards(new_cards, old_cards): \n  total_cards = new_cards + old_cards\n  pages_needed = total_cards // A + ((total_cards % A == 0) ? 0 : 1)\n  return pages_needed",
          "\nAnswer = (A x B) + C"
        ],
        [
          "\n\ndef baseball_cards(b, c):\n    pages = b // A\n    if b % A > 0:\n        pages += 1\n    \n    pages += c // A\n    if c % A > 0:\n        pages += 1\n        \n    return pages\n\nprint(baseball_cards(B, C))",
          "\nAnswer = roundup(A + B/C)"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n    total_cards = new_cards + old_cards\n    return math.ceil(total_cards / A)",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef size_binder(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  num_pages = total_cards / A\n  if total_cards % A > 0:\n    num_pages += 1\n  return num_pages",
          "\nAnswer = A + (B + C - 1)/A"
        ],
        [
          "\n\ndef baseball_cards(B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = INT[(B + C) / A]"
        ],
        [
          "\n\ndef num_pages(b, c):\n  pages = (b + c) // A\n  if (b + c) % A != 0:\n    pages += 1\n  return pages",
          "\nAnswer = B+C\u00f7A"
        ],
        [
          "\n\ndef pages(B, C):\n  return B + C // 9 + 1",
          "\nAnswer = ((B+C)/A)+1"
        ],
        [
          "\n\ndef number_of_pages(b, c):\n    return (b + c) // A + 1  # ceiling division (1 for remainder)",
          "\nAnswer = A + (math.ceil(B/C))"
        ],
        [
          "\n\ndef baseball_binder(b, c):\n  num_pages = (b + c)//A\n  return num_pages",
          "\n\nAnswer = (B/A) + C"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages = total_cards // 15\n  if total_cards % 15 > 0:\n    pages += 1\n  return pages",
          "\n\nAnswer = Ceiling(B/A) + Ceiling(C/A)"
        ],
        [
          "\n\ndef baseballBinder(B, C): \n  return (B + C) // A + 1",
          "\nAnswer = B + (C/A)"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n  return math.ceil((new_cards + old_cards) / A)",
          " \nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_pages(new_cards, old_cards):\n  return (int(new_cards / A) + int(old_cards / A))\n\nprint(calculate_pages(B, C))",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef pageCalc(b, c):\n  total = b + c\n  numPages = total // A\n\n  if (total % A > 0):\n    numPages += 1\n  \n  return numPages",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef binder_pages(b, c):\n  pages = (b + c) // A\n  if (b + c) % A > 0:\n      pages += 1\n  return pages",
          "\n\nAnswer = A + (B + C) / A"
        ],
        [
          "\n\ndef baseball_cards(b, c):\n    pages = (b+c)//A\n    if (b+c)%A != 0:\n        pages += 1\n    return pages",
          "\n\nAnswer = \u2308B/A\u2309 + C"
        ],
        [
          "\n\ndef calc_pages(new_cards, old_cards):\n    page_count = (new_cards + old_cards) // A\n    if (new_cards + old_cards) % A != 0:\n        page_count += 1\n    return page_count",
          "\n\nAnswer = A + B/C"
        ]
      ]
    },
    "source": {
      "question": " Will was organizing his baseball cards in a binder with 3 on each page. If he had 8 new cards and 10 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 6.0,
      "index": 309
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 44.34649181365967,
      "templates": [
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a Python function that returns the answer.",
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_groups(A,B,C):\n  return (A + B)//C\n\nprint(num_of_groups(A,B,C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef get_groups(A, B, C): \n  num_groups = min(A, B) // C\n  return num_groups",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  return (A + B) // C\n\nprint(groups(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a, b, c):\n    num_groups = min(a, b, c)\n    return num_groups\n\nprint(num_groups(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(boys, girls, size):\n  total = boys + girls\n  groups = total // size\n  remainder = total % size\n  totalGroups = groups + 1 if remainder > 0 else groups\n \n  return totalGroups\n\nprint(numGroups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef compute_num_groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debateTeamGroups(A, B, C):\n    total = A + B\n    groups = total // C\n    remainder = total % C\n    if remainder > 0:\n        return groups + 1\n    else:\n        return groups\n\nprint(debateTeamGroups(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return min(A//C, B//C) + int(A % C > 0) + int(B % C > 0)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups(a, b, c): \n  return (a//c) + (b//c) + (a%c + b%c > 0) \n\nprint(groups(A, B, C))",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          " \n\ndef calculateGroups(a, b, c):\n  return (a + b) // c \n  \n#Example Usage \ncalculateGroups(3, 4, 2) \n\n#Returns 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_groups(A, B, C): \n  return A//C + B//C + (A%C + B%C)//C + (A%C + B%C) % C\n\nprint(calc_groups(A, B, C))",
          " \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debateteam(A,B,C):\n    return A // C + B // C + (A % C + B % C) // C\n\nprint(debateteam(A,B,C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calc_groups(A, B, C):\n    return (A + B) // C\n    \nprint(calc_groups(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef divideThem(A, B, C):\n    if A % C == 0 and B % C == 0:\n        return int(A/C) + int(B/C)\n    elif A % C == 0 and B % C != 0:\n        return int(A/C) + int(B/C) + 1\n    elif A % C != 0 and B % C == 0:\n        return int(A",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef teamSplit(A, B, C):\n  return (A // C) + (B // C) + (A % C > 0 and B % C > 0)",
          "\nAnswer = (A+B) \u00f7 C"
        ],
        [
          "\n\ndef getNumGroups(A,B,C):\n    return (A + B) // C\n\nprint(getNumGroups(4,3,2)) # prints 3",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef debate_team(A, B, C):\n  total_groups = (A + B) // C\n  return total_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C): \n  return (A + B)//C \n\nprint(numGroups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debateteam(A, B, C):\n  return (A + B)//C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n    return (A//C + B//C + (A % C + B % C)//C)\n\nprint(groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a, b, c):\n  return (a + b) // c\n\nprint(num_groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " The schools debate team had 11 boys and 45 girls on it. If they were split into groups of 7 how many groups could they make? ",
      "final_answer": 8.0,
      "index": 310
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 49.8882212638855,
      "templates": [
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a Python function that returns the answer.",
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) // A\n\n# If A = 10, B = 15, and C = 20\nprint(chicken_wings(10, 15, 20)) # Answer: 4",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef get_wings_each(total_wings, num_friends):\n    return total_wings // num_friends",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef get_chicken_wings(A, B, C):\n  total = B + C\n  return total / A\n\nprint(get_chicken_wings(4, 8, 4))\n# Output: 4",
          "\nAnswer = (A+C)/A"
        ],
        [
          "\n\ndef equalChickenWings(a, b, c):\n  return ((b+c) // a)\n\nprint(equalChickenWings(a, b, c))",
          "\nAnswer = (A*B/A)+C/A"
        ],
        [
          " \n\ndef chickenWings(a, b, c):\n  numWings = (b + c) // a\n  return numWings\n\nprint(chickenWings(a, b, c))",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings (a,b,c):\n  total_wings = b + c\n  return total_wings // a\n\nprint(chicken_wings (a,b,c))",
          "\nAnswer = (A * B)/C"
        ],
        [
          "\n\ndef chicken_per_person(a, b, c):\n    total_num_of_wings = b + c\n    num_per_person = total_num_of_wings // a\n    return num_per_person\n\nprint(chicken_per_person(A, B, C))",
          "\nAnswer = (A x B) / C"
        ],
        [
          "\n\ndef chickenWings(A, B, C):\n  return (B + C) // A\n  \n# Example \nprint(chickenWings(5, 10, 4))\n# Output: 4",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef divide_pub_grub(num_wings, num_friends):\n  return num_wings // num_friends\n\nnum_wings = B + C\nnum_friends = A\n\nanswer = divide_pub_grub(num_wings, num_friends)\n\nprint(\"Each person will get {} chicken wings.\".format(answer))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B+C) // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef wings_per_person(a, b, c):\n  total_wings = b + c\n  return total_wings // a\n\nprint(wings_per_person(8,19,7))\n# Prints 4",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    total_wings = B + C \n    return total_wings // A\n\nprint(chicken_wings(A, B, C))",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef div_wings(a, b, c):\n  return (b+c)/a\n\nprint(div_wings(a, b, c))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(a,b,c):\n    return ((b+c) // a)\n\nprint(chicken_wings(a,b,c))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef wings_per_person(A, B, C):\n  return (B + C)/A\n\nprint(wings_per_person(6, 8, 12))\n# Output: 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_wings(A, B, C):\n    return int((B + C) / A)",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef divide_chicken_wings(A, B, C):\n  total_wings = B + C\n  return total_wings // A\n\n# Note: // denotes Integer Division, providing a result without any remainders. This has importance because chicken wings cannot be divided by fractions or remainders.",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef equal_wings(A, B, C):\n    return (B + C) // A\n\nprint(equal_wings(10, 20, 30))\n# 10",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef get_total(a, b, c): \n    return ((b + c) // a)\n\nprint(get_total(A, B, C))",
          "\nAnswer = (A \u00d7 B) / C"
        ],
        [
          "\n\nA = int(input(\"Enter number of friends: \"))\nB = int(input(\"Enter number of chicken wings already cooked: \"))\nC = int(input(\"Enter number of chicken wings cooked for the group: \"))\n\ndef chicken_wings(A, B, C):\n  wings_per_person = (B + C)/A\n  return wings_per_person\n\nprint(chicken_wings(A, B, C",
          "\nAnswer = (A+C)/A"
        ],
        [
          "\n\ndef shareChickenWings(a, b, c):\n  totalWings = b + c\n  numPerPerson = totalWings // a\n  return numPerPerson\n  \nprint(shareChickenWings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef wings(A,B,C):\n  return (B+C) // A\n\nprint(wings(A,B,C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef equal_shares(A, B, C):\n    total_wings = B + C\n    return total_wings // A\n\nequal_shares(A, B, C)",
          " \nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n        return (B + C) // A\n    \nprint(chicken_wings(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef wings_per_person(A, B, C):\n    return (B + C) // A\n\nprint('Each person would get ' + str(wings_per_person(A, B, C)) + ' wings.')",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " A group of 4 friends went into a restaurant. The chef already had 9 chicken wings cooked but cooked 7 more for the group. If they each got the same amount how many would each person get? ",
      "final_answer": 4.0,
      "index": 311
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 60.58496403694153,
      "templates": [
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a Python function that returns the answer.",
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef vases_needed(A, B, C):\n  return 1 + (B // A) + (C // A)",
          "\n\nAnswer = (A/ (B+C))"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (A \\* B) + (A \\* C)"
        ],
        [
          "\n\ndef num_vases(A,B,C):\n  total_flowers = B + C\n  return total_flowers // A + (1 if total_flowers % A else 0)",
          "\n\nAnswer = (A * B)/(A +C)"
        ],
        [
          "\n\ndef num_vases(A, B, C):\n  return (B+C)//A  + (B+C)%A",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_vases(A, B, C): \n  return (B//A) + (C//A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef num_vases(A, B, C): \n  return (B//A + C//A + max(B % A, C % A)]",
          "\nAnswer = (A \\div (B+C)) + 1"
        ],
        [
          "\n\ndef numVases(A,B,C):\n  totalFlowers = B + C\n  numVases = math.ceil(totalFlowers / A)\n  return numVases",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numVases(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (A*B + A*C) / A"
        ],
        [
          "\n\ndef flowerVase(a, b, c):\n    totalFlowers = b + c\n    numVases = totalFlowers // a\n    if totalFlowers % a != 0:\n        numVases += 1\n    return numVases",
          "\nAnswer = (A \u00f7 (B + C)) + 1"
        ],
        [
          "\n\ndef numVases(A, B, C): \n  return (B / A) + (C / A)",
          "\nAnswer =  ceiling(A/(B+C))"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return (B // A) + (C // A) + ((B % A) + (C % A) > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return (B // A) + (C // A) + ((B % A) + (C % A) > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vases_required(a, b, c):\n  return (b//a) + (c//a) + ((b%a) + (c%a) > 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vases(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n\nprint(num_vases(A, B, C))",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vase_calc(A, B, C): \n  return (B//A + C//A + (B % A > 0) + (C % A > 0))",
          "\nAnswer = (A * B) + (A * C)"
        ],
        [
          "\n\ndef flower_vase(A,B,C):\n vases = ((B+C)//A)\n if ((B+C)%A > 0):\n  vases += 1\n return vases \n\nprint(flower_vase(A,B,C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef flowerVases(A, B, C):\n  \n  totalFlowers = B + C\n  vasesNeeded = int(totalFlowers / A)\n\n  if totalFlowers % A != 0:\n    vasesNeeded += 1\n    \n  return vasesNeeded",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vase_calculator(A, B, C):\n  if A > 0 and B > 0 and C > 0:\n    total_flowers = B + C\n    number_of_vases = total_flowers / A\n    return round(number_of_vases)\n  \n  else: \n    return \"Please enter valid inputs!\"",
          "\nAnswer = (A * B + A * C) / (A + B + C)"
        ],
        [
          "\n\ndef calculate_vases(A,B,C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef vase_calculator(A, B, C):\n  total_flowers = B + C\n  total_vases = total_flowers // A\n  if total_flowers % A > 0:\n    total_vases += 1\n  \n  return total_vases",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_vases(A, B, C):\n  total_flowers = B + C\n  num_vases = total_flowers // A\n  if total_flowers % A > 0:\n    num_vases += 1\n  return num_vases",
          "\n\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = A = B + C"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return int(ceil((B + C) / A))",
          "\nAnswer = (B/A)+(C/A)"
        ],
        [
          "\n\ndef num_vases(a, b, c): \n  return (b // a) + (c // a) + ((b % a + c % a) // a)",
          "\nAnswer = A divided by (B + C)"
        ],
        [
          "\n\ndef num_vases(A,B,C):\n  total_flowers = B+C\n  num_vases = total_flowers // A\n  if total_flowers % A > 0:\n     num_vases = num_vases + 1\n  return num_vases\n  \nprint(num_vases(A,B,C))",
          "\nAnswer = (B / A) + (C / A)"
        ]
      ]
    },
    "source": {
      "question": " A vase can hold 6 flowers. If you had 7 carnations and 47 roses, how many vases would you need to hold the flowers? ",
      "final_answer": 9.0,
      "index": 312
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 44,
      "duration": 48.593549966812134,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0
      ],
      "completions": [
        [
          "\n\ndef pet_adoption(A, B, C): \n    return (A + B) / C\n\n# Call the function\npet_adoption(A, B, C)",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pet_shelter(a, b, c):\n  total_puppies = a + b\n  days = total_puppies / c\n  return days\n\nprint(pet_shelter(a, b, c))",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef time_for_adoption(a, b, c):\n    total = a + b\n    days = total // c\n    \n    return f\"It will take {days} days for all of the puppies to be adopted.\"",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_days(A, B, C):\n return (A + B) / C\n\nprint(adoption_days(A, B, C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adopt_all_puppies(start, additional, rate):\n  total = start + additional\n  days = total / rate\n  return days\n\nprint(adopt_all_puppies(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption(A, B, C): \n  total = A + B\n  days = total // C\n  if total % C > 0:\n    days += 1\n  return days\n\nprint(adoption(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef time_till_adoption(A, B, C):\n  total_puppies = A + B\n  time_in_days = total_puppies // C\n  return time_in_days \n\nprint(time_till_adoption(10, 5, 3)) # Prints 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C): \n  totalPups = A + B\n  totalDays = totalPups / C \n  return totalDays \n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adoption_time(A, B, C):\n    total = A + B\n    time = total // C \n    return time\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef adoptAPuppy(A, B, C):\n  totalPuppies = A + B\n  days = totalPuppies // C \n  if totalPuppies % C > 0:\n    days += 1\n  return days\n\nprint(adoptAPuppy(A, B, C))",
          "\nAnswer = A+B/C"
        ],
        [
          "\n\ndef adopt_time(A, B, C):\n  total_puppies = A + B\n  days = total_puppies//C\n  if total_puppies%C != 0:\n    days += 1\n  return days\n\nprint(adopt_time(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  total = a + b\n  days = total/c\n  return days\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption_time(A,B,C):\n  return (A + B) / C\n\nprint(adoption_time(A,B,C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef num_of_days(A,B,C):\n    total_puppies = A + B \n    days = total_puppies // C\n    remaining_puppies = total_puppies % C\n    \n    if remaining_puppies > 0:\n        days += 1\n    \n    return days\n\nprint(num_of_days(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adopt_puppies(A, B, C): \n    total_pups = A + B\n    days = total_pups / C\n    return days\n\nanswer = adopt_puppies(A, B, C)\nprint(f\"It will take {answer} days to adopt all the puppies.\")",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef puppy_adoption(a, b, c):\n  total_puppies = a + b\n  days = total_puppies // c\n  return days\n\nprint(puppy_adoption(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_num_days(A,B,C):\n  return (A + B) // C\n\nprint(calculate_num_days(A, B, C))",
          "\n  \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateNumberOfDays(a, b, c):\n  totalPuppies = a + b\n  return totalPuppies / c\n\nnumberOfDays = calculateNumberOfDays(a, b, c)\nprint(\"It will take \" + str(numberOfDays) + \" days for all of the puppies to be adopted.\")",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef time_to_adopt(A, B, C): \n    return (A + B) // C",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef pet_shelter(A,B,C):\n  return (A + B) / C\n\n#Call the function\n\npet_shelter(A,B,C)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef adoption_time(puppies, new_puppies, adoption_rate):\n  total_puppies = puppies + new_puppies\n  result = total_puppies / adoption_rate\n  return result\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  total = A + B\n  return total / C\n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 9 puppies when another 12 were brought in. If 3 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 7.0,
      "index": 313
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 50.749521017074585,
      "templates": [
        "Roger was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Roger was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\n#Function to return the number of trips\ndef number_of_trips(A, B, C):\n  return B//A + C//A",
          "\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  total_trays = B + C\n  trips = total_trays // A\n  if total_trays % A != 0:\n      trips += 1\n  return trips\n\n# example\nprint(num_trips(5, 10, 8)) # 3",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numTrips(A,B,C):\n  return (B//A) + (C//A) + (B%A>0) + (C%A>0)",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          " \n\ndef number_of_trips(a, b, c): \n  return (b + c) // a + (b + c) % a\n\nprint (number_of_trips(A, B, C))",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B // A) + (C // A) + (B % A) + (C % A)",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef calculate_trips(A, B, C): \n  return (B+C)//A + 1 if (B+C)%A else (B+C)//A",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef num_trips(a, b, c): \n  return (b + c) // a + int((b + c) % a != 0)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C)//A + (((B + C) % A) > 0)",
          "\nAnswer =  (A + B + C) \u00f7 A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n    return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A + B) + (A + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B,C):\n  return (B+C)//A  if (B+C) //A == 0 else (B+C)//A +1",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef calculateTrips(a, b, c):\n  return (b + c) // a + (b + c) % a\n\nprint(calculateTrips(A, B, C))",
          "\nAnswer = (A+B)+(A+C)"
        ],
        [
          "\n\ndef trips(A, B, C): \n  return (B + C) // A + ((B + C) % A != 0)\n  \ntrips(A, B, C)",
          "\n\nAnswer = (A * B) + (A * C)"
        ],
        [
          "\n\ndef num_trips(a, b, c):\n  return (b + c) // a + (b + c) % a\n\n#call the function\nnum_trips(a, b, c)",
          "\nAnswer = (A+B)/A + (A+C)/A"
        ],
        [
          " \n\ndef numTrips(a,b,c):\n    return math.ceil((b+c)/a)\n\nnumTrips(A, B, C)",
          "\nAnswer = A + (B + C - A) / A"
        ],
        [
          "\n\ndef trays(A, B, C):\n    return (B + C) // A + ((B + C) % A > 0)\n\nprint(trays(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef trips_calculator(a, b, c):\n    total_trays = b + c\n    trips = total_trays // a\n    if total_trays % a > 0:\n        trips += 1\n    return trips\n\ntrips = trips_calculator(A,B,C) \nprint(\"Roger will make %d trips.\" % trips)",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\ndef numTrips(A, B, C):\n  return (B + C) // A + ((B + C) % A)",
          "\nAnswer = (A+B)+(A+C)"
        ],
        [
          "\n\ndef pick_up_trays(A, B, C):\n  return (B + C) // A + (B + C) % A\n\nprint(pick_up_trays(A, B, C))",
          "\n\nAnswer = (A + B) / A + (A + C) / A = (B + C) / A"
        ],
        [
          " \n\ndef numTrips(A, B, C):\n  trips = 0\n  if B%A > 0:\n    trips += 1\n  if C%A > 0:\n    trips += 1\n  trips += (B//A + C//A)\n  return trips\n\nprint(numTrips(2, 5, 7))\n# Output: 4",
          "\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_of_trips(a,b,c): \n  return (a+b+c)//a\n\nprint(num_of_trips(3,4,5))\n# Prints 3",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n  return (B + C) // A + (B + C) % A\n\n# where // denotes integer division, i.e. 'divide A into B and C' \n# and % denotes modulo, i.e. 'the remainder when B and C are divided by A' \n# (in other words, extra trips if there are any trays remaining that he can't",
          "\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C):\n  return (B+C)//A + min((B+C)%A, 1)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(a,b,c):\n  return (b+c)//a\n\ntrips(a,b,c)",
          "\nAnswer =  (A + B + C)/A"
        ],
        [
          "\n\ndef calculateTrips(a,b,c):\n  return (b + c)//a + (b + c)%a",
          "\nAnswer = (A + B) + (A + C)"
        ]
      ]
    },
    "source": {
      "question": " Roger was helping the cafeteria workers pick up lunch trays, but he could only carry 4 trays at a time. If he had to pick up 10 trays from one table and 2 trays from another, how many trips will he make? ",
      "final_answer": 3.0,
      "index": 314
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 48.84006714820862,
      "templates": [
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef number_of_shelves(A, B, C):\n  return (A+B) / C\n\nprint(number_of_shelves(4, 17, 3)) # Answer: 7",
          "\n\nA + B = C \nAnswer = C / C = 1"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  return (A + B) // C\n\n# Usage\nshelf_count(25, 10, 5) \n# returns 6",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    return (A + B) // C\n\nprint(calculate_shelves(10, 15, 5))\n# Output: 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n    result = (A + B) // C \n    return result \n  \nprint(shelves(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n    shelves = (A + B) // C \n    return shelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A + B) // C\n\ncalculate_shelves(36, 24, 8) # returns 6 shelves",
          "\nA + B/C = Answer\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B) // C\n  \n# Calling the function:\nshelves_used(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesNeeded(a, b, c): \n return (a + b) // c\n\nprint(shelvesNeeded(10, 20, 4))\n25",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  return (A+B)//C\n\nshelves(A, B, C)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A + B) // C\n\nshelves_needed(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_shelves(10, 15, 3))\n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_calculation(a, b, c): \n    total_shelves = (a + b) // c\n    return total_shelves\n\nprint(shelf_calculation(25, 10, 3))  # Answer is 10 shelves",
          "\n\nA + B = C\nAnswer = C/C = 1 shelf"
        ],
        [
          "\n\ndef calcTotals(A, B, C):\n    return (A + B) // C\n\nprint(calcTotals(5, 10, 3)) # Answer: 4 shelves",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef findNumShelves(a, b, c):\n  return (a + b) // c\n\nprint(findNumShelves(10,15,5))\n#Result: 5 shelves",
          "\n\nNumber of Shelves = B/C\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return int(math.ceil((A + B) / C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef bear_shelves(A, B, C):\n  return (A + B) // C\n  \nNumber_of_shelves = bear_shelves(10, 15, 5)\nprint(Number_of_shelves)\n# Output: 5",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C): \n  return math.ceil((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef giant_stuffed_bears_shelves(A, B, C):\n  return (A + B) // C \n  \nprint(giant_stuffed_bears_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef number_of_shelves(A, B, C):\n  return (A + B) // C\n\nnumber_of_shelves(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  return (A + B) // C\n\nprint(shelf_count(25, 35, 10))\n# Returns 8 shelves",
          "\nAnswer = B/C + (B%C)"
        ],
        [
          "\n\ndef compute_shelves(A, B, C):\n  return (A + B) // C\n\nprint(compute_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(50, 20, 10))\n#Output: 7",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_shelves(A, B, C))",
          "\nAnswer = A + B/C"
        ]
      ]
    },
    "source": {
      "question": " A toy store had 4 giant stuffed bears in stock when they got another shipment with 10 bears in it. The put the bears onto shelves with 7 on each shelf. How many shelves did they use? ",
      "final_answer": 2.0,
      "index": 315
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 44,
      "duration": 44.3124737739563,
      "templates": [
        "John made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "John made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef money_lasted(A, B, C):\n  return (A + B) / C\n\nprint(money_lasted(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef Money_per_Week(A, B, C):\n  return (A+B)/C\n\nAnswer: Money_per_Week(A, B, C)",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef spending_time(A, B, C):\n    total_earnings = A + B\n    duration = total_earnings/C\n    return duration\n\nprint(spending_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C): \n  total_money = A + B \n  weeks = total_money / C \n  return weeks \n\nprint(money_lasts(10, 5, 2))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef moneySaved(A, B, C): \n    return (A + B) // C \n  \nprint(moneySaved(20, 10, 2)) \n\nAnswer: 15 weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef lawn_money(A, B, C): \n  return (A + B)//C\n\nprint(lawn_money(1000, 500, 20)) # Prints 50",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef money_length(A, B, C):\n    weeks = (A + B) / C\n    return weeks",
          "\nAnswer = (A + B)/C weeks"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  return round((A + B) / C)\n\nmoney_lasts(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef MoneyLast(A, B, C): \n  money = A + B \n  weeks = money // C\n  return weeks \n\nprint(MoneyLast(10, 5, 2))\n3",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculateDuration(A, B, C):\n  return int((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef money_lasts(A, B, C):\n  return round((A+B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C): \n  return (A + B) // C",
          "\n\nAnswer = (A + B - C) / C"
        ],
        [
          " \n\ndef lawnMoney(A, B, C):\n  return (A + B) / C \n  \nThe money would last John lawnMoney(A, B, C) weeks.",
          " \nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef how_long(A, B, C):\n    return int((A + B) / C)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef cost_of_living(A, B, C):\n  return (A+B) // C\n  \n# example \ncost_of_living(50, 40, 20) \n# returns 4 weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef compute_weeks_save(A, B, C):\n  return (A + B) // C\n\n# The number of weeks the money would last John is: \nprint(compute_weeks_save(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasting(A, B, C):\n    return (A + B) // C\n\nprint(money_lasting(5, 3, 2))\n# Output: 4",
          "\n\nAnswer =  (A + B - C) / C"
        ],
        [
          "\n\ndef calculate_savings(a,b,c):\n  total = a + b\n  return round(total/c, 0)\n  \nprint(calculate_savings(A, B, C))",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_lasts(a, b, c):\n  money_made = a + b\n  weeks = money_made // c\n  return weeks",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A,B,C):\n  total = A + B\n  weeks = total / C\n  return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_weeks(a, b, c):\n  return (a + b)/ c\n\nprint(calculate_weeks(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_time():\n\n    total_money = A + B\n    money_per_week = C\n    weeks = total_money / money_per_week\n    \n    return weeks",
          "\nAnswer = (A + B - C) / C"
        ]
      ]
    },
    "source": {
      "question": " John made 6 dollars mowing lawns and 18 dollars weed eating. If he only spent 3 dollar a week, how long would the money last him? ",
      "final_answer": 8.0,
      "index": 316
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 57.60108804702759,
      "templates": [
        "Wendy's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a Python function that returns the answer.",
        "Wendy's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numOfLoads(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_loads (A, B, C):\n  return (B // A + C // A + (B % A > 0) + (C % A > 0))\n\nprint(num_loads(5, 10, 8))\n\nThis prints out 3, since there are 3 loads necessary to wash 10 shirts and 8 sweaters.",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef wendy_loads(A, B, C):\n  return (B // A + C // A + (B % A > 0) + (C % A > 0))",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_loads(A, B, C):\n  return (B // A) + (C // A) + (B % A) + (C % A)",
          "\n\nAnswer = ((A + B + C) / A) + (((B + C) % A) > 0 ? 1 : 0)"
        ],
        [
          "\n\ndef number_of_loads(A, B, C):\n    return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = Ceil(A/B) + Ceil(A/C)"
        ],
        [
          "\n\ndef washing_loads(a,b,c):\n  total = b + c\n  num_loads = total // a\n  if total % a > 0:\n    num_loads += 1\n  return num_loads\n\nprint(washing_loads(A,B,C))",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_loads(A, B, C):\n  return (B + C) // A + 1",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          " \n\ndef num_of_loads(A,B,C):\n  return (B+C)//A + (B+C) % A \n\nnum_of_loads(10,5,6) # returns 2",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef loads_to_wash(a, b, c):\n  return (b + c) // a + (b + c) % a\n\nprint(loads_to_wash(3, 7, 5))  # Returns 3",
          "\n\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef wash_machine(a,b,c):\n  return (b+c) // a + 1",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef washingMachine(A,B,C): \n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = ceil((B + C )/A)"
        ],
        [
          "\n\ndef loads(a, b, c):\n  return (b+c)/a + (b+c)%a\n\nloads(A,B,C)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_loads(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_loads(A,B,C):\n  return (B//A + C//A) + (B%A + C%A != 0)\n\nprint(num_of_loads(2,5,4))\n# Output: 3",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef calculate_loads(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef washing(A, B, C):\n  total = (B+C)//A \n  if (B+C)%A > 0:\n    total += 1\n  return total\n\nprint(washing(A, B, C))",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washing_loads(shirts,sweaters):\n  total_clothes = shirts + sweaters\n  loads = total_clothes / pieces\n  return loads\n  \nprint('Wendy will have to do ' + str(washing_loads(B,C)) + ' loads.')",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef washing_machine (A, B, C):\n  return int((B + C) / A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef washingMachine(A, B, C):\n  totalLoads = B // A + C // A\n  if B % A != 0:\n    totalLoads += 1\n  if C % A != 0:\n    totalLoads += 1\n  return totalLoads\n\nprint(washingMachine(3, 8, 10)) # 4",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washingMachine(A,B,C):\n  return (B // A) + (C // A) + ((B % A) + (C % A)) // A + ((B % A) + (C % A)) % A\n\nprint(washingMachine(2,5,3)) #3",
          "\nAnswer = [(B / A ) + (C / A )]"
        ],
        [
          "\n\ndef washing_machine(A, B, C):\n  return (B + C) // A + int((B + C) % A != 0)\n  \nwashing_machine(A, B, C)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numberOfLoads(a, b, c):\n  return (b // a) + (c // a) + (b % a) + (c % a)",
          " (replace A, B, and C with numerical values before solving the equation):\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef load_calculator(A, B, C):\n  return math.ceil((B + C) / A)\n\n#Example\nload_calculator(3, 10, 5)\n# returns 4",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef findNumLoads(A,B,C):\n  return (B + C)//A + (B + C) % A > 0",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numberOfLoads(A, B, C): \n  return (B + C)//A + 1",
          "\nAnswer = (B\u00f7A) + (C\u00f7A)"
        ]
      ]
    },
    "source": {
      "question": " Wendy's old washing machine could only wash 8 pieces of clothing at a time. If she had to wash 39 shirts and 33 sweaters how many loads would she have to do? ",
      "final_answer": 9.0,
      "index": 317
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 42,
      "duration": 42.0144898891449,
      "templates": [
        "Debby's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a Python function that returns the answer.",
        "Debby's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef NumVans(A, B, C):\n  return (B//A + C//A + (B%A + C%A)//A + (B%A + C%A)%A)",
          "\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef vans(A, B, C):\n  return math.ceil( (B + C)/A )",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n  return math.ceil((B + C)/A)\n  \nprint(vans_needed(A,B,C))",
          "\n\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef vansNeeded(A, B, C):\n  return (B//A + C//A + 1) if (B % A + C % A) > 0 else (B//A + C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n  total = B + C\n  num_vans = total // A\n  if total % A != 0:\n    num_vans += 1\n  return num_vans",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A,B,C):\n    return (B+C)//A + (1 if (B+C)%A > 0 else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n    return math.ceil((B+C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A else 0)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n return (B // A + 1) + (C // A + 1)",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\nLet A = number of people a van can hold, B = number of students, and C = number of adults\n\ndef numberOfVans(A, B, C):\n  totalPeople = B + C\n  return math.ceil(totalPeople / A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  x = B//A + C//A\n  y = B%A + C%A\n  if y > 0:\n      x += 1\n  return x",
          " \nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed (A, B, C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef neededVans(A, B, C):\n  total = B + C\n  vans = total // A\n  if total % A != 0:\n    vans += 1\n  return vans",
          "\n\nAnswer = [(B+C)/A]"
        ],
        [
          "\n\ndef number_of_vans(A,B,C):\n    return math.ceil((B+C)/A)",
          "\n\nAnswer = ((B + C) / A)"
        ],
        [
          "\n\ndef num_of_vans(a,b,c):\n  return (b + c) // a + (1 if (b + c) % a > 0 else 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n  return (B + C) // A + (B + C) % A",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef field_trip_vans(A,B,C): \n  total = B + C\n  vans = total / A\n  return round(vans)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef zoo_trip(A, B, C):\n  vans = (B + C) // A\n  if (B + C) % A > 0:\n    vans += 1\n  return vans",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef number_of_vans(A,B,C):\n  return math.ceil((B + C)/A)",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Debby's class is going on a field trip to the zoo. If each van can hold 4 people and there are 2 students and 6 adults going, how many vans will they need? ",
      "final_answer": 2.0,
      "index": 318
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 46,
      "duration": 48.210214138031006,
      "templates": [
        "Isabel uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Isabel uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef albumPictures (A, B, C):\n  return (A + B) / C\n\nalbumPictures(A, B, C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n    return (A + B) / C\n\nanswer: (A + B) / C pictures in each album",
          "\n\nAnswer = (A + B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef albumPics(A, B, C):\n  return (A + B)//C",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef album_pictures(a, b, c):\n  return (a + b) / c\n  \nprint(album_pictures(a, b, c))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef picAlbums(a, b, c):\n  totalPics = a + b\n  return totalPics // c\n\nprint(picAlbums(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numPicsAlbums(A, B, C):\n  total = A + B\n  return total/C\n\nanswer = numPicsAlbums(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pictures_per_album(a,b,c):\n  total_pictures = a + b\n  pictures_per_album = total_pictures/c\n  return pictures_per_album\n\nprint(pictures_per_album(4, 8, 3))\n# The answer is 5 pictures per album.",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef albums(a, b, c):\n    return (a + b) // c\n\nprint(albums(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_divide(A, B, C):\n  return (A + B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef number_of_pics_in_albums(a, b, c):\n  total_pics = a + b\n  return int(total_pics / c)\n  \n# Example Usage\nnumber_pics_in_albums(5, 8, 3) # Returns 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef upload_picture(a, b, c):\n  total_pictures = a + b \n  album_pictures = total_pictures // c\n  return album_pictures\n\nprint(upload_picture(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_pics_in_album(A,B,C):\n  return (A+B) // C\n  \nanswer = num_pics_in_album(A,B,C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef picsPerAlbum(totalPics, totalAlbums):\n  return totalPics / totalAlbums\n\nprint(picsPerAlbum(A + B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return (A + B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef picAlbums(A, B, C):\n    return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pics_per_album(A, B, C):\n  total = A + B\n  return total // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(A,B,C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albums(A, B, C): \n   return (A+B)//C",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef num_pics_in_album():\n  total_num_pics = A + B\n  num_pics_in_album = total_num_pics / C\n  return num_pics_in_album\n\nprint(num_pics_in_album())",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \nNote: The solution should work for any total number of pics (i.e. not be hard-coded). \n\ndef num_pics_in_albums(A, B, C):\n  tot_pics = A + B \n  pics_in_each_album = tot_pics // C \n  return pics_in_each_album \n\nprint(num_pics_in_albums(2,",
          "\nAnswer = (A+B)/C"
        ],
        [
          " \n\ndef album_pics():\n  A = int(input(\"How many pictures were from her phone? \"))\n  B = int(input(\"How many pictures were from her camera? \"))\n  C = int(input(\"How many albums did she make? \"))\n\n  return (A+B)//C\n\nprint(\"Each album had\", album_pics(), \"pictures.\")",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_pictures(A, B, C):\n    return (A + B) // C\n\nprint(num_of_pictures(10, 20, 5)) # Answer: 10",
          "\n\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " Isabel uploaded 2 pictures from her phone and 4 from her camera to facebook. If she sorted the pics into 3 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 2.0,
      "index": 319
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.084161043167114,
      "templates": [
        "While playing at the arcade, Frank won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a Python function that returns the answer.",
        "While playing at the arcade, Frank won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef candy_cost(A, B, C):\n    return (A + B)//C \n\nprint(candy_cost(50, 20, 3))\n# This will return 16 candy that Frank could buy.",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_tickets(A,B,C):\n    tickets = A + B\n    return tickets // C\n\nprint(candy_tickets(15, 20, 5))  # returns 7",
          "\nAnswer = (A + B) \\div C"
        ],
        [
          "\n\ndef candyPurchase(A, B, C):\n  return A + B // C\n  \nprint(candyPurchase(50, 85, 15))    # prints 10",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef tickets (a, b, c): \n  return min(a, b) // c \n  \nprint(tickets(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_for_candy(a,b,c):\n  total_tickets = a + b\n  candy_pieces = total_tickets // c\n  return candy_pieces\n\nprint(tickets_for_candy(10,5,3))\n# Output: 7",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef candy_calc(A,B,C):\n  total_tickets = A + B\n  candy_pieces = total_tickets//C\n  return candy_pieces\n\n# Calling the function\ncandy_calc(10,20,3)\n# Output: 16",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef candyPurchase(A, B, C):\n  totalscore = A + B\n  buycandy = totalscore // C\n  return buycandy",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef tickets(a,b,c):\n  return (a+b)//c \n\nprint(tickets(10,15,2))\n# Output: 12",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef num_of_candies(A, B, C): \n  return (A + B) // C",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef buyCandy(A, B, C):\n  return A + B // C\n  \nprint(buyCandy(4, 6, 3))  # Prints 4",
          "\nAnswer = A + B - C"
        ],
        [
          "\n\ndef num_of_candies(A, B, C):\n  return min(A + B, C)  # Returns the smaller value between A+B and C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_candies(a, b, c):\n  return min(a,b) // c",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          " \n\ndef ticket_count(A, B, C):\n  return A + B // C\n\nprint(ticket_count(10, 50, 5))  #prints 10",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_candies(A,B,C):\n    return (A+B)//C\n\nnum_candies(100,200,15) # returns 17",
          "   \nAnswer = A + B / C"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return min(A, B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef candy_purchase(A, B, C): \n    return A+B//C\n\nprint(candy_purchase(20, 20, 5))\n#output 12",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef num_candies_bought(A, B, C): \n  return int((A + B) / C)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef arcade_candy(A, B, C):\n  return min(A, B, C) // C",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef number_of_candies(A, B, C):\n  return (A + B) // C\n\n#This function takes three arguments, A, B and C, and returns the number of candy pieces Frank can afford.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef buy_tickets(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_buyer(ticketsA, ticketsB, candyCost):\n  total_tickets = ticketsA + ticketsB\n  num_candy = total_tickets // candyCost\n  return num_candy\n\ncandy_buyer(A, B, C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_candy(A, B, C):\n  return A+B//C\n\nprint(buy_candy(50, 20, 3))\nThis should return 22.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(a,b,c):\n  tickets = a+b\n  candy = tickets//c\n  return candy",
          "\n\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candyPurchase(A, B, C):\n    return (A + B) // C\n\n# Output\ncandyPurchase(30, 40, 5)\n# 10",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return A + B // C\n\nprint(candy(100, 35, 5))\n# Prints 17",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " While playing at the arcade, Frank won 33 tickets playing 'whack a mole' and 9 tickets playing 'skee ball'. If he was trying to buy candy that cost 6 tickets a piece, how many could he buy? ",
      "final_answer": 7.0,
      "index": 320
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 38,
      "duration": 35.03856015205383,
      "templates": [
        "Mike made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Mike made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef calculate_length_of_funds(A, B, C):\n  return (A + B) / C\n  \nlength_of_funds = calculate_length_of_funds(A, B, C)\nprint(f\"The money will last Mike for {length_of_funds} weeks\")",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateTime(A,B,C):\n  return (A + B) / C\n\nprint(calculateTime(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_length(A, B, C):\n  return (A + B) / C\n \nprint(money_length(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_weeks(A, B, C):\n  return (A + B) // C\n  \nprint(calculate_weeks(A, B, C))",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_length(A, B, C):\n    return min(A, B) // C + 1",
          " \n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(A, B, C):\n    return int((A + B) / C)",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculate_time_frame(a, b, c): \n  total_money = a + b\n  return total_money / c\n  \ntime_money_will_last = calculate_time_frame(A, B, C)",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_lasts(a, b, c):\n  total_money = a + b\n  weeks_last = total_money // c\n  return weeks_last\n\nmoney_lasts(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(A, B, C):\n  total_week = (A + B) / C\n  return total_week",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef money_lasts(a,b,c): \n      return (a+b)/c",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_left (A, B, C):\n  return (A + B) // C\n\nprint(money_left(20, 10, 3)) # Answer is 10 weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculateDuration(A, B, C):\n  moneyLeft=A+B\n  weeks=moneyLeft//C\n  return weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculate_end_date(A, B, C):\n  total_money = A + B\n  weeks = total_money / C\n  return weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculateWeeks(A,B,C):\n  return (A + B) // C\n  \ncalculateWeeks(A,B,C)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculate_lawn_weeding_duration(A,B,C):\n  total_dollars = A + B \n  return total_dollars // C\n\nprint(calculate_lawn_weeding_duration(20,10,5))\n\nThis function will return 6, since 20 + 10 = 30, and 30 // 5 = 6.",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_length(A, B, C): \n    return (A + B) // C\n\nprint(\"The money would last\", money_length(A, B, C), \"weeks.\")",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef moneyLast(A, B, C):\n  return round((A + B) / C)",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef how_long_with_money(A, B, C):\n  total = A + B\n  return total // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts_weeks(a, b, c):\n  return round((a + b) / c)\n  \nprint(money_lasts_weeks(A, B, C))",
          "\nAnswer = (A + B - C) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " Mike made 14 dollars mowing lawns and 26 dollars weed eating. If he only spent 5 dollar a week, how long would the money last him? ",
      "final_answer": 8.0,
      "index": 321
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.093353986740112,
      "templates": [
        "Gwen and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Gwen recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Gwen and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Gwen recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef calculatePoints(A, B, C): \n  return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycle_points(A, B, C): \n  return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef get_points(A,B,C):\n  return A*B + A*C\n\nprint(get_points(1,2,3)) #Output: 8",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycle_points(A,B,C):\n  return A*B + A*C\n  \nprint(recycle_points(1, 5, 10))  # returns 15",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recycle_points(A,B,C):\n    return (A*B) + (A*C)",
          "\n\nAnswer = A*(B+C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pointsEarned(A,B,C):\n    totalPoints = (A * B) + (A * C)\n    return totalPoints",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n    return (A * B) + (A * C)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n  return (B + C) // A",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Gwen and her friends were recycling paper for their class. For every 3 pounds they recycled they earned one point. If Gwen recycled 5 pounds and her friends recycled 13 pounds, how many points did they earn? ",
      "final_answer": 6.0,
      "index": 322
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 40,
      "duration": 36.409173011779785,
      "templates": [
        "Robin uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Robin uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef album_pictures(A, B, C):\n  return (A + B) / C\n\nprint(album_pictures(A, B, C))",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albums(A,B,C):\n  return (A + B)/C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n    return (A + B) // C\n  \nprint(album_pics(2, 3, 5))\n\nAnswer: 1",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef album_photos(a, b, c):  \n  total_pics = a + b\n  return total_pics // c\n\nalbum_photos(a, b, c)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef max_pictures(A, B, C):\n  return (A + B) / C\n\nprint(max_pictures(A, B, C))",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef amountPerAlbum(pictures):\n  albums = pictures // C\n  return albums\n\nprint(amountPerAlbum(A + B))",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef divide_pictures(A, B):\n    total_pictures = A + B\n    return total_pictures // C\n\n# A = number of pictures from the phone\n# B = number of pictures from the camera\n# C = the number of albums",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_count(a, b, c):\n  return (a + b) // c\n\nprint(album_count(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calc_pics_album(a, b, c):\n  total = a + b\n  pics_per_album = total / c\n  return pics_per_album\n\nanswer = calc_pics_album(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numOfPics(a, b, c):\n  return (a+b)//c \n  \nPrint (numOfPics(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef albumsPics(a, b, c): \n  num_pics = (a + b) // c\n  return num_pics\n\nAnswer: The number of pictures in each album is (a + b) // c.",
          " \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef picture_albums(a, b, c): \n    return (a + b) // c\n# This function divides the total number of pictures (a+b) by the number of albums (c) to calculate how many pictures were in each album.",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef albumPics(a, b, c):\n  return (a + b) / c\n\nanswer = albumPics(A, B, C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pics(a, b, c):\n  return (a+b) // c\n\n#Example:\nalbum_pics(3, 6, 2)\n# returns 4",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef numberOfAlbumPictures(a, b, c):\n  return (a + b)//c\n\n#Example\nnumberOfAlbumPictures(3, 5, 2) #returns 4",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_count(a, b, c):\n    return (a + b) // c\n    \nalbum_count(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef totalPicsPerAlbum(a, b, c):\n  return (a + b) // c \n\nprint(totalPicsPerAlbum(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pic_album(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_albums(A, B, C):\n  total = A + B\n  return total / C\n\nprint(calculate_albums(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef album_total(amount): \n    album_num = amount // 3 \n    return album_num\n\nresult = album_total(B+A)\nprint(result)",
          "\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " Robin uploaded 31 pictures from her phone and 5 from her camera to facebook. If she sorted the pics into 9 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 4.0,
      "index": 323
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 40,
      "duration": 36.57323694229126,
      "templates": [
        "For Halloween Megan received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a Python function that returns the answer.",
        "For Halloween Megan received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef candy_duration(A,B,C):\n  return (A+B)/C",
          "\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef how_long_will_candy_last(A, B, C):\n  days = (A + B)/C\n  return days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef CandyCalc(A, B, C): \n  totalCandy = A + B\n  totalDays = totalCandy // C\n  if totalCandy % C != 0:\n      totalDays += 1\n  return totalDays\n\nprint(CandyCalc(A,B,C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_lasts(A, B, C):\n  return (A + B) // C\n\nprint(candy_lasts(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef days_of_candy (A, B, C):\n  return (A + B) // C",
          "\nA*B/C = Answer \nAnswer =  (A*B)/C"
        ],
        [
          "\n\ndef candy_count(A, B, C): \n  days = (A + B) / C \n  return days",
          "\n\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef HalloweenCandyCalculator(A,B,C):\n    candy = A + B\n    days = candy // C\n    return days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A,B,C):\n    return (A+B) // C\n\nprint(candy_duration(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n    return (A+B)//C  # // operator - divide and floor the answer",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(a,b,c):\n    total_pieces = a + b\n    return 'Megan can enjoy her candy for ' + str(total_pieces // c) + ' days.'\n\nprint(candy_calculator(A,B,C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef how_long(A,B,C): \n    return (A+B)//C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n  return (A+B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef Halloween_candy(A, B, C):\n    total_candy = int(A) + int(B)\n    time = int(total_candy)//int(C)\n    return time\n\nprint(Halloween_candy(15, 20, 3))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n  return (A + B) // C\n  \nprint(candy_duration(10, 10, 2)) # 10 days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(a,b,c):\n  return (a+b)//c",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long_will_the_candy_last(A, B, C):\n    total_pieces = A + B\n    return total_pieces / C\n\nprint(how_long_will_the_candy_last(10, 5, 4)) # Answer: 4.5 days",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n  total_candy = A + B\n  days = total_candy // C\n  remainder = total_candy % C\n  if remainder == 0:\n    return days\n  else:\n    return days + 1   \n\nprint(candy_calculator(5, 8, 3))  # Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n    total_pieces = A + B\n    duration = total_pieces / C\n    return duration",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_lasts(A, B, C):\n  return (A + B) // C\n\nprint(candy_lasts(10, 20, 3)) # 7 days",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Megan received 11 pieces of candy from neighbors and 5 pieces from her older sister. If she only ate 8 pieces a day, how long would the candy last her? ",
      "final_answer": 2.0,
      "index": 324
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.66926383972168,
      "templates": [
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a Python function that returns the answer.",
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef num_bags(A, B, C): \n  return (B // A) + (C // A)",
          "\n\nAnswer = (A * B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef find_bag_amount(A, B, C):\n  return (B//A) + (C//A)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef num_of_bag (A, B, C):\n  return min (B//A, C//A)",
          "\nAnswer = (A*B + A*C) / A"
        ],
        [
          " \n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef cookie_bag_count(A,B,C):\n  return min(A,B,C) // (A+B+C)\n  \n# To use the function:\ncookie_bag_count(A,B,C)",
          "\nAnswer = floor(min(A, B + C) / A)"
        ],
        [
          "\n\ndef baggies_cookies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef make_baggies(A,B,C):\n    return (B//A + C//A)\n\nprint(make_baggies(5,20,15))\nThis should output the answer: 5",
          "\n\nAnswer = A * (B + C) / A"
        ],
        [
          "\n\ndef make_bag(A, B, C):\n  return min(B, C) // A\n\nprint(make_bag(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = A * (B / (A + C))"
        ],
        [
          "\n\ndef number_of_baggies(A, B, C):\n  return (B//A) + (C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_baggies(A,B,C):\n  total_cookies = B + C\n  baggies = total_cookies // A\n  return baggies\n\nprint(num_baggies(8, 24, 16))\n# Output: 6 baggies",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef get_baggies(A, B, C): \n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef baggies(a, b, c):\n  if b > a and c > a:\n    return (b//a + c//a)\n  elif b <= a and c <= a:\n    return 1\n",
          "\nAnswer =  (A \u00d7 (B + C))/A"
        ],
        [
          "\n\ndef cookie_bag_generator(a, b, c):\n  baggies = min(b//a, c//a)\n  return baggies\n  \nprint(cookie_bag_generator(A, B, C))",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = floor(A/(B + C))"
        ],
        [
          "\n\ndef baggies(A,B,C): \n  baggies = min(B//A,C//A) \n  return baggies\n\nprint(baggies(A,B,C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          " \n\ndef baggies(A, B, C):\n    return min(B//A, C//A)",
          "\nAnswer =  (A * (B + C))/A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef makeBaggies(A, B, C): \n  if (B + C < A): \n    return 0 \n  else: \n    return (B // A) + (C // A)",
          "\nAnswer = A\u22c5 (B+C)\u00f7A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n    return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef cookiebag(A, B, C): \n    return (B//A) + (C//A)",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\ndef make_baggies(A, B, C):\n  return (B//A)+(C//A)",
          "\n\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Maria was making baggies of cookies with 5 cookies in each bag. If she had 33 chocolate chip cookies and 2 oatmeal cookies, how many baggies could she make? ",
      "final_answer": 7.0,
      "index": 325
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.795265913009644,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef groups (A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_groups(A, B, C):\n  total_players = A + B\n  return total_players // C\n\nprint(number_of_groups(A, B, C))",
          "\n\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef numOfGroups(newPlayers, returningPlayers, groupSize):\n  return (newPlayers + returningPlayers) // groupSize",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n    totalPlayers = A + B\n    numGroups = totalPlayers // C\n    return numGroups",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef team_groups(a, b, c):\n    return (a + b) // c\n\nprint(team_groups(10, 12, 5))\n\nThis will return 4 groups.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef baseball_group(A, B, C):\n    total_players = A + B\n    groups = total_players // C\n    return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(a,b,c):\n    total = a + b\n    result = total / c\n    return result\n    \ngroups(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups_num(A, B, C):\n  return (A+B)//C\n\nprint(groups_num(10, 15, 3))\n#Answer: 8",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_size(A, B, C):\n  return (A + B) // C\n\ngroup_size(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    num_groups = (A + B) // C\n    return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n    return int((A + B) / C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef groupings(A,B,C):\n  total = A + B\n  groups = total // C\n  remainder = total % C\n  if (remainder > 0):\n    groups = groups + 1\n  return groups",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef baseball_groups(A, B, C): \n  total = A + B\n  return total//C\n\nprint(baseball_groups(2, 3, 4))\n# Answer: 2",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef groups(A, B, C):\n    return ((A+B) // C)",
          "\n\nAnswer = (A + B) /C"
        ],
        [
          "\n\ndef groups(A, B, C):\n    total_players = A + B\n    groups = total_players // C \n    return groups",
          "\nAnswer = (A + B)  \u00f7  C"
        ],
        [
          "\n\ndef group_creator(A, B, C):\n  return max((A + B) // C, 1)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_number(A, B, C):\n  total_players = A + B\n  num_groups = total_players // C\n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_num(a,b,c):\n  return int((a+b)/c)\n\ngroup_num(A,B,C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef groupCalc(a, b, c):\n  return (a + b) // c\n\nprint(groupCalc(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateGroups(A, B, C):\n\ttotalPlayers = A + B\n\tif totalPlayers % C == 0:\n\t\treturn totalPlayers/C\n\telse:\n\t\treturn (totalPlayers/C) + 1\n\nresult = calculateGroups(A, B, C)\nprint(result)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_num_of_groups(A, B, C):\n    return (A + B) // C\n    \nprint(get_num_of_groups(10, 15, 3)) # 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_players(A,B,C):\n\u00a0\u00a0return (A + B) // C\n\ngroup_players(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef group_calculator(A, B, C):\n  total_players = A + B\n  if C == 0:\n    return 0\n  elif total_players % C == 0:\n    return total_players//C\n  else:\n    return total_players//C + 1\n  \ngroup_calculator(A, B, C)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef groupCalculator(A, B, C):\n    \n    totalPlayers = A + B\n    groups = totalPlayers // C\n    \n    return groups",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 4 new players and 6 returning players. If the coach put them into groups with 5 players in each group, how many groups would there be? ",
      "final_answer": 2.0,
      "index": 326
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 40,
      "duration": 45.89944672584534,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef time_for_adoption(A, B, C):\n    return (A + B) / C\n\nprint(time_for_adoption(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef time_to_adopt(A,B,C):\n  return (A+B) / C\n\nprint (time_to_adopt(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adopt_puppies(A, B, C):\n  return (A + B)/C\n\nanswer = adopt_puppies(A, B, C)\nprint(answer)",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef adoptionRate(A, B, C):\n  totalPuppies = A + B \n  adoptionTime = totalPuppies/C\n  return adoptionTime\n\nprint(adoptionRate(A, B, C))",
          "\n\nAnswer = $\\frac{A+B}{C}$ days"
        ],
        [
          "\n\ndef pet_shelter(A, B, C):\n  total_puppies = A + B\n  days_needed = total_puppies // C\n  if total_puppies % C != 0:\n    days_needed += 1\n  return days_needed\n\nprint(pet_shelter(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef getAdoptionTime(A, B, C): \n    total_puppies = A + B\n    return (total_puppies / C) \n\nprint(getAdoptionTime(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef adopt_pets(num_of_puppies, num_of_brought, num_adopted):\n  total_puppies = num_of_puppies + num_of_brought\n  days = total_puppies // num_adopted\n  if total_puppies % num_adopted > 0:\n    return days + 1\n  else:\n    return days\n\nprint(adopt",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef petShelter(A, B, C): \n  total_puppies = A + B\n  days_required = total_puppies / C\n  return days_required\n\nanswer = petShelter(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_num_days(A, B, C):\n  total_puppies = A + B\n  return total_puppies // C\n\nprint(calculate_num_days(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adopted_time (A, B, C):\n    total_puppies = A + B\n    time_to_adopt = total_puppies / C\n    return time_to_adopt\n\nprint(adopted_time(A, B, C))",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef calculate_days(A, B, C):\n  total_puppies = A + B\n  days = total_puppies / C\n  return int(days)\n\nprint(calculate_days(A, B, C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef shelter_adoption(a,b,c):\n  total = a + b\n  days = total / c\n  return days\n\nprint(shelter_adoption(a,b,c))",
          "\nAnswer = (A+B)/C  days"
        ],
        [
          "\n\ndef petAdoption(A,B,C): \n  total_puppies = A + B # total number of puppies \n  return total_puppies/C # days to adopt all puppies \n  \nprint(petAdoption(A,B,C))",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef how_long_to_adopt(a, b, c): \n  total_puppies = a + b  \n  days_to_adopt = total_puppies // c  \n  return days_to_adopt \n\nprint(how_long_to_adopt(a, b, c))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n    total_puppies = A + B\n    days = total_puppies // C\n    return days\n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef time_for_adoption(A, B, C):\n  total_puppies = A + B\n  days = total_puppies // C\n  if total_puppies % C != 0:\n    days += 1\n  return days\n\ntime_for_adoption(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption_time(A, B, C):\n    final_amount = A + B\n    days_needed = final_amount / C\n    return days_needed\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C days"
        ],
        [
          "\n\ndef adopt_time(A, B, C):\n  return (A+B)/C\n  \nprint(adopt_time(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppies_adopted(A, B, C):\n    return (A+B)/C\n\npuppies_adopted(A, B, C)",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef petShelterAdoptions(a, b, c):\n  total_puppies = a+b\n  adoptions_days = total_puppies/c\n  return adoptions_days\n\nanswer = petShelterAdoptions(A, B, C)\nprint(answer)",
          "\nAnswer = (A+B)/C days"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 5 puppies when another 35 were brought in. If 8 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 5.0,
      "index": 327
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 44,
      "duration": 38.79307961463928,
      "templates": [
        "Nancy's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a Python function that returns the answer.",
        "Nancy's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0
      ],
      "completions": [
        [
          "\n\ndef number_of_vans(A, B, C):\n  return (B//A) + (C//A) + (B%A + C%A > 0)\n  \n# example\nnumber_of_vans(15, 75, 34) #Will return 5 vans.",
          "\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_vans(A,B,C):\n    return math.ceil((B+C)/A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef field_trip(a, b, c):\n  vans_needed = ((b+c)//a)+(1 if (b+c)%a != 0 else 0)\n  return vans_needed",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vansNeeded(A, B, C):\n  return (B//A + C//A + (B%A + C%A > 0))\n\nvansNeeded(A, B, C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer =  (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return (B+C) // A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n  return (B//A) + (C//A) + (B % A != 0) + (C % A != 0)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vansNeeded(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = Math.ceil(B/A + C/A)"
        ],
        [
          "\n\ndef findVansNeeded(A, B, C):\n  return (B//A + C//A + (B % A != 0) + (C % A != 0))",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef field_trip_vans(a, b, c):\n  return (b + c) // a + 1",
          "\nAnswer = A divided by (B + C)"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n    total = B + C\n    num_vans = total // A\n    if total % A != 0:\n        num_vans += 1\n    return num_vans\n\nprint(number_of_vans(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef number_of_vans(A,B,C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B \u00f7 A) + (C \u00f7 A)"
        ],
        [
          "\n\ndef numVans(A, B, C):\n  return ceil((B + C) / A)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n  return math.ceil((B+C)/A)",
          " \nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculateVans(A, B, C):\n    vans = (B + C) // A\n    if (B + C) % A != 0: vans += 1\n    return vans\n\nprint(calculateVans(A, B, C))",
          "\n\nAnswer =(B + C) / A"
        ],
        [
          "\n\ndef number_of_vans (A,B,C):\n return math.ceil((B + C) / A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef zoo_trip(A, B, C):\n  return (B + C) // A + 1",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n    total_people = B+C\n    num_vans = total_people/A\n    if total_people % A != 0: \n        num_vans += 1\n    return num_vans\n\nprint(vans_needed(15,50,10)) # output: 4",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n    return ceil((B + C)/A)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef calculate_vans(A,B,C):\n return (B + C) // A\n \n# for example, if 10 people can fit in a van, there are 15 students and 4 adults, the answer is 2 vans\nprint(calculate_vans(10, 15, 4))\n# Output: 2",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C): \n    return (B + C)//A + 1",
          "\nAnswer = (B + C)/A"
        ]
      ]
    },
    "source": {
      "question": " Nancy's class is going on a field trip to the zoo. If each van can hold 5 people and there are 12 students and 3 adults going, how many vans will they need? ",
      "final_answer": 3.0,
      "index": 328
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 52.75105404853821,
      "templates": [
        "Dave was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Dave was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef no_of_trips(A, B, C):\n  return (B + C) // A + 1\n\n# example\nno_of_trips(2, 10, 12)\n# Output: 6",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(a, b, c):\n    return (b + c) // a + (1 if ((b + c) % a) else 0)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B + C) // A + (B + C) % A  # Divide B+C by A, rounded up (ceiling), to get the number of trips needed.",
          "\nAnswer = A + (B + C -1) / A"
        ],
        [
          "\n\ndef num_of_trips(A, B, C):\n    return (B + C) // A + ((B + C) % A > 0)   #returns the number of trips Dave will make",
          "\nAnswer = A + (B+C)/A"
        ],
        [
          "\n\ndef numTrips(A,B,C):\n  return ceil((B+C)/A)\n\n# ceil() rounds up to the nearest integer \n# A = number of trays Dave can carry at a time\n# B = number of trays at first table\n# C = number of trays at second table",
          " \nAnswer = B + C"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B + C) // A + (B + C) % A",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n return (B//A + C//A + (B % A > 0) + (C % A > 0))\n\n# call function\nnumTrips(A, B, C)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numOfTrips(A, B, C): \n    return (B + C) // A\n\n# If A = 2, B = 6, and C = 8, Dave will make 4 trips. \nnumOfTrips(2, 6, 8) # Returns 4",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trays(A,B,C):\n  return ((B+C)//A) + 1",
          "\n\nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef num_of_trips(A, B, C):\n  num_of_trips = (B // A) + (C // A)\n  if B % A > 0:\n    num_of_trips += 1\n  if C % A > 0:\n    num_of_trips += 1\n  return num_of_trips\n\n#Example\nprint(num_of_trips(3, 5",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          " \nPython function:\n\ndef num_trips(A,B,C):\n  return (B + C) // A + int((B + C) % A != 0)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(A,B,C):\n    return ceil(B/A) + ceil(C/A)\n\ntrips(A,B,C)",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return math.ceil(B / A) + math.ceil(C / A)",
          "\nAnswer = B + C"
        ],
        [
          "\n\ndef numTrips(a,b,c):\n  return ceil( (b+c) / a)\n\n# ceil() is a built-in function in Python that rounds a number up to the nearest whole number.",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef pick_up(a, b, c):\n  return (b+c) // a + (b+c) % a > 0;",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef pick_up_trays(A, B, C): \n    total_trays = B + C\n    trips = total_trays // A\n    if total_trays % A != 0:\n        trips += 1\n    return trips\n    \nprint(pick_up_trays(2, 10, 6))  # returns 5 trips",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B+C)//A + (B+C)%A",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef tray_trips(A, B, C):\n\ttotal_trips = (B+C) // A\n\tif (B+C) % A > 0:\n\t\ttotal_trips += 1\n\treturn total_trips\n\nprint(tray_trips(3, 8, 5))  # 3 trips",
          "\n\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef trips_made(A, B, C):\n  return (B + C)//A + (B+C)%A",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n    return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef numOfTrips(a,b,c):\n  return (b+c)//a + ((b+c) % a > 0)\n\nprint(numOfTrips(A,B,C))",
          "\n\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef number_of_trips(A,B,C): \n  return (B//A + C//A + 1)\n\nnumber_of_trips(4,12,16) -> 5",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n    return math.ceil(B/A) + math.ceil(C/A)",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef get_num_of_trips(A, B, C):\n  return (B//A + C//A + (B % A + C % A > 0))\n  \nThe function takes in three parameters: A, B, and C. A is the number of trays Dave can carry at a time, B is the number of trays from one table, and C is the number of trays from another table. The function returns the answer",
          "\n\nAnswer = (A + B) + (A +C)"
        ],
        [
          "\n\ndef calculate_trips(A, B, C):\n  total_trips = (B + C) / A\n  return total_trips\n\nprint(calculate_trips(2, 7, 5))\n# Output: 4.5 trips",
          "\nAnswer = (A * B) + (A * C) \\ A"
        ]
      ]
    },
    "source": {
      "question": " Dave was helping the cafeteria workers pick up lunch trays, but he could only carry 9 trays at a time. If he had to pick up 17 trays from one table and 55 trays from another, how many trips will he make? ",
      "final_answer": 8.0,
      "index": 329
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 48.04974889755249,
      "templates": [
        "For a birthday party George bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a Python function that returns the answer.",
        "For a birthday party George bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numShelves(A, B, C): \n  return (A + B) // C \n\nprint(numShelves(A, B, C))",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef fill_shelves(A, B, C):\n  return (A+B) // C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef birthday_party(A, B, C):\n  return (A//C) + (B//C)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelvingsodas(A, B, C):\n  num_shelves = (A+B)/C\n  return round(num_shelves)\n  \n#calling the function\nshelvingsodas(8, 3, 5)\n#answer: 3",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A//C + B//C + (A%C + B%C)//C + (A%C + B%C)%C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateShelves(A, B, C):\n  return (A + B) // C\n\nprint(calculateShelves(4, 8, 6))\n# Output: 2",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C): \n  return (A + B) // C \n\nprint(calculate_shelves(A, B, C))",
          "\n\nAnswer = \\(\\frac{A + B}{C}\\)"
        ],
        [
          "\n\ndef get_shelf_count(a, b, c): \n  return ceil((a + b) / c)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          " \n\ndef calculateShelves(A, B, C):\n  total = A + B\n  return total // C + (1 if total % C != 0 else 0)",
          "\n Answer = (A+B) / C"
        ],
        [
          "\n\ndef shelves_filled(a, b, c):\n    total_sodas = a + b\n    return total_sodas // c + (total_sodas % c > 0)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C + ((A + B) % C != 0) \n  \nprint(shelves(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  return (A//C + B//C + (A % C + B % C) // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef fill_up(A, B, C):\n  return (A+B)//C \n\nfill_up(A,B,C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  return (A // C) + (B // C)",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef num_of_shelves(A,B,C):\n    return (A//C + B//C + (A%C+B%C)//C + (A%C+B%C)%C)\n\n#example\n\nprint(num_of_shelves(6,4,2))\n#Output: 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  shelves = A // C\n  \n  if A % C > 0:\n    shelves += 1\n  \n  shelves += B // C\n  \n  if B % C > 0:\n    shelves += 1\n  \n  return shelves\n\nprint(shelves_filled(20, 6, 4))    # Outputs 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(a,b,c):\n  return (a + b) // c\n\nprint(shelves(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef soda_shelves(A,B,C):\n  return (A // C) + (B // C)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelves_needed(A,B,C):\n  return (A + B) // C + (A + B) % C > 0\n\nshelves_needed(A,B,C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_for_sodas(a,b,c): \n    return (a//c + b//c + (a%c + b%c)//c)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A,B,C):\n  return (A//C + B//C)",
          "\nAnswer = A / C + B / C"
        ],
        [
          "\n\ndef soda_shelves(A,B,C):\n  return (A // C) + (B // C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_shelves(A, B, C):\n  return (A // C) + (B // C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_needed(a, b, c): \n    return ( (a+b)//c + !!((a+b) % c) ) \n    \nAnswer: shelves_needed(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  return (A + B) // C\n\nprint(shelves_filled(10, 10, 5)) # 4",
          "\n\nAnswer = (A+B)/C"
        ]
      ]
    },
    "source": {
      "question": " For a birthday party George bought 10 regular sodas and 22 diet sodas. If his fridge would only hold 4 on each shelf, how many shelves would he fill up? ",
      "final_answer": 8.0,
      "index": 330
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 50,
      "duration": 45.94752097129822,
      "templates": [
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a Python function that returns the answer.",
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef groups(A, B, C):\n    return (A + B) // C\n\n# usage example\ngroups(4, 5, 3) # will return 3 groups",
          "\nAnswer = (A + B) /C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef groupCalc(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_team_groups(boys, girls, group_size):\n  total_teams = boys//group_size + girls//group_size\n  return total_teams\n  \nprint(debate_team_groups(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef Groups(A, B, C):\n  return (A + B) // C\n\nprint(Groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    num_boys = int(A/C)\n    num_girls = int(B/C)\n\n    return num_boys + num_girls\n    \nprint(num_groups(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return int(max(A,B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B)\u00f7C"
        ],
        [
          "\n\ndef splitTeam(A,B,C):\n  if C > A and C > B:\n    return 0\n  else:\n    return (A // C + B // C)\nprint(splitTeam(A,B,C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groupDivide(A, B, C): \n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups_solver(A, B, C):\n  return (A+B) // C",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          " \n\ndef groups(a,b,c):\n  return (a // c + b // c)",
          "\nAnswer = \\(\\frac{(A +B)}{C}\\)"
        ],
        [
          "\n\ndef debate_team(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups (A, B, C):\n    groups = min (A//C, B//C)\n    return groups",
          "\nAnswer = ((A+B)/C)"
        ],
        [
          "\n\ndef debateGroup(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_teams(A, B, C):\n    if A > 0 and B > 0 and C > 0:\n       return (A // C + B // C + (A % C + B % C) // C)\n    else:\n       return 0\n\n# Usage example:\n\nprint(debate_teams(10, 5, 3))\n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groupings(A, B, C):\n  return (A + B) // C\n\nresult = groupings(A, B, C)\nprint(result)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef debateteam(A, B, C):\n  total = A + B\n  groups = total // C\n  return groups",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groupDebate(A,B,C):\n  return (A + B) // C\n  \ngroupDebate(2, 3, 4) # Returns 1",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_group_num(A, B, C):\n  group_num = (A + B) / C\n  if (A + B) % C == 0:\n    return int(group_num)\n  else:\n    return int(group_num) + 1\n\nprint(debate_group_num(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groups(A,B,C):\n  return int((A+B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  return A//C + B//C + (A % C + B % C) // C\n\nprint(groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_team_groups(boys, girls, group_size):\n    total_members = boys + girls\n    total_groups = total_members // group_size\n    if total_members % group_size > 0:\n        total_groups += 1\n    return total_groups\n\nprint(debate_team_groups(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateGroups(a, b, c):\n  return (a // c) + (b // c) + (a % c) + (b % c)\n\nprint(calculateGroups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef debate_teams(a,b,c):\n  return (a//c + b//c) + ((a%c) + (b%c) > 0)\n\nprint(debate_teams(A,B,C))",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n  return (A + B) // C\n\nprint(numGroups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " The schools debate team had 28 boys and 4 girls on it. If they were split into groups of 4 how many groups could they make? ",
      "final_answer": 8.0,
      "index": 331
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 40,
      "duration": 34.92062520980835,
      "templates": [
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a Python function that returns the answer.",
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef baggies(A,B,C):\n  return (B + C) // A \n\nprint(baggies(A,B,C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numBaggies(A, B, C):\n  return (B + C) // A\n  \nThe function would return the number of baggies Maria can make.",
          "\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef baggies_of_cookies(A, B, C): \n    return (B // A) + (C // A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef make_baggies(A, B,C):\n    return min(B//A, C//A)",
          "\nAnswer = floor((A * B + C) / A)"
        ],
        [
          "\n\ndef baggies(A,B,C):\n  return min(B//A, C//A)",
          "\nAnswer = A * (B/A + C/A)"
        ],
        [
          "\n\ndef calculate_baggies(A, B, C):\n  baggies = min(B, C)//A\n  return baggies",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef cookie_baggies(A,B,C):\n    baggies = min(B//A, C//A)\n    return baggies\n\ncookie_baggies(A,B,C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef getBaggyNumber(A, B, C):\n  return min(B // A, C // A)  # Return the minimum number of baggies that can be made given A and B,C cookies.",
          "\nAnswer =  (A*(B + C))/A"
        ],
        [
          "\n\ndef baggie_maker(A, B, C):\n  return (B//A) + (C//A)",
          "\n\nAnswer = (A / (B + C)) * (B + C)"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  return min(B//A, C//A)",
          " \nAnswer = (A\u03b2B + C)/A"
        ],
        [
          "\n\ndef number_of_baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n  return min(B//A, C//A)",
          "\nAnswer = (A*(B + C))/A"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = floor(min(A, B+C)/A)"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n  baggies = min(B//A, C//A)\n  return baggies\n\nmake_baggies(A, B, C)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef numBaggies(A, B, C): \n  return (B+C) // A\n\nprint(numBaggies(A, B, C))",
          "\nAnswer = floor((A + B + C) / A)"
        ],
        [
          "\n\ndef baggie_calc(A, B, C):\n    return min(B // A, C // A)\n\nanswer = baggie_calc(A, B, C)",
          "\nAnswer = A*(B+C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = $\\frac{A*(B+C)}{A}$"
        ],
        [
          "\n\ndef cookie_baggies(A, B, C):\n  num_baggies = (B + C) // A\n  return num_baggies \n\nprint(cookie_baggies(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggie_maker(A, B, C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef makeBaggies(A,B,C):\n    return (B//A + C//A)",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Maria was making baggies of cookies with 8 cookies in each bag. If she had 5 chocolate chip cookies and 19 oatmeal cookies, how many baggies could she make? ",
      "final_answer": 3.0,
      "index": 332
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 36,
      "duration": 31.45926308631897,
      "templates": [
        "For Halloween Sarah received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a Python function that returns the answer.",
        "For Halloween Sarah received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef calculateCandy(A,B,C):\n  return (A+B)/C",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_lasting_day (A,B,C): \n  return (A+B)/C",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy_calc(A, B, C):\n  total_candy = A + B\n  return (total_candy // C) + 1\n  \nresult = candy_calc(A, B, C)\nprint(result)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef halloween_candy(A,B,C):\n  return (A + B)//C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_days(A, B, C):\n  total_pieces = A + B\n  days = total_pieces / C\n  return round(days)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyLasts(A, B, C): \n  return (A + B)//C \n  \nprint(candyLasts(7, 4, 2)) # 6 days",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C): \n  return ((A+B)//C) + ((A+B)%C > 0)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C): \n  duration = (A + B) // C \n  return duration",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef candy_lasts(A,B,C): \n  return (A+B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef candy_lasting(A, B, C):\n  total_candy = A + B\n  days = total_candy // C\n  \n  if total_candy % C > 0:\n    days += 1\n  \n  return days\n\nprint(candy_lasting(10, 20, 3))  # Returns 9",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef calculate_days(a, b, c): \n  total_pieces = a + b\n  days = total_pieces // c\n  return days",
          "\nAnswer = ((A + B) / C) days"
        ],
        [
          " \n\ndef candy_lasts(A, B, C): \n    total_candy = A + B\n    candy_days = total_candy // C\n    return candy_days\n\nprint(candy_lasts(50, 25, 3))  # output: 21",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef candy_days(A, B, C): \n  return (A + B) // C\n\nprint(candy_days(10, 15, 3)) # Answer = 8",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n  return (A + B) // C\n\nprint(candy_duration(8, 10, 2)) # Outputs 9",
          "\nAnswer = A / C + B / C"
        ],
        [
          "\n\ndef candy_lasts(A, B, C):\n  return (A + B) // C \n\nprint(candy_lasts(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long_will_candy_last(a, b, c):\n  num_days = (a + b) // c\n  return num_days\n\nprint(how_long_will_candy_last(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n    total_candy = A + B\n    duration = round(total_candy / C)\n    return duration\n\nprint(candy_duration(3, 4, 2))            #Prints 5 days",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_longevity (A, B, C):\n    total_candy = A + B\n    return total_candy // C",
          "\nAnswer = (A+B)/C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Sarah received 66 pieces of candy from neighbors and 15 pieces from her older sister. If she only ate 9 pieces a day, how long would the candy last her? ",
      "final_answer": 9.0,
      "index": 333
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 46,
      "duration": 48.65260910987854,
      "templates": [
        "Henry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Henry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef tray_trips(A, B, C):\n  return ((B + C) // A) + ((B + C) % A > 0)",
          "\n\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_trips(A, B, C):\n  return (B // A) + (C // A) + (1 if B % A > 0 else 0) + (1 if C % A > 0 else 0)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return math.ceil(B/A) + math.ceil(C/A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_trips (A,B,C):\n  return (B + C) // A + 1\n\n#Example:\nnum_trips (3,5,4)\n# Answer: 2",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B+C)//A + (B+C)%A",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + ((B + C) % A != 0)\n  \n# Example: numTrips(2, 5, 7)\n# Output: 4",
          "\nAnswer = (A+B+C) / A"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B + C)//A + int((B + C) % A > 0)",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_of_trips(a, b, c):\n  return (b + c) // a + (b + c) % a\n\n# call the function\nnum_of_trips(a = 3, b = 10, c = 20)\n# Answer: 8 trips",
          "\n\nAnswer = (B \u00f7 A) + (C \u00f7 A)"
        ],
        [
          "\n\ndef trips(A, B, C):\n  num_trips = math.ceil((B + C) / A)\n  return num_trips\n  \ntrips(A, B, C)",
          "\n\nAnswer = (A + B) / A + (A + C) / A = (B + 2C) / A"
        ],
        [
          "\n\ndef tray_trips(A, B, C):\n  ans = (B//A) + (C//A)\n  return ans\n\nprint(tray_trips(3, 12, 18))\n# This would return 5 trips.",
          "\nAnswer = ((B/A)+ (C/A))"
        ],
        [
          "\n\ndef trips(A,B,C):\n  trips = (B//A) + (C//A)\n  if B%A > 0:\n    trips += 1\n  if C%A > 0:\n    trips += 1\n  return trips\n  \nprint(trips(A,B,C))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef TripCalculator(A, B, C):\n  return math.ceil((B+C)/A)\n  \n  \ntrip_num = TripCalculator(A, B, C)\nprint(trip_num)",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n    return (B + C) // A + 1",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef numTrips(A,B,C):\n    return (B//A) + (C//A) + (B%A + C%A > 0)\n\nprint(numTrips(2,4,6)) # returns 4",
          "\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef calcTrips(A, B, C):\n  totalTrays = B + C\n  trips = totalTrays // A\n  if totalTrays % A > 0:\n    trips += 1\n  return trips\n\nprint(calcTrips(3, 5, 6))  # Output: 3",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pick_up_trays(A, B, C): \n  return (B + C) / A\n \ntrips = pick_up_trays(A, B, C)\nprint(trips)",
          "\n\nAnswer =  (A + B + C) / A"
        ],
        [
          "\n\ndef number_of_trips(a, b, c):\n  trips = (b + c) // a # integer division to determine number of trips\n  if (b + c) % a != 0: # if there are any remaining trays, add one more trip\n    trips = trips + 1\n  return trips\n\n# Sample Usage\nnumber_of_trips(3, 5, 7) # returns 3",
          "\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef total_trips(A,B,C):\n  return (B+C)//A + (B+C)%A\n\ntotal_trips(A,B,C)",
          "\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B // A) + (C // A) + (B % A) + (C % A)",
          "\nAnswer =  (A+B+C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + bool((B + C) % A)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numOfTrips(A, B, C):\n  return (B+C)//A if (B+C)%A == 0 else (B+C)//A + 1",
          "\nAnswer = (A + B)/A + (A + C)/A =  (A + B + A + C)/A"
        ],
        [
          "\n\ndef num_trips(A, B, C): \n  return (B//A + C//A + (B%A + C%A)//A + (B%A + C%A)%A)\n\nprint(num_trips(2, 9, 11)) \n# prints 6",
          "\nAnswer = [(A+B)+(A+C)]/A"
        ],
        [
          "\n\ndef pick_up(A,B,C):\n  return (B//A + C//A + (B%A + C%A + A - 1)//A)\n\nprint(pick_up(A,B,C))",
          "\n\nAnswer = ((A + B) + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Henry was helping the cafeteria workers pick up lunch trays, but he could only carry 9 trays at a time. If he had to pick up 29 trays from one table and 52 trays from another, how many trips will he make? ",
      "final_answer": 9.0,
      "index": 334
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 46,
      "duration": 42.68438386917114,
      "templates": [
        "Tiffany uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Tiffany uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef sameNumberPictures(A, B, C):\n  return (A+B)//C\n\nprint(sameNumberPictures(20, 30, 5))\n\nAnswer: 12",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef pic_albums(A, B, C): \n  return (A + B) / C",
          " \nAnswer = (A + B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef album_pictures(A, B, C):\n  return int((A + B) / C)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef albums(A, B, C):\n    return int((A + B) / C)\n  \nprint(albums(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef num_pics(A,B,C): \n  return (A + B) // C\n\n# Number of pictures in each album\nprint(num_pics(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef get_album_pics_count(A, B, C):\n   total_pic_count = A + B\n   return total_pic_count // C \n  \n#A is the number of pictures from her phone\n#B is the number of pictures from her camera\n#C is the number of albums created with the same amount of pictures in each album\n\nprint(get_album_pics_count(5, 10, 3",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef album_sorter(img_from_phone, img_from_camera):\n    total_pics = img_from_phone + img_from_camera\n    pics_per_album = total_pics//C\n    return pics_per_album",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef num_pics_in_albums(A, B, C):\n  return (A+B)//C\n\n# To find the number of pictures in each of the albums, the function takes the total number of pictures (A + B) and divides it by the number of albums (C).",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return int((A + B) / C)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef find_num(A, B, C):\n    total_pics = A + B\n    return total_pics / C\n  \n#A = 5 pics from phone\n#B = 9 pics from camera\n#C = 3 albums\n\nfind_num(5, 9, 3)\n# Answer = 6 pics in each album",
          " \n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef numOfPics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numPics(A, B, C):\n  totalPics = A + B\n  numPicsInAlbum = totalPics // C\n  return numPicsInAlbum\n  \nprint(numPics(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef albumPictures(A, B, C):\n  total = A + B\n  return total // C\n  \nprint(albumPictures(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_album_pictures(a,b,c):\n  return (a+b)//c\n\nprint(calculate_album_pictures(A,B,C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef albums_calculator(A, B, C):\n  total_pictures = A + B\n  pictures_in_each_album = total_pictures / C\n  return pictures_in_each_album\n\nprint(albums_calculator(A, B, C))",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef pic_sort (A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef picsPerAlbum(A, B, C):\n  total_pics = A+B\n  return total_pics//C\n\npicsPerAlbum(A,B,C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef numPics(A, B, C):\n  return (A + B) // C \n\n# This function takes three arguments: A, B, and C. It returns the number of pictures in each album (A + B divided by C).",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pic_count(A, B, C):\n  return (A + B) // C\n\n# example\nalbum_pic_count(6, 4, 3) # returns 4",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef pic_albums(A, B, C): \n  total_photos = A + B\n  pics_per_album = (total_photos // C)\n  return pics_per_album \n\nprint(pic_albums(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef numberOfPictures(A, B, C): \n  return int((A+B)/C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_pics_per_album(A, B, C):\n  total_pics = A + B\n  return total_pics / C\n\nprint(num_pics_per_album(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " Tiffany uploaded 7 pictures from her phone and 13 from her camera to facebook. If she sorted the pics into 5 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 4.0,
      "index": 335
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.495139837265015,
      "templates": [
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef shelves_used(A, B, C): \n  return (A + B) / C\n\nprint(shelves_used(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef shelvesAnswer(A, B, C):\n  return (A + B) // C\n\nprint(shelvesAnswer(20, 10, 5))\n# Output: 6  (20 + 10 = 30, 30 // 5 = 6)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef shelves_for_bears(A, B, C):\n  return (A + B) // C\n  \nresult = shelves_for_bears(A, B, C)\nprint(result)",
          "\n\nA + B / C = Answer \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numberOfShelves(A, B, C):\n  return (A + B) // C\n  \nprint(numberOfShelves(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_shelves(A, B, C):\n  return (A + B)//C\n\nprint(num_of_shelves(10, 20, 5)) # 6 shelves",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A+B)//C\n  \n#call the function\nnum_shelves(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_shelves(A, B, C):\n  return (A+B)//C\n  \nprint(calc_shelves(15, 20, 3))  # Returns 8",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_count(a, b, c):\n  shelf_count = (a + b) / c\n  return shelf_count\n\nprint(shelf_count(10, 5, 4))\n# Answer: 3.75 shelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numberOfShelves(A, B, C): \n  return (A + B) // C \n  \nprint(numberOfShelves(20, 10, 5)) \n\n// Output: 6",
          " \n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef num_of_shelves(A,B,C):\n  return (A+B)//C\n  \nprint(num_of_shelves(A,B,C))",
          "\nC = Number of bears on each shelf\nA + B = Total number of bears\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  return (A + B) // C\n\nprint(shelves(10, 5, 4))\n# Output: 3 shelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesUsed(a,b,c): \n  return (a+b)//c \n\nprint(shelvesUsed(25,10,4)) #Returns 7, since 25 + 10 = 35 and 35 divided by 4 = 7.4, rounded down to 7.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_amount(A, B, C):\n  return (A + B) // C\n  \nprint(shelf_amount(25, 150, 10))\n\nAnswer: 18 shelves",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shipment_shelves(A, B, C):\n  return (A + B) // C \n\nprint(shipment_shelves(10, 15, 3)) # returns 7 shelves",
          "\nAnswer = C * (A + B)"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_shelves(50, 25, 10))  # Returns 7",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(a, b, c):\n  return (a + b) // c\n\nanswer = calculate_shelves(a, b, c)\nprint(answer)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef countShelves(A, B, C):\n    total = A + B\n    shelvesNeeded = total // C\n    if total % C > 0:\n        shelvesNeeded += 1\n    return shelvesNeeded\n\nanswer = countShelves(A, B, C)",
          "\n\nAnswer = A + B/C"
        ],
        [
          "\n\ndef shelves_num(A, B, C):\n  return (A + B) // C\n  \n#Call function\nshelves_num(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_bears(A, B, C):\n  return (A + B)//C\n\nAnswer: shelves_bears(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numberOfShelves(a,b,c):\n  return (a+b)//c\n\nprint(numberOfShelves(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return ceil(float(A+B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C):\n  return (A + B) // C\n  \n#Example\nAnswer = shelvesUsed(20, 40, 10)\n#Result: 8",
          "\nAnswer = C/A + B/A"
        ],
        [
          "\n\ndef numOfShelves(A, B, C):\n  return (A + B) // C\n\nprint(numOfShelves(25, 17, 5)) # Output: 7",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef number_of_shelves(A, B, C): \n  return (A + B) // C\n  \nnumber_of_shelves(A, B, C)",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A toy store had 5 giant stuffed bears in stock when they got another shipment with 7 bears in it. The put the bears onto shelves with 6 on each shelf. How many shelves did they use? ",
      "final_answer": 2.0,
      "index": 336
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.249473094940186,
      "templates": [
        "Paul made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Paul made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef money_lasting(A, B, C):\n  return (A + B) / C\n\n# Call the function\nmoney_lasting(200, 100, 10)\n# Answer: 30 Weeks",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef money_lasts(A, B, C): \n    return (A + B) / C \n\nprint(money_lasts(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  return (A + B) / C\n\nprint(money_lasts(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef getMoneyDuration(A, B, C):\n    return (A + B) // C\n\nprint(getMoneyDuration(50, 20, 10))\n# This will return 7 (50 + 20 = 70, 70 // 10 = 7)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef money_length(A, B, C):\n  total = A + B\n  return total / C\n\nprint(money_length(50, 30, 10))\nprint(\"The money will last him 5 weeks.\")",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long (a, b, c): \n    total = a + b\n    weeks = total / c\n    return weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n    return int((A + B) / C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef CalcMoneyDuration (A, B, C):\n   total= A+B\n   duration = total/C\n   return duration\n\nprint(CalcMoneyDuration(250, 75, 25))  #This returns 11 weeks.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef time_to_spend(a,b,c):\n    total_dollars = a + b\n    time_to_spend = total_dollars / c\n    return time_to_spend\n\nprint(time_to_spend(A,B,C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calculate_savings_length(money_mowing_lawns, money_weed_eating, money_spent_weekly):\n    total_money = money_mowing_lawns + money_weed_eating\n    return total_money / money_spent_weekly\n    \nprint(calculate_savings_length(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_math(A, B, C): \n  return (A + B) // C\n\n# Call the function\nprint(money_math(15, 5, 3))\n# Output: 6 weeks",
          "\nAnswer = (A + B - C) / C weeks"
        ],
        [
          "\n\ndef calculateWeeks(a, b, c):\n  return (a + b)//c\n\n# Where a is the money made mowing lawns, b is the money made weed eating, and c is the weekly expenditure.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_weeks(A, B, C):\n  return (A + B)//C\n\nprint(calculate_weeks(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A,B,C):\n    total_money = A + B\n    weeks = total_money / C\n    return weeks",
          "\nAnswer =  (A + B) / C weeks"
        ],
        [
          " \n\ndef MoneyLast (A, B, C):\n  totalMoney = A + B\n  weeksInMoney = totalMoney / C\n  return weeksInMoney\n\nprint(MoneyLast(500, 250, 50))\n\nOutput: 10 weeks",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef moneySaved(A, B, C):\n  return round((A + B) / C)\n\nprint(moneySaved(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef mowWeed(A, B, C): \n    total = A + B \n    return total // C + (1 * (total % C != 0))\n\nprint(mowWeed(A, B, C))",
          "\nAnswer = (A+B)/C weeks"
        ],
        [
          "\n\ndef calculate_time(A,B,C):\n    total = A+B\n    weeks = total/C\n    return weeks\n\nprint(calculate_time(100,50,10)) # Answer: 8 weeks",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef time_money_lasts(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_left(A, B, C):\n  total_earnings = A + B\n  \n  return total_earnings / C",
          "\n \nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef how_long_will_money_last(a, b, c):\n    money_total = a + b\n    weeks = money_total // c\n    return weeks",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef calculateWeeks (a, b, c):\n  totalDollarEarned = a + b\n  return totalDollarEarned / c;\n\nprint(calculateWeeks(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef lawn_funds(A, B, C):\n  earned_total = A + B\n  ans = earned_total / C\n  return ans\n\nprint(lawn_funds(10, 15, 5))\n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef lawn_business(A, B, C):\n  total_income = A + B\n  weeks_to_last = total_income / C\n  return weeks_to_last\n\nprint(lawn_business(100,50,20))\n\nAnswer: 8.5 weeks",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " Paul made 68 dollars mowing lawns and 13 dollars weed eating. If he only spent 9 dollar a week, how long would the money last him? ",
      "final_answer": 9.0,
      "index": 337
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.90866994857788,
      "templates": [
        "While playing at the arcade, Edward won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a Python function that returns the answer.",
        "While playing at the arcade, Edward won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef candy_purchase(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_cost(A, B, C):\n  return (A + B) // C\n\nprint(candy_cost(50, 120, 10))\n# Answer: 18",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_for_candy(A, B, C):\n  total_tickets = A + B\n  candy_pieces = total_tickets // C\n  return candy_pieces",
          "\nAnswer = A + B // C"
        ],
        [
          " \n\ndef tickets_for_candy(a, b, c):\n  return (a + b) // c",
          "\nAnswer = \u230a(A + B) / C\u230b"
        ],
        [
          "\n\ndef total_tickets(A,B,C):\n    return (A + B) // C\n\ntotal_tickets(50,75,12) # returns 8",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_for_candy(A, B, C):\n  total_tickets = A + B\n  num_candy = total_tickets // C\n  return num_candy",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_purchase(a,b,c):\n  return (a+b)//c\n\n# Example usage\ncandy_purchase(10, 25, 3)\n#This would return 11, so Edward could buy 11 pieces of candy.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef arcade_tickets(A,B,C):\n    return (A+B)//C\n\nprint (arcade_tickets(22,16,4))",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candy_game(A, B, C):\n  total = A + B\n  candy = total // C\n  return candy",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef ticket_calculator(A,B,C):\n  total_tickets = A + B\n  candy = total_tickets // C\n  return candy\n\nticket_calculator(100,50,10) #returns 15",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyForTickets(A, B, C):\n  total_tickets = A + B\n  candy_count = total_tickets // C\n  return candy_count\n\ncandy_count = candyForTickets(10, 20, 5)\nprint(candy_count) # prints 12",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef arcade_calc(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyPrice(A, B, C):\n  return min(A // C, B // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_winnings(A, B, C): \n  return (A + B) // C",
          "\n\nAnswer = A + B - (C \u00d7 X), where X is the number of candy pieces."
        ],
        [
          "\n\ndef ticket_cost(A, B, C):\n    return A + B // C\n\nprint(ticket_cost(A, B, C))",
          "\n\nAnswer = A + B - (C x Number of candies)"
        ],
        [
          "\n\ndef buy_candy(A, B, C):\n  total_tickets = A + B\n  return total_tickets // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_purchase(A, B, C):\n  total_tickets = A + B\n  return total_tickets // C\n\nprint(candy_purchase(10, 20, 5)) # prints 6",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef candy_purchase(A, B, C):\n  return min(A//C, B//C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\n\ndef candy_count(A, B, C):\n return (A + B) // C\n\n",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_for_candy(A, B, C):\n  return min(A,B) // C",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef candy_buy(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_bought(A, B, C):\n     return A + B // C\n \n print(tickets_bought(20, 15, 3))",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef arcade_candy(A,B,C):\n    return max(A,B)//C",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef candyPurchase(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A+B) / C"
        ]
      ]
    },
    "source": {
      "question": " While playing at the arcade, Edward won 3 tickets playing 'whack a mole' and 5 tickets playing 'skee ball'. If he was trying to buy candy that cost 4 tickets a piece, how many could he buy? ",
      "final_answer": 2.0,
      "index": 338
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 44,
      "duration": 39.46264314651489,
      "templates": [
        "Megan's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a Python function that returns the answer.",
        "Megan's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef numberOfVans(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)",
          "\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_vans(A, B, C): \n  total_people = B + C \n  vans_needed = total_people // A \n  remainder = total_people % A \n  if remainder != 0: \n    vans_needed += 1 \n  return vans_needed",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef field_trip_vans(A,B,C):\n  total_passengers = B + C\n  vans_needed = total_passengers // A\n  if total_passengers % A > 0:\n    vans_needed += 1\n  return vans_needed",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numOfVans(A, B, C):\n    totalPeople = B + C\n    vansNeeded = totalPeople // A\n    if totalPeople % A > 0:\n        vansNeeded += 1\n    return vansNeeded",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n  return (B//A + (1 if B % A > 0 else 0)) + (C//A + (1 if C % A > 0 else 0))",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef calculateVans(A,B,C):\n  return (B//A + 1 + C//A + 1)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vansNeeded(A, B, C):\n  return math.ceil((B + C) / A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return (B // A) + (C // A) + (B % A != 0) + (C % A != 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n  total_people = B + C\n  vans_needed = total_people // A\n  if total_people % A != 0:\n    vans_needed += 1\n  return vans_needed",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n    total_people = B + C\n    total_vans = total_people // A\n    if total_people % A > 0:\n        total_vans += 1\n    return total_vans",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef field_trip(A, B, C):\n  return (B+C)//A + min((B+C)%A, 1)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numOfVans(A, B, C):\n return int(((B+C)/A)+1)",
          " \nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numVans(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef numberOfVans(A, B, C):\n  return (B + C) // A + (1 if (B+C) % A != 0 else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numOfVans(A, B, C) :\n    return (B + C) // A + (1 if (B + C) % A else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef find_vans(a, b, c): \n  return math.ceil((b + c) / a)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  num_vans = (B + C) // A\n  \n  if (B + C) % A > 0:\n     num_vans += 1\n  \n  return num_vans",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef vans(A, B, C):\n  return ceil(B/A)+ceil(C/A)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n  total = B + C\n  if total % A == 0:\n    vans = total // A  \n  else:\n    vans = total // A + 1\n  return vans",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A,B,C):\n    person_total = B + C\n    vans = person_total // A\n    if person_total % A != 0:\n        vans += 1\n    return vans",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Megan's class is going on a field trip to the zoo. If each van can hold 5 people and there are 25 students and 5 adults going, how many vans will they need? ",
      "final_answer": 6.0,
      "index": 339
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 46.2632200717926,
      "templates": [
        "Luke was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "Luke was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef pages_needed(b,c): \n  return math.ceil((b+c)/A)",
          "\nAnswer = B + C / A"
        ],
        [
          "\n\ndef numberOfPages(B, C):\n    totalCards = B + C\n    numberOfPages = totalCards // A\n    if totalCards % A > 0:\n        numberOfPages += 1\n\n    return numberOfPages",
          "\n\nAnswer = A + (B + C)/A"
        ],
        [
          "\n\ndef page_calculator(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  return round(total_cards/A)\n\nprint(page_calculator(B, C))",
          "\n\nAnswer = B + C \u00f7 A, rounded up to the nearest whole number."
        ],
        [
          "\n\ndef pagesNeeded(B, C):\n  return (B+C) // A + ((B+C) % A > 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(b, c):\n    return (b + c) // A + (b + c) % A\n\n# b represents the number of new cards, c represents the number of old cards, and A represent the number of cards per page",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef page_number(B, C):\n  return B + C // A + (1 if (B + C) % A else 0)",
          "\nAnswer = A + ((B+C)/A)"
        ],
        [
          "\n\ndef baseball_cards(B, C):\n    return (B+C)//A + 1",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages(b, c):\n  num_pages = (b + c) // A\n  if (b + c) % A > 0:\n    num_pages += 1\n  return num_pages",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baseball_cards(B, C):\n  total_cards = B + C\n  pages = total_cards // A\n  if total_cards % A != 0:\n    pages += 1\n  return pages",
          "\nAnswer = A + B + C - 1"
        ],
        [
          " \n\ndef num_pages(B, C):\n  total_cards = B + C\n  page_num = total_cards // A\n  if total_cards % A > 0:\n    page_num += 1\n  return page_num",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef card_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_pages(B, C):\n  pages = round((B + C)/A)\n  return pages",
          "\nAnswer = (B/A)+C"
        ],
        [
          "\n\ndef baseball_cards (B, C):\n   return (B + C) // A + ((B + C) % A > 0) \n\nAnswer: baseball_cards(B,C)",
          "\n\nAnswer = ceil(B/A + C/A)"
        ],
        [
          "\n\ndef baseballCards(b, c):\n  return int((b + c) / A) + 1",
          "\nAnswer =  Math.ceil((B + C) / A)"
        ],
        [
          "\n\ndef baseball_card_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = A + (C / B)"
        ],
        [
          "\n\ndef baseball_pages(newCards, oldCards):\n  return (newCards + oldCards) // A + (newCards + oldCards) % A",
          "\nAnswer = (B divided by A) + C"
        ],
        [
          "\ndef get_number_of_pages(b,c):\n  total_cards = b + c\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages += 1  \n  return pages",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef total_pages(new_cards, old_cards):\n  return (new_cards + old_cards) // A + 1",
          "\nAnswer = ((B/9) + (C/9))"
        ],
        [
          "\n\ndef pageCount(b, c):\n  return (b+c-1)//9 + 1",
          "\n\nAnswer = B + C/A"
        ],
        [
          "\n\ndef num_pages(new_cards, old_cards):\n  return (new_cards + old_cards) // A + (1 if new_cards % A > 0 or old_cards % A > 0 else 0)",
          "\n\nAnswer = A + (B + C - 1) / A"
        ],
        [
          " \n\ndef baseball_cards(B, C):\n  total_cards = B + C\n  return total_cards//A + (1 if total_cards % A > 0 else 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(newCards, oldCards):\n  totalCards = newCards + oldCards\n  return math.ceil(totalCards / 9)",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef pages_needed(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pagesNeeded(b, c): \n  return (b + c)//9 + 1",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  return (total_cards // 9) + 1\n  \n# Example\ncalculate_pages(20, 200) # will return 23 pages",
          "\nAnswer = B+C/A"
        ]
      ]
    },
    "source": {
      "question": " Luke was organizing his baseball cards in a binder with 3 on each page. If he had 3 new cards and 9 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 4.0,
      "index": 340
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 48.76741075515747,
      "templates": [
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a Python function that returns the answer.",
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C)//A\n\nprint(chicken_wings(3, 10, 5)) #Should return 5",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef equal_wings_per_person(A, B, C):\n  if B == 0:\n    return 0\n  else: \n    return round((A*B+C) / A)\n\nprint(equal_wings_per_person(A, B, C))",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n\n#Example\nchicken_wings(6, 20, 10)\n# Answer: 6",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  return int((b + c) / a)\n\nprint(chicken_wings(5, 3, 4))\n# Output: 2",
          "\n\nAnswer = B / A + C / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n  \ntotal_wings = chicken_wings(A, B, C)\nprint(\"Each person will get \" + str(total_wings) + \" chicken wings.\")",
          "\nAnswer = (A+C)/A"
        ],
        [
          "\n\ndef equal_wings(A, B, C):\n  return (B + C) // A\n\nequal_wings(A, B, C)",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef wings_per_person(A, B, C):\n    \n    total_wings = B + C\n    # Calculate wings per each person\n    wings_each = total_wings // A\n    return wings_each\n\nprint(wings_per_person(A, B, C))",
          "\nAnswer = (A \u00d7 B) / C"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  total_wings = b + c\n  wings_per_person = total_wings // a\n  return wings_per_person\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer =(B + C) / A"
        ],
        [
          "\n\ndef divide_chicken_wings(chicken_wings):\n  number_people = len(friends)\n  return int(chicken_wings / number_people)\n\nAnswer: divide_chicken_wings(A+B+C)",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  num_wings = (b + c) // a\n  return num_wings\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (A+C)/A"
        ],
        [
          "\n\ndef divide_wings(a, b, c):\n    total_wings = b + c\n    return total_wings // a\n\nprint(divide_wings(A, B, C))",
          "\n\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef numberOfChickenWings(A, B, C):\n  return (B + C) // A\n\n# For example\nprint(numberOfChickenWings(4, 10, 12))\n# Output: 5",
          "\nAnswer = (A x B) / C"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    total_wings = B + C\n    return total_wings // A\n\n#Example\nprint(chicken_wings(5, 8, 12))\n#Answer = 6",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numOfWings(A, B, C):\n  return (B+C)/A\n\nprint(numOfWings(8, 12, 20))\n# Answer: 6.5",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef chickenWings(A, B, C):\n  return (B + C) // A\n\nprint(chickenWings(5, 10, 5))\n\nThe answer would be 4.",
          "\n\nAnswer = (A + C)/A * B"
        ],
        [
          "\n\ndef chicken_wings (A,B,C):\n  return (B+C)/A \n\nprint (chicken_wings(A,B,C))",
          "\nAnswer = (A*B) / C"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  total_wings = b + c\n  each_person = total_wings // a\n  return each_person\n\n# To call the function\nnum_people = 5\ncooked_wings = 20\nextra_wings = 10\nchicken_wings(num_people, cooked_wings, extra_wings)\n\n# Output: 4",
          " \nAnswer = (A x B) / C"
        ],
        [
          "\n\ndef chicken_wings(a,b,c):\n  return ((b+c) // a)\n\nprint(chicken_wings(A,B,C))",
          "\n\nAnswer = (A + C)/B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (A x B) / C"
        ],
        [
          "\n\ndef get_wings(A, B, C):\n    return (B + C) // A\n\nprint(get_wings(A, B, C))",
          "\nAnswer =  (A + C) / B"
        ],
        [
          "\n\ndef wings_per_person(A, B, C):\n    return (B+C)//A\n\nwings_per_person(5, 10, 15) # returns 4",
          "\nAnswer = (A+C) / A"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  total_wings = b + c\n  return total_wings // a\n\nresult = chicken_wings(a, b, c)\nprint(result)",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  total_wings = B + C\n  return total_wings // A\n  \nprint(chicken_wings(A,B,C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef shareWings(a,b,c):\n  return (b+c)//a\n\nshareWings(A,B,C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numberChickenWings(A, B, C):\n  return (B + C) // A\n\nnumberChickenWings(A, B, C)",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " A group of 3 friends went into a restaurant. The chef already had 6 chicken wings cooked but cooked 3 more for the group. If they each got the same amount how many would each person get? ",
      "final_answer": 3.0,
      "index": 341
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 44,
      "duration": 43.74828219413757,
      "templates": [
        "Olivia uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Olivia uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0
      ],
      "completions": [
        [
          "\n\ndef albums(A, B, C):\n    return (A + B) / C",
          "\n\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef find_album_pics(pictures_A, pictures_B):\n  total_pics = pictures_A + pictures_B\n  album_pics = total_pics/C\n  return int(album_pics)\n  \n# call the function\nfind_album_pics(A, B, C)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_album_pics(total_num_of_pics):\n    return total_num_of_pics / C\n\ncalculate_album_pics(A + B)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_pics_in_each_album(A, B, C): \n  total_pics = A + B \n  pics_in_each_album = total_pics / C \n  return pics_in_each_album \n  \nprint(number_of_pics_in_each_album(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numOfPics(A,B,C):\n  return (A + B)//C \n\n# The function takes in three arguments:\n# A: number of pictures from the phone\n# B: number of pictures from the camera\n# C: number of albums \n# The function returns the number of pictures in each album.",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef album_pictures(A, B, C): \n  return (A + B) // C",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef albumPics(a, b, c): \n  result = (a+b)/c \n  return result \n\nprint(albumPics(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef albumPics(A,B,C):\n    totalPics = A + B\n    picsPerAlbum = totalPics // C\n    return picsPerAlbum",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef num_of_pics(A, B, C): \n  return (A + B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n \ndef album_pics (A,B,C):\n    return (A+B)//C\n\nalbum_pics(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_pics(a, b, c): \n  return int((a + b) / c)\n  \nprint(number_of_pics(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef albums(A, B, C): \n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics():\n    a = int(input(\"How many pictures from her phone? \"))\n    b = int(input(\"How many pictures from her camera? \"))\n    c = int(input(\"How many albums? \"))\n    return (a + b) // c\n\nalbum_pics()",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef sorting_pictures(a, b, c):\n  return (a+b) / c\n\nprint(sorting_pictures(10, 20, 5))\n\nThe answer would be 6 pictures in each album.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_quantity(A, B, C):\n  total_pics = A + B\n  return total_pics / C\n\nalbum_quantity(A,B,C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pic_sort(A, B, C):\n  return (A + B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef getAlbumPic(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef numPics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pics(A,B,C):\n  return (A+B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albums(a, b):\n  total = a + b\n  pics_per_album = total // c\n\n  return pics_per_album\n\nanswer = albums(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n    return (A + B)//C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pictures_in_album(a, b, c):\n  total_pics = a + b\n  return total_pics / c\n\nprint(pictures_in_album(100, 200, 4))  # prints 50",
          "\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " Olivia uploaded 5 pictures from her phone and 35 from her camera to facebook. If she sorted the pics into 8 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 5.0,
      "index": 342
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 40,
      "duration": 38.66841697692871,
      "templates": [
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(10, 20, 5))\n# Output: 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef giantStuffedBears(A, B, C):  \n  return (A + B) // C\n\nprint(giantStuffedBears(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B) // C\n  \nprint(shelves_used(10, 20, 5))  # output: 6",
          "\nAnswer = A+B / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n    return (A + B) // C  # returns the number of shelves used to store the bears",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef bears_on_shelves(A, B, C): \n  return (A + B) // C\n\nanswer = bears_on_shelves(A, B, C)",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  num_shelves = (A + B)// C\n  return num_shelves",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelvesUsed(a, b, c):\n  return (a + b) // c\n\nshelvesUsed(a, b, c)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef shelves_for_bears(A, B, C): \n  return (A+B)//C\n\nprint(shelves_for_bears(5, 8, 3)) \n\n# Output: 4",
          "\n\nA + B = C\nAnswer = C/A + B"
        ],
        [
          "\n\ndef num_shelves(a, b, c):\n  return (a + b) // c\n\nprint(num_shelves(6, 4, 3))\n# Output: 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numOfShelves(a, b, c):\n  return (a + b) // c\n\nprint(numOfShelves(a, b, c))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves_with_bears(A, B, C):\n  return (A + B) / C\n  \nshelves_with_bears(A, B, C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B) // C\n\n#example\nprint(shelves_used(10, 20, 5)) # 6 shelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A+B) // C\n\nprint(num_shelves(3, 8, 4)) # returns 3",
          "\n\nAnswer = C/B"
        ],
        [
          "\n\ndef numberOfShelves(A, B, C):\n  return (A + B) // C\n\nprint(numberOfShelves(5, 7, 3))\n# Output: 4",
          "\n\nAnswer = A + B/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B) // C\n\n# Example\nshelves_used(10, 15, 5)  # Returns 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_shelves(20, 5, 4)) # 6 shelves",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef total_shelves(A, B, C):\n    return (A + B) // C\n\n# the function would return the answer to this problem if \nA = 3, B = 10, and C = 2\ntotal_shelves(A, B, C) = 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_used(A,B,C):\n  return (A + B) // C\n\nprint(shelves_used(10,20,5)) # Answer: 6",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef bears_on_shelves(A, B, C):\n  return (A+B)//C\n\nprint (bears_on_shelves(90, 60, 12))\n# Output: 15",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef bearShelves (a,b,c):\n  total_shelves = (a+b)//c\n  return total_shelves\n\n#call the function \nprint(bearShelves(10,15,5))\n#output = 4",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A toy store had 6 giant stuffed bears in stock when they got another shipment with 18 bears in it. The put the bears onto shelves with 6 on each shelf. How many shelves did they use? ",
      "final_answer": 4.0,
      "index": 343
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 48.56603980064392,
      "templates": [
        "Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef no_of_trips(A, B, C):\n    total_trips = (B // A) + (C // A)\n    if B % A > 0:\n        total_trips += 1\n    if C % A > 0:\n        total_trips += 1\n    return total_trips\n\nprint(no_of_trips(2, 10, 11))  # Output: 6",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef numTrips(A,B,C):\n  return (B+C) // A + (B+C) % A\n\n#Example\nnumTrips(3,5,4)\n#Will return 3 trips",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\nfunction trips(a,b,c) {\n  return Math.ceil((b + c) / a);\n}",
          "\nAnswer = (A*B) + (A*C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C)//A + ((B + C) % A > 0)\n\n# if Jerry needs to pick up 5 trays from one table and 12 trays from another and can only carry 3 trays at a time, he will make 5 trips.\n\nnum_trips(3, 5, 12) # returns 5",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef num_of_trips(a, b, c):\n  return (b + c) // a + (b + c) % a \n \nnum_of_trips(A, B, C)",
          "\nAnswer = (A*B)+(A*C)"
        ],
        [
          "\n\ndef numTrips (A, B, C):\n    return (B+C) // A + (B+C) % A",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef calculate_trips(a,b,c):\n  total_trips = (b+c)//a\n  if ((b+c)%a > 0):\n    total_trips += 1\n  return total_trips\n\nprint(calculate_trips(a,b,c))",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef pick_up_trays(A, B, C):\n  return (B + C) // A + (B + C) % A",
          "\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          " \n\ndef num_trips(A, B, C):\n  trips = (B + C) // A\n  if (B + C) % A > 0:\n    trips += 1\n  return trips",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef num_trips(a, b, c):\n  return (b + c) // a + 1\n\nprint(num_trips(A, B, C))",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B + C) // A + (B + C) % A",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_of_trips (A, B, C):\n  return (B+C)//A + (B+C)%A",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef trips(A,B,C): \n  return (B + C) // A + (B + C) % A",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + int(((B + C) % A) > 0)",
          "\n\nAnswer = A + B + C."
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B+C)//A + ((B+C)%A > 0)\n\nprint(num_trips(3, 4, 6))\n# Output: 3",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef compute_trips(A, B, C):\n  trips = (B + C) // A\n  if (B + C) % A > 0:\n    trips += 1\n  return trips\n\nprint(compute_trips(A, B, C))",
          "\n\nAnswer = A + B + C - 2"
        ],
        [
          "\n\ndef num_trips(A,B,C): \n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef jerry_trips(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\n\nAnswer = ((A+B)/A) + ((A+C)/A)"
        ],
        [
          "\n\ndef num_of_trips(A,B,C):\n    return (B+C)/A\n\nprint(num_of_trips(A,B,C))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B+C)//A + min((B+C)%A != 0, 1)",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry 8 trays at a time. If he had to pick up 9 trays from one table and 7 trays from another, how many trips will he make? ",
      "final_answer": 2.0,
      "index": 344
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 42,
      "duration": 44.78185296058655,
      "templates": [
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a Python function that returns the answer.",
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef flowers_in_vases(A, B, C):\n  return int(max(B//A,C//A))",
          "\nAnswer = (A * B + A * C) / A"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return (B//A + C//A + (B%A + C%A)//A + ((B%A + C%A)%A > 0))\n  \nprint(flower_vases(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vasesNeeded(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (A \u00f7 B) + (A \u00f7 C)"
        ],
        [
          " \n\ndef num_vases(A,B,C):\n    total_flowers = B + C\n    num_vases = total_flowers // A \n    if total_flowers % A != 0: \n        num_vases += 1 \n    return num_vases\n\nprint(num_vases(A,B,C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  num_vases = (B//A) + (C//A)\n  return num_vases\n\nprint(flower_vases(A, B, C))",
          "\nAnswer = (A \u00d7 B) \u00f7 C"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n  return (B//A + C//A + (B%A + C%A > 0))\n  \n# Example calling the function\nprint(flower_vases(5, 10, 7))\n# This should return 3",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef flower_vases(A, B, C):\n    return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_vases(A, B, C):\n  return max(B//A, C//A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = ((B \u00f7 A) + (C \u00f7 A)) + 1"
        ],
        [
          " \n\ndef vases_needed(A, B, C): \n  return math.ceil((B + C) / A)",
          "\nAnswer = (A*B)/(A-C) + 1"
        ],
        [
          "\n\ndef numVases(A, B, C):\n    return max(B // A, C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B \u00f7 A) + (C \u00f7 A)"
        ],
        [
          "\n\ndef calculate_vases(flowers_a, carnations_b, roses_c):\n  total_flowers = flowers_a + carnations_b + roses_c\n  return math.ceil(total_flowers / flowers_a)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numVases(A,B,C):\n  return (B//A + C//A + (B%A + C%A) //A + int((B%A + C%A)%A > 0)) \n  \nprint(numVases(A,B,C))",
          "\nAnswer = A = (B + C) / A"
        ],
        [
          "\n\ndef how_many_vases(a,b,c):\n  total_flowers = b + c\n  return total_flowers // a\n  \nprint(how_many_vases(A,B,C))",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_vases(A, B, C):\n  return (B + C) // A + 1",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vase_calc(A, B, C):\n\tnum_vases = (B + C) // A\n\treturn num_vases\n\nprint(vase_calc(A, B, C))",
          "\n\nAnswer = (A \\times B) + (A \\times C)"
        ],
        [
          "\n\ndef num_of_vases(A, B, C):\n  return (B + C)//A + ((B + C) % A > 0)\n \nprint(num_of_vases(A, B, C))",
          "\n\nAnswer =  (B + C) / A"
        ],
        [
          " \n\ndef flower_vases(A, B, C):\n  vases_needed = (B + C) // A\n  return vases_needed",
          "\nAnswer = A = (B + C) / A"
        ],
        [
          "\n\ndef flower_vases(a, b, c):\n  return (b + c) // a\n  \nprint(flower_vases(A, B, C))",
          "\n\nAnswer = (B\u00f7A) + (C\u00f7A)"
        ],
        [
          "\n\ndef flower_vases(A,B,C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\n\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef flowerVases (A, B, C):\n  return int(max(B,C) / A) + (max(B,C) % A > 0)\n\nanswer = flowerVases(A,B,C)",
          "\n\nAnswer = (B/A) + (C/A)"
        ]
      ]
    },
    "source": {
      "question": " A vase can hold 5 flowers. If you had 6 carnations and 19 roses, how many vases would you need to hold the flowers? ",
      "final_answer": 5.0,
      "index": 345
    }
  },
  {
    "result": 81.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.53891611099243,
      "templates": [
        "Haley and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Haley recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Haley and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Haley recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        81.0,
        81.0,
        81.0,
        81.0,
        81.0
      ],
      "completions": [
        [
          "\n\ndef recycling_points(A, B, C):\n  return (B + C) * A\n\n# Calling the function\npoints = recycling_points(1, 5, 3)\n\nprint(points)\n# Output: 16",
          "\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef get_points(A, B, C):\n  return A * (B + C)",
          " \nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n  return (A*B) + (A*C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef pointsEarned(A,B,C):\n  return (B+C)*A\n\nanswer = pointsEarned(A,B,C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recycle_points(A, B, C): \n  return A*(B+C)",
          "\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points_earned(A, B, C):\n  total_points = (B + C) * A\n  return total_points",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return (A * B) + (A * C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef recycling_points(A,B,C):\n  return (B/A) + (C/A)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recyclingPoints(A, B, C): \n  return (B + C) / A",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(a,b,c): \n    return (b+c)*a\n\nprint(recycling_points(A,B,C))",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Haley and her friends were recycling paper for their class. For every 3 pounds they recycled they earned one point. If Haley recycled 11 pounds and her friends recycled 16 pounds, how many points did they earn? ",
      "final_answer": 9.0,
      "index": 346
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 38,
      "duration": 42.5661461353302,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef adoptionTime(A, B, C):\n  return (A + B) / C\n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef puppyAdoptionTime(A, B, C):\n  return (A+B) / C \nprint(puppyAdoptionTime(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef adoptionTime(a, b, c):\n    totalPuppies = a + b\n    adoptionDays = totalPuppies // c\n    return adoptionDays",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef time_for_adoption(A, B, C):\n  total_puppies = A + B\n  days_for_adoption = total_puppies / C\n  return days_for_adoption\n\nanswer = time_for_adoption(A, B, C)\nprint(answer)",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef puppies_adopted(a, b, c):\n  total_puppies = a + b\n  adoption_time = total_puppies / c\n  return adoption_time\n\nanswer = puppies_adopted(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n    totalPuppies = A + B\n    daysNeeded = totalPuppies / C\n    return daysNeeded\n\nprint(adoptionTime(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pet_shelter(A, B, C):\n  days = (A + B) / C\n  return days \n\nprint(pet_shelter(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef time_to_adopt(total_puppies, puppies_per_day):\n  return total_puppies / puppies_per_day\n\nAnswer:\ntime_to_adopt(A+B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  totalPuppies = A + B\n  adoptionDays = 0\n  while totalPuppies > 0:\n    totalPuppies -= C\n    adoptionDays += 1\n\n  return adoptionDays\n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef puppies_adoption(A, B, C):\n  total_puppies = A + B\n  days_to_adopt = total_puppies // C\n  return days_to_adopt\n\nprint(puppies_adoption(A, B, C))",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef puppies_adopted(A,B,C):\n    total = A + B\n    days = total // C\n    if total % C != 0:\n        days += 1\n    return days\n\nprint(puppies_adopted(A,B,C))",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef days_to_adopt(A, B, C):\n    total = A + B\n    days = total // C\n    remainder = total % C\n\n    if remainder == 0:\n        return days\n    else:\n        return (days + 1)\n\nprint(days_to_adopt(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  return ((a + b) / c)  # divide total number of puppies by number of puppies adopted per day to calculate days for all puppies to be adopted",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adopted_puppies(A, B, C):\n  total_puppies = A + B\n  days_required = total_puppies / C\n  return days_required\n\nprint(adopted_puppies(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef adoptPuppies(A, B, C): \n  total = A + B\n  days = round(total / C)\n  return days\n\nprint(adoptPuppies(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef pet_shelter_adoption(A, B, C):\n    totalPuppies = A + B \n    adoptionDays = totalPuppies // C\n    if totalPuppies % C != 0:\n        adoptionDays += 1\n    return adoptionDays\n\nprint(pet_shelter_adoption(10, 5, 4)) # Output: 4 days",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef time_for_adoption(initial_puppies, new_puppies, puppies_per_day):\n  total_puppies = initial_puppies + new_puppies\n  days_for_adoption = total_puppies / puppies_per_day\n  return days_for_adoption\n\ntime_for_adoption(A, B, C)",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef puppiesAdopted(A, B, C): \n  totalPuppies = A + B\n  return totalPuppies / C\n\nprint(puppiesAdopted(A,B,C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  total_puppies = a + b\n  return total_puppies / c\n\nprint(adoption_time(a, b, c))",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 17 puppies when another 55 were brought in. If 8 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 9.0,
      "index": 347
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 50,
      "duration": 44.70394992828369,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef num_groups(A, B, C):\n    return ((A + B) // C) + (1 if (A + B) % C != 0 else 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef total_groups(A,B,C):\n  return (A+B)//C\n\ntotal_groups(A,B,C)",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_groups(A, B, C):\n  return (A + B) // C\n\nnum_of_groups(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef num_groups(A, B, C):\n    total_players = A + B\n    num_groups = total_players // C\n    return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A,B,C):\n      return (A+B) // C\n\nAnswer:\nnumGroups(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    total_players = A + B\n    groups = total_players//C\n    return groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef team_groups(A,B,C):\n    total_players = A + B\n    num_groups = total_players // C\n    return num_groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_count(A, B, C):\n  total_players = A + B\n  return total_players // C\n\nprint(group_count(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\n\ndef groupCount(A, B, C):\n    total = A + B\n    groupNum = total // C\n    if total % C != 0:\n        return groupNum + 1\n    else:\n        return groupNum\n\nprint(groupCount(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n  return math.ceil((A + B) / C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef numOfGroups(A, B, C):\n    totalPlayers = A + B\n    groups = totalPlayers // C\n    return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(a, b, c):\n  return (a + b) // c\n\n#Usage\nnumGroups(3, 4, 2) #returns 4",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef baseball_groups(A, B, C):\n    total_players = A + B\n    return (total_players // C) + (total_players % C > 0)",
          "\nAnswer = ((A + B) \u00f7 C)"
        ],
        [
          "\n\ndef num_groups(A, B, C): \n  total_players = A + B \n  return total_players // C \n  \nprint(num_groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef group_teams(a, b, c):\n  num_groups = int(a/c) + int(b/c)\n  last_group = a % c + b % c\n  \n  if last_group > 0:\n    num_groups += 1\n    \n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(a,b,c):\n    return (a+b)//c\n\nprint(calculate_groups(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef baseball_team(A,B,C):\n  x = A + B\n  groups = int(x / C)\n  remainder = x % C\n  if remainder == 0:\n    return groups\n  else: \n    return groups + 1\n\nprint(baseball_team(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef getGroupNumber(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef getGroupQty(A, B, C):\n  totalPlayers = A + B\n  groupQty = totalPlayers // C\n  if totalPlayers % C != 0:\n    groupQty += 1\n  return groupQty\n\nprint(getGroupQty(10, 20, 5)) # should return 6",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef group_calculator(A, B, C): \n  return (A + B) // C\n  \nprint(group_calculator(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef group_count(A, B, C):\n    total_players = A + B\n    groups = total_players // C\n    if total_players % C != 0:  \n        groups += 1\n    return groups",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef baseballGroups(a,b,c):\n  totalPlayers = a + b\n  groups = totalPlayers // c \n  return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  total_players = A + B\n  return total_players // C if total_players % C == 0 else total_players // C + 1",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C): \n    num_players = A + B\n    groups = num_players/C\n    return groups",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 12 new players and 44 returning players. If the coach put them into groups with 8 players in each group, how many groups would there be? ",
      "final_answer": 7.0,
      "index": 348
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 36,
      "duration": 27.292682886123657,
      "templates": [
        "Frank had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Frank had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef toysC(A,B):\n  return (A + B) / C",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A+B)//C",
          "\nAnswer = A + B / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef toy_calculator(A, B):\n    C = (A + B) // 10\n    return C\n\ntoy_calculator(A, B)",
          "\n\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_toys_for_Frank(A, B):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toys_purchased(A, B, C):\n  return (A+B)//C",
          "\nA + B/C = Answer \nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A + B) / C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toys(A, B):\n  C = (A + B) / 2\n  return C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_toys(A, B):\n  C = (A + B) / 5\n  return int(C)",
          "\n\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_toys(A,B,C):\n  return (A+B)//C\n\nprint(num_toys(75,50,15))\n# prints 10",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef how_many_toys(A, B):\n  C = A + B\n  return C//toy_cost",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toy_price(A, B):\n  return (A + B)//C",
          "\nAnswer =  A + B \\div C"
        ],
        [
          "\n\ndef total_dollars(A, B):\n  return (A + B) / C\n\nWhere C is the amount of money each toy costs.",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef total_toys(A, B):\n  C = (A + B) / 10\n  return C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef total_toys(a, b):\n  c = a + b\n  return c // toys cost\n\n# Example\ntotal_toys(10, 20) # Returns 30",
          "\nAnswer = A+B \u00f7 C"
        ],
        [
          "\n\ndef toy_calculator(A, B):\n    C = (A + B) / 3\n    return C",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef calcToys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toy_cost(A,B):\n    C = (A+B)//3\n    return C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateToys(A, B):\n    return (A + B) // C",
          "\n\nAnswer = A + B/C"
        ]
      ]
    },
    "source": {
      "question": " Frank had saved up 3 dollars. If he received another 37 dollars for his allowance, how many 8 dollar toys could he buy? ",
      "final_answer": 5.0,
      "index": 349
    }
  },
  {
    "result": 15.0,
    "meta": {
      "n_calls": 50,
      "duration": 45.69436168670654,
      "templates": [
        "Luke was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "Luke was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        15.0
      ],
      "completions": [
        [
          " \n\ndef pagesUsedOnBinder(B, C):\n  return A + B + C",
          "\nAnswer = A + B + C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef baseball_pages(B, C):\n  pages = B + C + A\n  return pages",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages_needed = int(total_cards/A)\n  if total_cards % A != 0:\n    pages_needed += 1\n  return pages_needed\n\ncalculate_pages(B,C)",
          "\nAnswer = A+B+C"
        ],
        [
          "\n\ndef pages_needed(B, C):\n  return ((B + C) // A + 1)",
          "\nB + C / A = Answer \nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n  return (new_cards + old_cards) // A + (1 if (new_cards + old_cards) % A > 0 else 0)",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef numPages(B,C):\n    return B+C//9 + (1 if (B+C)%9 > 0 else 0)",
          "\n\nAnswer = B + C/A"
        ],
        [
          "\n\ndef calculate(b, c):\n  return (b + c) // A + (b + c) % A\n\nanswer = calculate(B, C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baseball_cards(B, C):\n  return (B + C) // A + 1",
          " \n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numPages(bCards, cCards):\n  totalCards = bCards + cCards\n  pages = totalCards // A\n  return pages",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_for_baseball_cards(B,C):\n  return (B+C) // A + 1",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef calculate_pages(newcards, oldcards):\n\n  pages = newcards + oldcards // A\n  if newcards + oldcards % A != 0:\n    pages += 1\n  \n  return pages\n\n# Example\ncalculate_pages(B, C)",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef card_pages(new_cards, old_cards):\n  return math.ceil((new_cards + old_cards) / 9)",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef page_number(b, c):\n  return (b + c) // A + 1",
          "\nAnswer = B+C/A"
        ],
        [
          "\n\ndef baseball_cards(B, C):\n  no_pages = (B+C)//A\n  if (B+C)%A > 0:\n    no_pages += 1\n  return no_pages",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calculate_pages(B, C):\n  total_cards = B + C\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = A + (B \u00f7 C)"
        ],
        [
          "\n\ndef totalPages(B, C):\n  return B // A + C // A + 1",
          "\nAnswer = A + B/C if not a whole number + 1"
        ],
        [
          "\n\ndef card_pages(b, c):\n  return (b + c) // A + 1",
          "\n\nAnswer = A + (B/C rounded up to nearest whole number)"
        ],
        [
          "\n\ndef pages_needed(B, C): \n  return (B + C) // A + 1",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef pageCalc(B, C):\n  total_cards = B + C\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef card_pages(new_cards, old_cards):\n    return (new_cards + old_cards) // 9 + (1 if (new_cards + old_cards) % 9 > 0 else 0)",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef fill_pages(B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef total_pages(new_cards, old_cards):\n  return round((new_cards + old_cards) / A + 0.49)\n  \nprint(total_pages(B, C))",
          "\nAnswer = A + (C / B)"
        ],
        [
          "\n\ndef num_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages = total_cards // A \n  if total_cards % A != 0:\n    pages += 1\n  return pages",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef baseball_cards(b, c):\n  return math.ceil((b+c)/A)",
          "\nAnswer = B + C / A"
        ],
        [
          "\n\ndef baseball_cards(new_cards, old_cards):\n    pages_used = (new_cards + old_cards) // 9 \n    if (new_cards + old_cards) % 9 != 0:\n        pages_used += 1\n    return pages_used\n\nprint(baseball_cards(B, C))",
          "\n\nAnswer = (B/A) + (C/A)"
        ]
      ]
    },
    "source": {
      "question": " Luke was organizing his baseball cards in a binder with 3 on each page. If he had 3 new cards and 9 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 4.0,
      "index": 350
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 48,
      "duration": 43.34126901626587,
      "templates": [
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a Python function that returns the answer.",
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef WingsSplit(A, B, C): \n  return (B + C) / A \n\nTotal = WingsSplit(A, B, C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          " \n\ndef evenly_divide_chicken_wings(A, B, C):\n  return (B + C) / A\n\nAnswer: (B + C) / A",
          "\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n\nanswer = chicken_wings(A, B, C)",
          "\n\nAnswer = (A x B) / C"
        ],
        [
          "\n\ndef numOfWings(A, B, C):\n  return (B + C) // A\n\nprint(numOfWings(5, 10, 15))\n# Output: 5",
          "\nAnswer =  (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) / A\n\n# Example:\n\nprint(chicken_wings(5, 10, 8)) \n# Output: 3.6",
          "\n\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef chicken_wings(a, b, c):\n  return (b+c)//a\n\nprint(chicken_wings(a, b, c))",
          "\n\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B+C) // A\n\nprint(chicken_wings(5, 10, 20))\n# Output: 8",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chickenwings(A, B, C):\n    total = B + C\n    result = total // A\n    return result\n\nprint(chickenwings(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  total_wings = B + C\n  return total_wings // A\n\nprint(chicken_wings(A, B, C))",
          "\n\nAnswer = (A x B) \u00f7 C"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) // A\n\n# For example\nchicken_wings(4, 10, 6) # returns 6",
          "\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef chickenWings(A, B, C):\n  return (B + C) // A\n\nprint(chickenWings(A, B, C))",
          "\n\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef num_chicken_wings(A, B, C):\n  total_chicken_wings = B + C\n  num_wings_each = total_chicken_wings // A\n  return num_wings_each",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          " \n\ndef wings_per_person(a, b, c):\n  return (b + c) // a\n\nprint(wings_per_person(7, 40, 10)) # 6",
          "\n\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef get_num_of_wings_per_person(A, B, C):\n    return (B + C) // A\n\n# example\nget_num_of_wings_per_person(5, 10, 5)\n# returns 4",
          "\nAnswer = (A x B)/C"
        ],
        [
          "\n\ndef num_of_wings(A, B, C):\n  return (B + C) / A\n\n#Output the result\nprint(num_of_wings(A, B, C))",
          "\nAnswer = (A \u00d7 B)/C"
        ],
        [
          "\n\ndef chickenwings(A, B, C):\n  return ((B + C) // A)\n\n# Example:\n\nanswer = chickenwings(8, 10, 10) \n# returns 6 wings per person",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_chicken_wings(A, B, C):\n  return (B + C) // A\n\nprint(num_chicken_wings(A, B, C))",
          "\nAnswer = (A + C)/B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n\nprint(chicken_wings(A, B, C))",
          "\n\nAnswer = (A*B + C) / A"
        ],
        [
          "\n\ndef divide_wings(a, b, c):\n    total = b + c\n    return total // a\n\nprint(divide_wings(A, B, C))",
          "\n\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef wingsPerPerson(A, B, C):\n    totalWings = B + C\n    return totalWings // A\n\nprint(wingsPerPerson(5, 10, 5)) # Returns 4",
          "\n\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef get_same_amount(A, B, C):\n  return (B + C) // A\n\nanswer = get_same_amount(A, B, C)",
          "\n\nAnswer = (A+C)/B"
        ],
        [
          "\n\ndef chickenWingDistribution(a, b, c):\n  return (b + c) // a\n  \nprint(\"Each person gets\" + str(chickenWingDistribution(a, b, c)) + \"chicken wings.\")",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef equalWeight(a, b, c):\n  return (b + c) // a\n\nprint(equalWeight(A, B, C))",
          "\n\nAnswer = (A * B + C) / A"
        ],
        [
          "\n\ndef share_chicken_wings(A, B, C): \n    return (B + C) / A\n\nResult: (B + C) / A chicken wings each",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A group of 3 friends went into a restaurant. The chef already had 6 chicken wings cooked but cooked 3 more for the group. If they each got the same amount how many would each person get? ",
      "final_answer": 3.0,
      "index": 351
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 34,
      "duration": 30.10659694671631,
      "templates": [
        "Olivia uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Olivia uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef album_pics(A, B, C):\n    return (A + B) / C\n\nprint(album_pics(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef albumPics(A, B, C):\n  return (A + B) / C\n\nprint(albumPics(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pictureAlbums(A, B, C):\n  return (A + B) / C",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef sort_photos(A, B, C):\n    return (A+B)//C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef sort_pics(A, B, C):\n  return (A+B)//C\n\nprint(sort_pics(A,B,C))",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef albumSize(totalPics):\n\talbums = totalPics / 3\n\treturn albums\n\nprint(albumSize(6)) # prints 2",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef divide_pics(A, B, C): \n    total = A + B \n    return total // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  total_pics = A + B\n  return total_pics / C\n\nprint(album_pics(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef album_count(A,B,C):\n  total_pics = A + B\n  pics_per_album = total_pics // C\n  return pics_per_album\n\nprint(album_count(A,B,C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef numberOfPicsPerAlbum(a, b, c): \n  return int((a+b)/c)\n\nprint(numberOfPicsPerAlbum(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(a,b,c):\n  return (a+b) // c\n  \nalbum_pics(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  return (A + B)//C",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef picture_albums(A, B, C):\n    return (A+B)//C",
          "\nAnswer = A+B/C"
        ],
        [
          "\n\ndef num_pics(A, B, C):\n  album_pic_num = (A + B) / C\n  return album_pic_num\n\nprint(num_pics(A, B, C))",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef oliviaAlbums(a, b, c):\n  total = a + b\n  return total // c\n\nprint(oliviaAlbums(10, 5, 4))\n# This will print 4, which represents the number of pictures in each album.",
          "\nAnswer = A/C + B/C"
        ]
      ]
    },
    "source": {
      "question": " Olivia uploaded 5 pictures from her phone and 35 from her camera to facebook. If she sorted the pics into 8 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 5.0,
      "index": 352
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.675992012023926,
      "templates": [
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0
      ],
      "completions": [
        [
          "\n\ndef print_shelves(A, B, C): \n  return (A+B) / C\n\nshelves_used = print_shelves(2,10,5)\nprint(shelves_used)\n\nOutput: 4 shelves",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef shelfCount(A,B,C):\n  return (A+B)//C \n  \nshelfCount(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  return (A + B) // C\n\nprint(shelf_count(7, 8, 3)) # answer is 5 shelves",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef shelf_count(a,b,c):\n    return (a+b)//c\n\nprint(shelf_count(a,b,c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B) // C\n\nprint(shelves_used(25, 10, 5))\n# Answer: 6 shelves",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(50, 30, 10)) \n#Answer: 8",
          "\n\nAnswer = B / C"
        ],
        [
          " \n\ndef numShelves(a, b, c):\n  return (a + b) // c\n\nprint(numShelves(10, 5, 3)) # Answer: 4 shelves",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelf_num(A, B, C):\n  return (A + B) // C\n\n# Call the function\nprint(shelf_num(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_calculator(a, b, c):\n  return (a + b) // c\n\nprint(shelf_calculator(10, 20, 5))\n# Output: 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_shelves(a, b, c):\n  return int((a+b)/c) \n\nprint(num_of_shelves(10, 5, 3)) #Answer: 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(a, b, c):\n  return (a + b)//c\n  \n#Example\nshelves(10, 8, 3)\n#Returns 5",
          "\nAnswer = ((A + B) / C)"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B)//C\n\nprint(shelves(4, 6, 3))\n# Output: 3",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n    return (A + B) // C\n    \nshelves_used(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A + B)//C\n\nshelves_used(A, B, C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C): \n  return (A + B) // C\n  \nprint(shelvesNeeded(20, 35, 6)) # Prints 8",
          "\nAnswer = ((A+B)/C)"
        ],
        [
          "\n\ndef numOfShelves(A, B, C): \n  return (A + B) // C\n  \n# example\nnumOfShelves(10, 5, 3) # Returns 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_shelves(a,b,c):\n  return (a + b) // c\n\nprint(number_shelves(5,10,3))\n# Output: 5",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelvesNeeded(a, b, c): \n  return (a + b) // c\n\nshelvesNeeded(20, 10, 5) \n\n#Answer: 5 Shelves",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelvesForBears(A, B, C): \n  return int((A + B) / C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numOfShelves(A, B, C):\n  return (A + B) // C\n\nnumOfShelves(10, 20, 5) \nAnswer: 6",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelvesInToyStore(A, B, C):\n  return (A + B) // C\n\nprint(shelvesInToyStore(10, 5, 3)) # returns 4",
          "\n\nA + B = C\n\nAnswer = C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(25, 15, 5)) # 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A + B) // C\n\nshelves_needed(4, 10, 3)\n# Returns 4",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A toy store had 6 giant stuffed bears in stock when they got another shipment with 18 bears in it. The put the bears onto shelves with 6 on each shelf. How many shelves did they use? ",
      "final_answer": 4.0,
      "index": 353
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 53.360215187072754,
      "templates": [
        "Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numTrips(A, B, C):\n  return ((B + C) // A)   + int(bool((B + C) % A))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B+C)/A\n  \nprint(calculateTrips(A, B, C))",
          "\n\nAnswer = (A + B) + (A + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n\nresult = trips(A, B, C)",
          "\nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef num_of_trips(A,B,C):\n  return (B+C)//A + (B+C)%A",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef tray_trips(A, B, C):\n  trips = (B // A) + (C // A)\n  if B % A > 0 :\n    trips += 1\n  if C % A > 0 :\n    trips += 1\n  return trips\n\nprint(tray_trips(2, 10, 8)) # Returns 5",
          "\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef calculate_trips(A,B,C):\n  return (B + C) // A + (B + C) % A\n\n#Assuming A, B, and C are all integers\n#If the result of (B + C) % A is 0, then he will make (B + C) // A trips. \n#If the result of (B + C) % A is not 0, then he will make (B + C",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pick_up(A, B, C):\n  return (B // A) + (C // A) + ((B % A) + (C % A) > 0)",
          "\n\nAnswer = (A + B) + (A + C) \u00f7 A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n  return (B+C)//A + 1",
          "\nAnswer = A + B + C - 2"
        ],
        [
          "\n\ndef trips(A,B,C):\n  return (B+C)//A + int((B+C)%A > 0)\n  \nprint(trips(A,B,C))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n  \n#Usage\ntrips(A, B, C)",
          "\nAnswer = (A + B + C) \u00f7 A"
        ],
        [
          "\n\ndef total_trips(a,b,c):\n    return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\n\nAnswer = A + B + C - 2"
        ],
        [
          "\n\ndef compute_trips(A, B, C):\n  trips = (B//A) + (C//A)\n  if B%A > 0 :\n    trips +=1\n  if C%A > 0:\n    trips += 1\n  return trips\n  \nprint(compute_trips(4, 10, 12))   # Output: 3",
          "\n\nAnswer = B + C / A"
        ],
        [
          "\n\ndef pick_up_trays(a, b, c):\n    return (b + c)//a + 1",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B + C)//A + 1  # adding 1 for any remainder if it can't divide evenly",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + (B + C) % A\n\n# To calculate the number of trips taken, call the function with the specified values\nprint(numTrips(A, B, C))",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  # return the number of trips required\n  return (B+C)//A + ((B+C) % A > 0)\n  \n# Example\nnumTrips(A=2, B=10, C=4) # returns 7",
          "\nAnswer = (A + B + C) \u00f7 A"
        ],
        [
          "\n\n\ndef num_trips(A, B, C):\n    return (B + C) // A + (1 if (B + C) % A != 0 else 0)",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          " \n\ndef pickUpLunch(A,B,C):\n  return (B+C)//A + ((B+C)%A > 0)",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          " \n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          " \n\ndef num_trips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)",
          "\n\nAnswer = (A + B) + (A + C) / A"
        ],
        [
          " \n\ndef num_trips(A,B,C):\n  return (B//A + C//A + 1)\n  \nprint(num_trips(A,B,C))",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef calculateTrips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n  \n#If Jerry needs to pick up 10 trays from one table and 12 trays from another,\nprint(calculateTrips(A= 3, B= 10, C= 12))\n# outputs: 4",
          "\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef num_of_trips(A, B, C):\n  return (B+C)//A + ((B+C)%A > 0)\n\nprint(num_of_trips(A, B, C))",
          "\n\nAnswer = ((B/A) + (C/A))"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n    return (B // A if B // A != 0 else 1) + (C // A if C // A != 0 else 1)",
          "\n\nAnswer = (A + B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry 8 trays at a time. If he had to pick up 9 trays from one table and 7 trays from another, how many trips will he make? ",
      "final_answer": 2.0,
      "index": 354
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 51.37252402305603,
      "templates": [
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a Python function that returns the answer.",
        "A vase can hold A flowers. If you had B carnations and C roses, how many vases would you need to hold the flowers?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef find_vases(A, B, C):\n    return (B + C)//A + 1\n    \nfind_vases(A, B, C)",
          "\nAnswer = (B \u00f7 A) + (C \u00f7 A)"
        ],
        [
          "\n\ndef vases_needed (A, B, C):\n  return (B // A + C // A) + 1",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef find_vases(A, B, C):\n  return (B // A) + (C // A) + 1\n  \n  # A is the number of flowers each vase can hold\n  # B is the number of carnations\n  # C is the number of roses",
          "\nAnswer = (A \\times B) + (A \\times C)"
        ],
        [
          "\n\ndef number_of_vases(A, B, C):\n  return (B // A) + (C // A) + 1 # add one for the remainder",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vase_calc(A, B, C):\n  return (B // A) + (C // A)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_vases(A, B, C):\n  vases_needed = (B + C) // A\n  return vases_needed",
          "\n\nAnswer = A = ceil(B/2 + C/3)"
        ],
        [
          "\n\ndef calculate_vases(A,B,C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          " \n\ndef calculate_vases(A, B, C):\n    return (B//A + C//A + (B%A + C%A)//A + (B%A + C%A) % A > 0)",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef findVases(A, B, C):\n  return (B + C) // A + 1",
          "\nAnswer = (B/A)+(C/A)"
        ],
        [
          "\n\ndef num_of_vases(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef flower_vases(A,B,C):\n  total_flowers = B + C\n  vase_num = total_flowers // A\n  if total_flowers % A != 0:\n    vase_num += 1\n  \n  return vase_num\n  \nprint(flower_vases(A,B,C))",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef getVaseNum(a, b, c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          " \nAnswer = (A/ (B+C)) + ((B+C) mod A)"
        ],
        [
          "\n\ndef flower_vase(A,B,C):\n  return (B//A + C//A + (B%A + C%A)//A + (B%A + C%A)%A)\n\nprint(flower_vase(A,B,C))",
          "\n\nAnswer =  \\(\\frac{A*(B+C)}{A}\\)"
        ],
        [
          "\n\ndef number_of_vases(A, B, C):\n  return (B // A) + (C // A) + (B % A) + (C % A)",
          "\nAnswer = (A / (B + C)) rounded up."
        ],
        [
          " \n\ndef num_vases(A, B, C):\n  return (B//A + C//A + 1)\n    \nnum_vases(A, B, C)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vases_needed(A, B, C):\n  return (B + C) // A + 1",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vase_count(A, B, C):\n    total_flowers = B + C\n    vases_needed = total_flowers / A\n    return vases_needed",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vase_count(A, B, C):\n  return (B + C) // A + 1",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_vases(A, B, C):\n  return (B // A + 1) + (C // A + 1)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_vases(a, b, c):\n  total_flowers = b + c\n  return int(total_flowers / a) + (total_flowers % a > 0)\n\nprint(num_of_vases(A, B, C))",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_of_vases(a,b,c):\n  return max(b//a, c//a)",
          "\nAnswer = (A * B) / C + (B % C)"
        ],
        [
          "\n\ndef vases_required(A,B,C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef total_vases(a, b, c): \n  return (b + c) // a + 1\n  \ntotal_vases(A, B, C)",
          "\n\nAnswer = A \u2217 (B/A + C/A)"
        ],
        [
          "\n\ndef vases_needed(A, B, C):\n  return (B//A + C//A + (B%A > 0) + (C%A > 0))\n  \nvases_needed(5, 10, 20)\n\n# 4 vases",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_vases(A, B, C):\n  total_flowers = B + C\n  return total_flowers / A\n\nprint(number_of_vases(A, B, C))",
          "\nAnswer = (A*B + A*C)/A"
        ]
      ]
    },
    "source": {
      "question": " A vase can hold 5 flowers. If you had 6 carnations and 19 roses, how many vases would you need to hold the flowers? ",
      "final_answer": 5.0,
      "index": 355
    }
  },
  {
    "result": 81.0,
    "meta": {
      "n_calls": 18,
      "duration": 15.47942304611206,
      "templates": [
        "Haley and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Haley recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Haley and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Haley recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        81.0,
        81.0,
        81.0,
        81.0,
        81.0
      ],
      "completions": [
        [
          "\n\ndef recycle(A,B,C):\n  return A*(B+C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(A,B,C):\n  return (A*B) + (A*C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef RecyclingPoints(A, B, C):\n   return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recyclePoints(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef points(A, B, C):\n    return A * (B + C)",
          "\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef recycle_points(A, B, C):\n  return (B + C)//A",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycle_points(A,B,C): return A*(B+C)",
          "\nAnswer = (A*B) + (A*C)"
        ],
        [
          "\n\ndef recycle_points(A, B, C):\n  points = A * (B + C)\n  return points",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef points_earned(A, B, C): \n  total_points = (B + C)/A \n  return total_points",
          "\nAnswer = A * (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Haley and her friends were recycling paper for their class. For every 3 pounds they recycled they earned one point. If Haley recycled 11 pounds and her friends recycled 16 pounds, how many points did they earn? ",
      "final_answer": 9.0,
      "index": 356
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 57.495731353759766,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef how_long(A, B, C):\n  total_puppies = A + B\n  days_needed = total_puppies / C\n  return days_needed\n\nprint(how_long(A, B, C))",
          " \nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef pet_shelter(A, B, C):\n  total_puppies = A + B\n  return total_puppies // C\n  \nprint(pet_shelter(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption_time(A, B, C):\n    total_pets = A + B\n    return total_pets / C\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adoptPetShelter(A, B, C): \n    return (A + B) // C\n\nanswer = adoptPetShelter(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef find_adoption_time(A, B, C):\n  total_puppies = A + B\n  adoption_time = total_puppies / C\n  return adoption_time\n  \nprint(find_adoption_time(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  total_puppies = A + B\n  time = total_puppies / C  \n  return time\n\nresult = adoptionTime(A, B, C)\nprint(result)",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  total = a + b\n  return total/c\n  \nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef solve(a, b, c):\n    total_puppies = a + b\n    days = total_puppies / c\n    return days\n\nanswer = solve(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef puppy_adoption(A,B,C):\n  total_puppies = A + B\n  days_to_adopt = total_puppies / C\n  return days_to_adopt\n# Call the function with the parameters of A,B,C\nprint(puppy_adoption(A,B,C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef adoptionTime(A,B,C):\n  return (A+B)/C",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef pet_shelter(A, B, C):\n  total_puppies = A + B\n  days_to_adopt = total_puppies // C\n  return days_to_adopt\n\nprint(pet_shelter(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime (A, B, C): \n    total = A + B\n    days = total // C\n    remainingPuppies = total % C\n    if remainingPuppies > 0: \n        days += 1 \n    return days\n\nprint (adoptionTime (A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppies_adopted(A, B, C):\n    days_needed = (A + B) // C\n    return days_needed\n\npuppies_adopted(A, B, C)",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adopted_puppies(A, B, C):\n  total_puppies = A + B \n  adoption_days = total_puppies // C\n  \n  return adoption_days\n\nanswer = adopted_puppies(A, B, C)",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppies_to_adoption(A, B, C):\n    total_puppies = A + B\n    total_days = total_puppies // C\n    return total_days\n\nprint(puppies_to_adoption(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adopted_puppies(A, B, C):\n    total_puppies = A + B\n    days = total_puppies / C\n    return days\n\nprint(adopted_puppies(96, 14, 6)) # Will return 17.33 days.",
          "\nAnswer = (A+B) / C days"
        ],
        [
          "\n\ndef how_long_to_adopt(A, B, C): \n  total = A + B \n  return total / C \n  \nprint(how_long_to_adopt(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppies_adopted(A, B, C): \n  return (A + B) // C\n\npuppies_adopted(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adopted_puppies(A, B, C):\n  total_puppies = A + B\n  days = total_puppies // C\n  if total_puppies % C != 0:\n    days += 1\n\n  return days\n\nprint(adopted_puppies(10, 15, 5))# 4 days",
          "\nAnswer = (A+B) / C days"
        ],
        [
          " \n\ndef puppyAdoption(a, b, c):\n  numPuppies = a + b \n  return (numPuppies/c)\n\nanswer = puppyAdoption(A, B, C)\nprint(\"It would take \" + str(answer) + \" days for all the puppies to be adopted.\")",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef puppy_adoption(A,B,C):\n  total_puppies = A + B\n  days = total_puppies // C\n  if (total_puppies % C != 0):\n    days += 1\n  return days\n\nAnswer = puppy_adoption(A,B,C)",
          "\n(A + B) / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef puppies_adopted(A, B, C):  \n    total_puppies = A + B \n    days_needed = total_puppies // C \n    if total_puppies % C > 0: \n        days_needed += 1 \n    return days_needed \n  \nprint(puppies_adopted(A,B,C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef pet_shelter(a,b,c):\n  total_puppies = a + b\n  days = total_puppies // c\n  if (total_puppies % c > 0):\n    days+=1\n  return days \n\nprint(pet_shelter(10, 5, 3))  # Should print 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption_time(puppies, adoption_rate):\n    return (puppies / adoption_rate)\n\nprint(adoption_time(A+B, C))",
          "\nAnswer = (A + B) / C  days"
        ],
        [
          "\n\ndef pet_shelter(A,B,C):\n    total_puppies = A + B\n    days = total_puppies // C\n    if total_puppies % C > 0:\n        days += 1\n    return days\n\nanswer = pet_shelter(A,B,C)",
          "\n\nAnswer = (A + B) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 17 puppies when another 55 were brought in. If 8 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 9.0,
      "index": 357
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 44,
      "duration": 43.86896085739136,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0
      ],
      "completions": [
        [
          "\n\ndef numberOfGroups(A,B,C):\n  return (A+B) // C \n\nnumberOfGroups(A, B, C)",
          "\n\nAnswer = (A + B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef group_maker(A, B, C):\n  return (A + B) // C \n  \ngroup_maker(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  total_players = A+B\n  return total_players//C\n  \nprint(calculate_groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return (A + B) // C\n  \nprint(num_groups(5, 8, 4)) # Answer: 3",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef groupDivision(A, B, C):\n  return (A + B) // C\n\nExample: groupDivision(3, 5, 4)\nAnswer: 2",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C): \n  total = A + B\n  if total % C == 0:\n    return total // C\n  else:\n    return (total // C) + 1\n\nprint(number_of_groups(16, 8, 4)) #Will return 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calcGroups(A, B, C): \n  totalPlayers = A + B\n  return totalPlayers // C \n  \n# Usage \ncalcGroups(5, 6, 3) \n# Returns 4",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef get_num_groups(a,b,c): \n  return (a + b) // c\n  \nprint(get_num_groups(10, 10, 4))\n# Output: 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    groups = (A + B) // C\n    return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef baseball_teams(a, b, c):\n  total_players = a + b\n  num_groups = total_players // c\n  \n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    return (A+B)//C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group(A, B, C):\n    return (A + B) // C \n\ngroup(A, B, C)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef baseballTeams(A, B, C):\n    total_players = A + B\n    if total_players % C == 0:\n        return total_players // C\n    else:\n        return total_players // C + 1\n\nnumber_of_groups = baseballTeams(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef baseballTeams(A, B, C):\n  return (A + B) // C\n\nprint(baseballTeams(12, 16, 4)) # returns 6",
          "\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef baseball_groups(a, b, c):\n  total_players = a + b\n  num_groups = total_players // c\n  remainder = total_players % c\n  if remainder > 0:\n    num_groups += 1\n  return num_groups",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef group_creater(a, b, c):\n  total_players = a + b\n  if total_players % c == 0:\n    return total_players // c\n  else:\n    return total_players // c + 1\n  \nprint(group_creater(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef calculate_group_number(a, b, c):\n  num_players = a + b\n  num_groups = num_players // c\n  if num_players % c != 0:\n    num_groups += 1\n  return num_groups\n\nprint(calculate_group_number(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calcGroups(A, B, C):\n  total = A + B\n  amountOfGroups = total // C\n  \n  return amountOfGroups",
          "\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    return (A + B) // C\n\nnum_groups(5, 10, 3)\n# Returns 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C): \n    return (A + B) // C\n\nprint(number_of_groups(5, 9, 4)) # Output: 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n return (A + B) // C\n\nprint(numGroups(10, 5, 4))\n# Output: 3",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef numberOfGroups(A,B,C):\n  return (A + B) // C\n\nprint(numberOfGroups(5, 10, 4))\n# Output: 4",
          "\nAnswer = (A+B)/C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 12 new players and 44 returning players. If the coach put them into groups with 8 players in each group, how many groups would there be? ",
      "final_answer": 7.0,
      "index": 358
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 42,
      "duration": 33.19890832901001,
      "templates": [
        "Frank had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Frank had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          " \n\ndef toys(A, B):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef ToyCalculator(A, B):\n  return (A + B) / C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef buyToys(A, B):\n    return (A + B) / C",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef buy_toys(A, B):\n  return (A+B)//C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef numToys(A, B):\n  return (A+B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toy_price(A,B,C):\n  return (A+B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef Frank_toys(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateTotalCost(a,b,c): \n  return (a+b)//c\n\ncost = calculateTotalCost(A, B, C)\nprint(\"Frank could buy \"+ str(cost) + \" toys.\")",
          "\n\nA + B = C\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef total_toys(A, B):\n C = (A + B) / 5\n return C\n\ntotal_toys(A,B)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_toys(A, B, C): \n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toy_price(A, B): \n  C = (A + B) // 3 \n  return C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toy_purchase(A, B):\n    C = (A + B) // 3\n    return C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateToys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toyBuyer(A, B):\n    return (A + B) // C",
          "\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys_purchasable(A, B):\n    C = A + B\n    return C // toys_cost\n\ntoys_cost = int(input(\"Enter the cost of the toys: \"))\nA = int(input(\"Enter the amount Frank saved up: \"))\nB = int(input(\"Enter the amount Frank received for his allowance: \"))\n\nprint(\"Frank can purchase a total of \" + str(toys_",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef new_total(A, B):\n  C = (A + B) // toyscost\n  return C",
          " \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_allowance(A, B, C):\n  return (A + B) // C",
          "\nA + B / C = Answer \nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toy_calculator(a,b): \n  c = a + b \n  num_toys = c // 10 \n  return num_toys",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          " \n\ndef newTot(A, B):\n  C = A + B\n  return C/10\n  \nanswer = newTot(A, B)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toyCalculator(A, B):\n  # Calculate and store the total amount of money \n  total = A + B\n  # Use total to calculate the amount of toys Frank could buy\n  toys = total // C\n  # Return the number of toys\n  return toys",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef toy_calculator(A, B):\n  C = (A + B) // 3\n  return C",
          "\nAnswer = A + B / C"
        ]
      ]
    },
    "source": {
      "question": " Frank had saved up 3 dollars. If he received another 37 dollars for his allowance, how many 8 dollar toys could he buy? ",
      "final_answer": 5.0,
      "index": 359
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 48,
      "duration": 47.89648795127869,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef petShelter(A, B, C): \n    return (A + B) / C",
          "\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef adoption_time(A, B, C): \n  return (A + B) // C\n  \nprint(adoption_time(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adoption(a, b, c):\n  total_puppies = a + b\n  days = total_puppies / c\n  return days\n\nprint(adoption(a, b, c))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppiesAdopted(A, B, C):\n    totalPuppies = A + B\n    totalDays = totalPuppies /C\n    return totalDays",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pet_shelter(A, B, C):\n  total = A + B\n  days = total / C\n  return days \n\nprint(pet_shelter(A, B, C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adoptPuppies(A, B, C):\n  return (A + B) / C\n\nprint(adoptPuppies(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef timeToAdopt(A, B, C):\n  totalPuppies = A+B;\n  return totalPuppies // C;",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef adopted_time(A, B, C):\n  total_puppies = A + B\n  return total_puppies / C\n\nprint(\"It will take \" + str(adopted_time(A, B, C)) + \" days to adopt all the puppies.\")",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionDays(A, B, C): \n  remainingPups = A + B  \n  adoptionDays = remainingPups // C\n\n  if (remainingPups % C > 0):\n    adoptionDays += 1\n  \n  return adoptionDays  \n\nanswer = adoptionDays(A, B, C)\nprint(answer)",
          "\nAnswer = (A+B) / C days"
        ],
        [
          "\n\ndef adoptedPuppies(A, B, C):\n  totalPuppies = A + B\n  daysNeeded = totalPuppies / C\n  return daysNeeded\n\nprint(adoptedPuppies(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef total_time_to_adopt_all_puppies(A, B, C):\n  total_puppies = A + B\n  days = total_puppies // C\n  if total_puppies % C > 0:\n    days += 1\n  return days\n\n#Examples\n#Call to function\ntotal_time_to_adopt_all_puppies(10, 5, 4)\n",
          "\nAnswer = (A + B) / C  days"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  totalPuppies = A + B \n  adoptionTime = totalPuppies // C \n  return adoptionTime \n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef puppiesAdopted(A, B, C):\n  return (A + B) // C\n\n# example\npuppiesAdopted(32, 18, 7)\n# returns 7",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef PuppyAdoption(a, b, c):\n  return (a + b) / c\n\nanswer = PuppyAdoption(A, B, C)\nprint(answer)",
          "\n\nAnswer = ((A + B) / C) days"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n  total = A + B\n  days = total // C\n  if total % C != 0:\n    days += 1\n  return days\n\nprint(calculate_time(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppyAdoption(a, b, c):\n    days = 0\n    totalPuppies = a + b\n    \n    while totalPuppies > 0:\n        totalPuppies -= c\n        days += 1\n        \n    return days\n\nprint(puppyAdoption(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n    return (A + B) // C\n\nprint(adoptionTime(A, B, C))",
          "\nAnswer = 106.5 days"
        ],
        [
          "\n\ndef time_for_puppies(A,B,C):\n    # calculate the total number of puppies\n    total_puppies = A+B\n\n    # calculate how many days it would take to adopt all puppies\n    days_needed = total_puppies // C\n    \n    return days_needed\n\nprint(time_for_puppies(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_time(a,b,c):\n    total_puppies=a+b\n    return int(total_puppies/c)\n\nanswer=calculate_time(a,b,c)\nprint(\"It would take \"+str(answer)+\" days to adopt all of the puppies.\")",
          "\n\nAnswer = ((A + B) / C) days"
        ],
        [
          "\n\ndef adoption_days(A, B, C):\n    days = (A + B) // C\n    return days\n\nprint(adoption_days(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adoption_time(A, B, C): \n  total_puppies = A + B \n  time_in_days = total_puppies / C \n  return time_in_days \n\nprint(adoption_time(10, 5, 2)) \n\nThis would return 7.5 days.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelterAdoptions(A, B, C):\n  totalPuppies = A+B\n  adoptionTime = totalPuppies // C\n  return adoptionTime\n\nanswer = shelterAdoptions(A, B, C)\nprint(answer)",
          "\nAnswer = A + B / C days"
        ],
        [
          "\n\ndef adoption_time(A, B, C):\n  return (A+B)/C\n\nprint(adoption_time(A, B, C))",
          "\n\nAnswer = (A+B)/C  days"
        ],
        [
          "\n\ndef puppyAdoptions(A, B, C): \n  total = A + B\n  time = total / C\n  return time \n\nprint(puppyAdoptions(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 8 puppies when another 19 were brought in. If 3 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 9.0,
      "index": 360
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 49.12497305870056,
      "templates": [
        "For homework Faye had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a Python function that returns the answer.",
        "For homework Faye had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef math_and_spelling(a, b, c):\n  return (a+b)/c\n\nanswer = math_and_spelling(A, B, C)\nprint(\"It will take Faye\", answer, \"hours to finish all of her problems.\")",
          "\n\nAnswer = (A + B + C) / 2"
        ],
        [
          "\n\ndef time_taken(A, B, C):\n  return (A + B + C) / 3",
          "\n\nAnswer = (1A + 1B) / C + 1"
        ],
        [
          "\n\ndef homework(A, B, C):\n  return A + B + C",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef how_long(a,b,c):\n  total_time = (a + b + c) / 60\n  return total_time\n\nprint(how_long(10, 10, 10)) # 0.5",
          "\n\nAnswer = 2 hours"
        ],
        [
          "\n\ndef timeFinishingAllProblems(A, B, C):\n  return (A + B + C) / 1.0",
          "\nAnswer = A + B + C / 1 hour"
        ],
        [
          "\n\ndef timeToFinish(mathProblems, spellingProblems, extraProblems):\n  return (mathProblems + spellingProblems + extraProblems) / 60\n\nprint(timeToFinish(10, 5, 10))  # This will return 2 hours",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef calculate_time(math_problems, spelling_problems, additional_problems):\n  total_time = math_problems + spelling_problems + (additional_problems * 0.5)\n  return total_time\n\ntotal_time = calculate_time(A, B, C)\nprint(f'It will take Faye {total_time} hours to finish all the problems.')",
          "\n\nAnswer = 1 + (A + B) / C hours"
        ],
        [
          "\n\ndef finish_all_problems(a, b, c):\n  total_problems = a + b + c\n  time_to_finish = total_problems / c\n  return time_to_finish\n\nanswer = finish_all_problems(10, 10, 5)\nprint(answer) # This should return 6.0, representing 6 hours to finish all 20 problems.",
          "\nAnswer = 1 + (A/C) + (B/C) hours"
        ],
        [
          "\n\ndef calculate_homework_time(A, B, C):\n  total_problems = A + B + C\n  total_time = total_problems / C\n  return total_time\n    \nprint(calculate_homework_time(2, 5, 3))",
          "\n\nAnswer = 3 hours"
        ],
        [
          "\n\ndef time_to_finish(A, B, C):\n  return (A + B)*(1/C)\n\nprint(time_to_finish(A, B, C))",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef timeToFinish(A, B, C):\n    return (A + B + C) / 1 \nprint(timeToFinish(3, 5, 4))\n# 12",
          "\n\nAnswer = A + B + C/1 Hour"
        ],
        [
          " \n\ndef timeNeeded(A, B, C):\n  return A/C + B/C\n\nprint(timeNeeded(10, 5, 4))  # 2.5",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef time_needed(A, B, C):\n  total_time = A + B + C\n  return total_time\n\nprint(time_needed(2, 4, 1))",
          "\n\nAnswer = (A+B+C)/1 hour"
        ],
        [
          "\n\ndef finish_homework(a,b,c):\n  total_problems = a + b + c\n  total_time = total_problems * 60\n  return total_time \n\nprint(finish_homework(4,6,2))\n#prints 720",
          "\n\nAnswer = (A + B) / C * 60 minutes"
        ],
        [
          " \n\ndef time_required(A, B, C): \n  #total_problems is the number of problems Faye has\n  total_problems = A + B + C \n  #If Faye can finish C problems in an hour, the time required to solve all the problems\n  time_required = total_problems/C \n  return time_required\n  \nprint(time_required(3,4,6)) ",
          "\nAnswer = 1 + (A + B) / C hours"
        ],
        [
          "\n\ndef time_taken(A, B, C):\n  total_problems = A + B + C\n  return total_problems * (1/C)\n\nprint(time_taken(5, 10, 3)) # should return 10",
          "\n\nAnswer = A + B + C / 3"
        ],
        [
          " \n\ndef problemTime(A, B, C):\n  return (A + B + C) // 1 hour",
          "\nAnswer = ((A + B + C) / 60) hours"
        ],
        [
          "\n\ndef timeTaken(A, B, C):                                                       \n  total = A + B + C\n  return total / C\n\n# Answer \nIt will take Faye C hours to finish all the problems.",
          "\n\nAnswer = (A + B + C)/3 hours"
        ],
        [
          "\n\ndef timeToComplete (a, b, c):\n  total = a + b + c\n  return total / 1\n\nprint(timeToComplete(A, B, C))",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef homework_time(A, B, C):\n  return A/C + B/C",
          "\n\nAnswer = 1 + (A + B + C / 60) hours"
        ],
        [
          "\n\ndef HomeworkTime(A, B, C):\n    return (A + B + C) / 60\n\nprint(HomeworkTime(7, 5, 3))",
          "\n\nAnswer = A + B + C = 1 hour"
        ],
        [
          "\n\ndef finish_problems(A, B, C):\n  return (A+B) / C\n\nanswer = finish_problems(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef time_to_finish(A, B, C):\n  return (A + B + C) / 60 # return time in minutes",
          "\n\nAnswer = 1 hour + (A + B + C)/3 hours"
        ],
        [
          "\n\ndef time_to_complete(A, B, C):\n  total_problems = A + B + C\n  time_needed = total_problems * 1\n  return time_needed\n\nanswer = time_to_complete (A, B, C)\nprint(answer)",
          "\n\nAnswer = 2.5 hours"
        ],
        [
          "\n\ndef time_to_complete(A, B, C):\n  return int((A+B)/C)\n\nprint(time_to_complete(4, 5, 2)) # Should print 4.5",
          "\nAnswer = A + B + C / 1 hour"
        ]
      ]
    },
    "source": {
      "question": " For homework Faye had 13 math problems and 2 spelling problems. If she can finish 3 problems in an hour how long will it take her to finish all the problems? ",
      "final_answer": 5.0,
      "index": 361
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 40,
      "duration": 32.50524401664734,
      "templates": [
        "Sam had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Sam had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef calculateToys(A, B, C):\n  return (A + B) / C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toyCalculator(A, B):\n  return (A + B) / C",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef toys(A, B):\n  return (A+B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B):\n    return (A + B) // C",
          "\nA + B = C\nAnswer = C"
        ],
        [
          " \n\ndef calculate_toys(A, B):\n    total_cost = A + B\n    return total_cost // C\n \ncalculate_toys(A, B, C)",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef getNumToys(A, B):\n    return (A+B) / C",
          "\n\nA + B = C\nAnswer = A + B = C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef totalPurchasePrice(A, B, C):\n  return (A+B)/C\n  \ntotalPurchasePrice(A, B, C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_toys(A, B):\n  C = A + B\n  return C // 10\n\nanswer = buy_toys(A, B)",
          "\n\nAnswer = A + B / C"
        ],
        [
          " \n\ndef numToys(A, B):\n  C = (A + B) / 10\n  return C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_many_toys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateToys(A, B, C): \n  return (A + B) // C",
          "\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_toys(A, B):\n  total = A + B\n  num_toys = total // C\n  return num_toys",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B):\n  return (A + B) / C",
          "\nAnswer =  A + B/C"
        ],
        [
          "\n\ndef calculate_toys(A, B):\n  return (A + B) // C",
          "\nAnswer = A+B/C"
        ],
        [
          "\n\ndef toysPurchased(A, B, C): \n  return (A + B) // C",
          "\n\nA + B = C\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toy_cost(A, B):\n  return (A + B) / C",
          "\n\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A + B) // C",
          "\nA + B = C\nAnswer = A + B"
        ],
        [
          "\n\ndef toy_shopping(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\nDefine a function that takes three parameters: A, B, and C:\n\ndef toys(A, B, C):\n  total = A + B\n  return total // C\n\ntoys(A, B, C)",
          "\n\nA + B = C\nAnswer = C / C = Toys Sam Can Buy"
        ]
      ]
    },
    "source": {
      "question": " Sam had saved up 8 dollars. If he received another 7 dollars for his allowance, how many 3 dollar toys could he buy? ",
      "final_answer": 5.0,
      "index": 362
    }
  },
  {
    "result": 81.0,
    "meta": {
      "n_calls": 38,
      "duration": 32.34527516365051,
      "templates": [
        "Bianca and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Bianca recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Bianca and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Bianca recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        81.0,
        81.0,
        81.0,
        81.0
      ],
      "completions": [
        [
          "\n\ndef points_earned(A, B, C):\n  return A*B + A*C\n\nprint(points_earned(2, 5, 10))\nprint(points_earned(3, 7, 8))\n\n# Output\n20\n33",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef paper_recycling(A, B, C):\n  return (A * B) + (A * C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef points(A, B, C):\n    return A*B + A*C\n\nprint(points(2, 5, 10))\n# Answer: 30",
          "\n\nAnswer = (A*B) + (A*C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points (A,B,C):\n  return (B + C) / A",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recycling_points(a,b,c):\n  return a*b + a*c\n  \nanswer = recycling_points(A,B,C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n\treturn (B + C) / A \n\nanswer = calculate_points(A, B, C)",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return (B + C) / A\nprint(points_earned(A, B, C))",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n    return (B + C) // A",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return (B + C) / A\n\nprint(points_earned(A, B, C))",
          "\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n    return (B + C) // A",
          "\n\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef pointsEarned(A,B,C):\n  return (B + C) / A",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef paper_points(A,B,C):\n    points = B * A + C * A\n    return points",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\n\ndef recycling_points(A, B, C):\n  return (B + C) / A",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef pointsEarned(A, B, C): \n  return (B + C) * A\n\n# Answer: \npointsEarned(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef calcPoints(A, B, C):\n  return (B + C) / A",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(A,B,C):\n  total_points = A*(B + C)\n  return total_points\n  \nanswer = recycling_points(1,2,3)\nprint(answer)\n\nOutput: 5 points",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n    return (B + C) / A\n\nprint(calculate_points(A, B, C))",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef recycle_points(a, b, c):\n  total_points = (a*b + a*c)\n  return total_points",
          "\nAnswer = A*(B + C)"
        ]
      ]
    },
    "source": {
      "question": " Bianca and her friends were recycling paper for their class. For every 3 pounds they recycled they earned one point. If Bianca recycled 24 pounds and her friends recycled 3 pounds, how many points did they earn? ",
      "final_answer": 9.0,
      "index": 363
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.45635008811951,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_groups(A, B, C):\n  total_players = A + B\n  groups = total_players // C\n  if total_players % C != 0:\n    groups += 1\n  return groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateGroups(A, B, C): \n  totalPlayers = A + B\n  return (totalPlayers // C) + (totalPlayers % C > 0)\n\nprint(calculateGroups(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C):\n    total_players = A + B\n    number_of_groups = total_players // C\n    return number_of_groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_calculator(A, B, C):\n  return (A + B) // C \n  \nPrint(group_calculator(5, 10, 4))\n\nThis will print 4 groups.",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groupCount(A, B, C):\n  totalPlayers = A + B\n  groupCount = totalPlayers // C\n  return groupCount",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef grouping(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef group_number(A, B, C):\n    total_number = A + B\n    return total_number // C \n\nprint(group_number(10, 15, 5))\n# Output: 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groupNumber(A, B, C):\n    return (A + B) // C\n\nExample:\ngroupNumber(5, 15, 3)\n\nreturns 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C):\n  number_of_groups = (A + B) // C\n  return number_of_groups\n  \nnumber_of_groups(10, 5, 4) #returns 3",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  total = A + B\n  groups = total // C  \n  return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_sizes(A, B, C):\n  total_players = A + B\n  group_amount = total_players // C\n  if total_players % C != 0:\n    group_amount += 1\n  return group_amount \n\nprint(group_sizes(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef group_teams(A, B, C):\n  total_players = A + B\n  groups = total_players // C\n  return groups",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef group_players(A, B, C): \n    return (A + B)//C\n\nprint(group_players(10, 15, 5)) \n# Output: 4",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    return int((A + B) / C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_teams(A, B, C):\n    return (A + B) // C\n\ngroup_teams(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_calc(A,B,C):\n    groups = (A+B)//C\n    return groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n    totalPlayers = A + B\n    groups = totalPlayers // C\n    return groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_groups(A, B, C):\n    total = A + B\n    return total // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n    return (A + B) // C\n  \n#For example\ncalculate_groups(8, 12, 4) \n# will return 4",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef numGroups(A,B,C):\n  return (A+B)//C",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          " \n\ndef number_of_groups(A, B, C): \n  return (A + B) // C\n  \nnumber_of_groups(2, 6, 4)\n\nAnswer: 2 groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_players(A, B, C):\n  totalPlayers = A + B\n  numGroups = totalPlayers // C\n  remainder = totalPlayers % C\n  \n  if remainder > 0:\n    numGroups += 1\n  \n  return numGroups\n\nprint(group_players(A, B, C))",
          "\nAnswer = (A + B) divided by C"
        ],
        [
          "\n\ndef calculateGroups(A, B, C):\n    num_groups = (A + B) // C\n    return num_groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n    total_players = A + B\n    return total_players // C\n\nprint(num_groups(5, 10, 4))\n# Answer: 4 groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\n# Sample Answer\ndef groups(A, B, C):\n    total_players = A + B\n    groups = total_players // C\n    \n    return groups",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 31 new players and 4 returning players. If the coach put them into groups with 7 players in each group, how many groups would there be? ",
      "final_answer": 5.0,
      "index": 364
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 46,
      "duration": 39.80901503562927,
      "templates": [
        "Oliver was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "Oliver was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef baseball_cards(B, C):\n  pages = (B + C) // A\n  if (B + C) % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = ((B + C) / A) + 1"
        ],
        [
          "\n\ndef baseball_cards(b, c):\n  return (b + c) // A + 1",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef baseball_cards(a, b, c):\n  num_pages = (b + c) // a\n  if (b + c) % a != 0:\n    num_pages += 1\n  return num_pages\n\nprint(baseball_cards(A, B, C))",
          "\n\nAnswer = CEILING(B/A) + CEILING(C/A)"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards): \n  total_pages = new_cards + old_cards\n  return (total_pages // 10 + 1)\n  \npages_needed(10, 20) # return 3",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages(B, C): \n  return (B + C)//A + 1",
          "\n\nA + B + C = Answer\nAnswer = 18"
        ],
        [
          "\n\ndef num_pages (b, c):\n    return math.ceil((b+c)/A)",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef page_calc(B, C):\n    return math.ceil((B + C) / A)",
          "\nAnswer = A + (B+C-1)/A"
        ],
        [
          "\n\ndef numPages(b, c):\n  totalCards = b + c\n  if totalCards % A == 0:\n    return totalCards / A\n  else:\n    return (totalCards // A) + 1",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef baseballpages(B,C):\n    num_cards = B + C\n    return num_cards // A + (num_cards % A > 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages(A,B,C):\n    return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n  return (new_cards + old_cards) // 25 + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_pages(new_cards, old_cards):\n  return (new_cards + old_cards) // A + (1 if (new_cards + old_cards) % A != 0 else 0)\n\nprint(num_pages(B, C))",
          "\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef Pages(B, C): \n  numPages = (B + C) // A\n  if (B + C) % A != 0:\n    numPages += 1\n  return numPages",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(B,C):\n  pages = (B+C) // A\n  if (B+C) % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = B + (C/A)"
        ],
        [
          "\n\ndef pages_needed(b, c):\n    pages = b // A + c // A + (b % A > 0) + (c % A > 0)\n    return pages",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef organize_cards (B, C):\n  return (B + C) // A + 1",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef pageNumber(B, C):\n  return B//A + C//A + (B%A>0) + (C%A>0)",
          "\nAnswer = C/A + B/A"
        ],
        [
          "\n\ndef baseballCards(B, C):\n  return math.ceil((B + C) / A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef page_count(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages_needed = total_cards // 9\n  if total_cards % 9 != 0:\n    pages_needed += 1\n  return pages_needed",
          "\nAnswer = \u2308 (B + C) / A \u2309"
        ],
        [
          "\n\ndef pages(B, C):\n  return (B + C) // A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef binder_pages(B, C):\n  return B // A + C // A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef page_calculation(b, c):\n  total_cards = b + c\n  return (total_cards // A) + (1 if total_cards % A > 0 else 0)",
          "\nAnswer = A + (B/C)"
        ]
      ]
    },
    "source": {
      "question": " Oliver was organizing his baseball cards in a binder with 3 on each page. If he had 2 new cards and 10 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 4.0,
      "index": 365
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 44,
      "duration": 35.9917151927948,
      "templates": [
        "Paul made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Paul made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef money_lasting(A, B, C):\n  return (A + B) // C \n  \nmoney_lasting(5, 7, 3)  # This function returns 4, meaning the money would last him 4 weeks.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n    return (A + B) //C \n\nprint(calculate_time(300, 200, 10))\n\n# The money would last him 30 weeks.",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef lawn_cash_duration(A, B, C):\n  return (A + B) / C\n  \nanswer = lawn_cash_duration(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef money_lasting_period(A, B, C):\n  total_money = A + B\n  return total_money // C + (1 if total_money % C > 0 else 0)",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef lawnMoney(A, B, C): \n  total = A + B \n  return total / C  \n\nprint(lawnMoney(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef lawn_cash(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(a,b,c):\n  return (a+b)//c\n\nmoney_lasts(A,B,C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  money_made = A + B\n  weeks = money_made // C\n  return weeks",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef how_long(A,B,C):\n    return (A+B)/C\n\nprint(how_long(A,B,C))",
          "\nAnswer = (A + B) // C"
        ],
        [
          "\n\ndef lawnJobIncome(A, B, C):\n  return round((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateWeeks(a, b, c):\n    total = a + b\n    weeks = total / c\n    return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long(A, B, C):\n  total = A + B\n  weeks = total/C\n  return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef lawnMowing(a,b,c):\n    money = a + b\n    weeks = money / c\n    return weeks",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef money_lasts(a,b,c):\n    return (a+b)/c",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_last(A, B, C):\n  total_money = A + B\n  weeks = total_money / C\n\n  return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n    return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasted(A, B, C):\n  return (A+B)//C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef lawnJobMoney(A, B, C):\n  money = A + B\n  return money // C\n  \n# Call the function\nlawnJobMoney(20, 30, 5)\n# returns 10",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C): \n    total_money = A + B\n    weeks = total_money / C\n    return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef lawn_money(a,b,c):\n    return (a + b)//c\n\nprint(lawn_money(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef howLongUntilMoneyGone(A, B, C):\n  total = A+B\n  return total/C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_expense(a,b,c):\n    amount = a + b - c\n    weeks = amount / c\n    return weeks\n\nanswer = calculate_expense(A,B,C)",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " Paul made 3 dollars mowing lawns and 3 dollars weed eating. If he only spent 3 dollar a week, how long would the money last him? ",
      "final_answer": 2.0,
      "index": 366
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.508896589279175,
      "templates": [
        "Robin was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a Python function that returns the answer.",
        "Robin was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef make_baggies(A,B,C):\n  total_cookies = B + C\n  baggies = total_cookies // A\n  return baggies\n\nprint(make_baggies(A,B,C))",
          "\n\nAnswer = (A)/(B + C)"
        ],
        [
          "\n\ndef make_baggies(A,B,C):\n  return min(B//A,C//A)",
          "\n\nAnswer =  A * ((B + C)/A)"
        ],
        [
          "\n\ndef cookie_baggies(A, B, C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numBaggies(a, b, c):\n    return min(b//a, c//a)\n\nprint(numBaggies(A, B, C))",
          "\n\nAnswer = (A * B + A * C) / A"
        ],
        [
          "\n\ndef cookieBaggy(A, B, C):\n  # calculate the total number of cookies\n  totalCookies = B + C\n  # calculate how many baggies Robin can make\n  baggyCount = totalCookies // A\n  return baggyCount",
          "\nAnswer = floor (min(B, C)/A)"
        ],
        [
          "\n\ndef make_baggies(A,B,C):\n    return min(B//A, C//A)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (A*B+A*C)/A"
        ],
        [
          "\n\ndef baggies(a, b, c): \n  return min(b//a, c//a)",
          "\nAnswer = floor((B + C) / A)"
        ],
        [
          "\n\ndef cookieBaggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = Min( A, B, C )"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (A*(B+C))/A"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  return min(B // A, C // A)\n\nprint(num_baggies(A, B, C))",
          "\nAnswer = Min(B / A, C / A)"
        ],
        [
          "\n\ndef baggies_of_cookies(A, B, C):\n  return min(B, C) // A\n  \n# This assumes that all baggies are the same size and only contain one type of cookie.",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef cookieBaggies(A, B, C):\n    return (B + C) // A\n    \ncookieBaggies(A, B, C)",
          "\nAnswer = floor((A*B+A*C)/A)"
        ],
        [
          "\n\ndef cookieBaggies(A,B,C):\n  return min(B//A, C//A)",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n    return min(B//A, C//A)",
          "\nAnswer = [A/(B+C)]"
        ],
        [
          "\n\ndef num_baggies(a, b, c):\n  return min(b // a, c // a)\n\nprint(num_baggies(A, B, C))",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef calculate_baggies(a, b, c):\n  return min(b//a, c//a)\n\nprint(calculate_baggies(A, B, C))",
          "\nAnswer = Min(A, (B+C))"
        ],
        [
          "\n\ndef make_baggies(a, b, c):\n  total = b + c\n  return total // a\n\nprint(make_baggies(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_number_of_baggies(A, B, C):\n  return min(B//A, C//A)\n  \ncalculate_number_of_baggies(A, B, C)",
          "\nAnswer =  (A * (B + C))/A"
        ],
        [
          "\n\ndef num_baggies(a,b,c):\n  return min(b//a, c//a) \nprint(num_baggies(A,B,C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n    return min(B//A, C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_baggy(a,b,c):\n  return min(b//a, c//a) \n  \nprint(num_baggy(a,b,c))",
          "\nAnswer = A * (B // C + B % C)"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  return min(B // A, C // A)",
          "\n\nAnswer = floor((A*B + A*C)/A)"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  baggies = min(B//A, C//A)\n  return baggies\n\nprint(num_baggies(3, 10, 12))  # returns 4",
          "\nAnswer = [A/(B+C)]  rounded down to nearest integer"
        ]
      ]
    },
    "source": {
      "question": " Robin was making baggies of cookies with 6 cookies in each bag. If she had 23 chocolate chip cookies and 25 oatmeal cookies, how many baggies could she make? ",
      "final_answer": 8.0,
      "index": 367
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 46,
      "duration": 45.580464124679565,
      "templates": [
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a Python function that returns the answer.",
        "The schools debate team had A boys and B girls on it. If they were split into groups of C how many groups could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef team_split(A,B,C):\n  total_groups = A // C + B // C\n  if A % C > 0 or B % C > 0:\n    return total_groups + 1\n  else:\n    return total_groups\n\nprint(team_split(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C): \n    teamSize = A + B\n    if teamSize % C == 0: \n        return teamSize // C \n    return teamSize // C + 1",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef split_teams(A, B, C):\n    if A % C == 0 and B % C == 0:\n        return A // C + B // C\n    else:\n        return (A // C + 1) + (B // C + 1)\n\n\nprint(split_teams(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_groups(A, B, C):\n  return (A + B) // C # Integer Division -> Rounds down to nearest integer\n\n# Example\nprint(number_of_groups(5, 7, 2))    # 6 Groups",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef findNumGroups(A, B, C):\n  totalMembers = A + B\n  if C > totalMembers:\n    return 0\n  else:\n    return (totalMembers // C) + (totalMembers % C > 0)\n\n# Example:\nfindNumGroups(2, 3, 2) # Returns 2",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef debate_team_groups(A, B, C):\n  return (A+B) // C",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef debate_team_groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\nAnswer:\ndef school_teams(A, B, C):\n    return (A + B) // C + (1 if (A + B) % C else 0)\n  \n# example inputs\nprint(school_teams(4, 6, 3))\n# Output: 3",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef teams_debate(A, B, C):\n  return (A // C) + (B // C) + (A % C + B % C) >= 3 \n  \nprint(teams_debate(A, B, C))",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef groups(boys,girls,groupSize):\n    return (boys//groupSize + girls//groupSize + (boys%groupSize + girls%groupSize)//groupSize)\n\ngroups(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groupCalculator(A, B, C):\n  return (A // C) + (B // C) + ((A % C)*(B % C) > 0)\n\nprint(groupCalculator(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef num_groups(A, B, C):\n  return ((A + B) // C)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef number_of_groups(a, b, c):\n  total = a + b\n  num_groups = total // c\n  remainder = total % c\n  if remainder > 0:\n    num_groups += 1\n  return num_groups\n\nprint(number_of_groups(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          " \n\ndef groupFormation(A, B, C): \n  return round(max(A//C, B//C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef num_groups(A, B, C): \n  return (A + B) // C\nprint(num_groups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef group_debate_teams(A, B, C):\n    return ((A + B) // C) + (1 if (A + B) % C > 0 else 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef groups(A, B, C):\n    total = A + B\n    groups = total // C\n    return groups",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef debateGroups(a, b, c): \n  return (a + b) // c\n  \n  \nprint(debateGroups(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groups(boys, girls, c):\n    answer = (boys//c + girls//c)\n    if boys % c > 0 or girls % c > 0:\n        answer += 1\n    return answer\n    \nprint(groups(A, B, C))",
          "\nAnswer = $\\frac{A + B}{C}$"
        ],
        [
          "\n\ndef calculate_groups(a, b, c):\n  return (a // c) + (b // c) + (a % c + b % c > 0)\n\nAnswer = calculate_groups(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " The schools debate team had 5 boys and 40 girls on it. If they were split into groups of 9 how many groups could they make? ",
      "final_answer": 5.0,
      "index": 368
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.27667689323425,
      "templates": [
        "At a company picnic A managers and B employees decided to start a game of volleyball. If they split into C teams how many people would be on each team?\nWrite a Python function that returns the answer.",
        "At a company picnic A managers and B employees decided to start a game of volleyball. If they split into C teams how many people would be on each team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_teams(A, B, C):\n  return (A+B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef vol_teams(m, e, c): \n    team_size = round((m + e) / c) \n    return team_size \n\nprint(vol_teams(4, 20, 3))  #prints 8",
          "\nAnswer = A/(C-B)"
        ],
        [
          "\n\ndef team_size(A,B,C): \n  return (A+B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef teamSize(totalPeople, numTeams):\n    return totalPeople//numTeams",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef teams_split(A, B, C): \n  return (A + B) // C",
          "\nAnswer = A / C + B / C"
        ],
        [
          " \n\ndef team_volleyball(a,b,c):\n  return (a + b) // c",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef volleyball(num_managers, num_employees, num_teams):\n    # Calculates the number of people on each team\n    return int((num_managers + num_employees) / num_teams)\n\nprint(volleyball(4, 16, 2)) # prints 10",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          " \n\ndef volleyball_teams (managers, employees, teams): \n  team_size = (managers + employees) // teams\n  return team_size\n\nprint (volleyball_teams(4, 12, 3))\n\nThis will return 6.",
          "\nAnswer = C \u00d7 (A + B) \u00f7 C"
        ],
        [
          " \n\ndef team_formation(A, B, C): \n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef teamsize(managers, employees, teams):\n    return ((managers + employees) // teams)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C):\n  return int((A + B) / C)  # Returns the number of people on each team",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef teamsVolleyball(A, B, C):\n  return (A + B)//C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef team_size(managers, employees, teams):\n  n = managers + employees\n  size = n // teams\n  return size",
          "\nAnswer = A \u00f7 C + B \u00f7 C"
        ],
        [
          "\n\ndef volleballTeams(A, B, C):\n    return int((A+B)/C)",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef teams(a, b, c):\n    num_per_team = (a + b)//c\n    return num_per_team\n\nteams(5, 10, 3)  # Answer: 7",
          "\n\nAnswer = A/(C-B)"
        ],
        [
          "\n\ndef volleyball(managers, employees, teams): \n    return (managers + employees) // teams",
          " \nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef team_count(a,b,c): \n  return (b+a)/c\n\nprint(team_count(2, 10, 3))   \n\n5.3333333333333",
          "\n\nAnswer = A / C + B / C"
        ],
        [
          "\n\ndef vol_teams(A,B,C):\n    return int((A+B)/C)",
          "\nAnswer = A \u00f7 C + B \u00f7 C"
        ],
        [
          "\n\ndef volleyballTeams(A, B, C):\n    return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef volleyBallTeams(A, B, C): \n  return int(A/C + B/C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C):\n  team_size = (A + B) // C\n  return 'Each team will consist of ' + str(team_size) + ' people.'\n\nprint(volleyball_teams(10,25,3))\n# Output: Each team will consist of 11 people.",
          "\n\nAnswer = A / C + B / C"
        ],
        [
          "\n\ndef volleyball_teams(managers,employees,teams):\n  return (managers + employees) // teams",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef team_splitter(A, B, C):\n    return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef teamsize(manager, employee, teams):\n  return (manager + employee) // teams",
          "\nAnswer = C \u00d7 (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " At a company picnic 23 managers and 7 employees decided to start a game of volleyball. If they split into 6 teams how many people would be on each team? ",
      "final_answer": 5.0,
      "index": 369
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 50,
      "duration": 43.74947214126587,
      "templates": [
        "For a birthday party Cody bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a Python function that returns the answer.",
        "For a birthday party Cody bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef shelves_filled(A, B, C):\n  return (A + B) // C\n\nprint(shelves_filled(18, 12, 6))\n# Outputs 3",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef fridgeshelves(A, B, C):\n  return ((A+B)//C) + ((A+B) % C > 0)",
          "\n\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_shelves(A, B, C):\n  total_num_sodas = A + B\n  num_shelves = total_num_sodas // C\n  if total_num_sodas % C != 0:\n    num_shelves += 1\n  return num_shelves\n\nprint(number_of_shelves(10, 20, 5)) # returns 4",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef shelves_needed(A,B,C):\n  return max(A // C, B // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef calc_shelves(A,B,C):\n  num_shelves= (A+B)//C\n  return num_shelves\n\nprint(calc_shelves(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef soda_shelves(A,B,C): \n    return (A+B//C +1)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n    total = A + B\n    return total // C + (1 if total % C > 0 else 0)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n\treturn (A // C) + (B // C)",
          " \n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef fridgeshelves(A, B, C): \n  return (A + B) // C + 1",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C): \n  return (A + B) // C \n\nprint(shelves_filled(25, 10, 5)) \n\n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesCody (A, B, C):\n  return (A//C + B//C + (A%C + B%C > 0))\n  \nprint(shelvesCody(4,3,2))  # Output: 3",
          " \n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C): \n    return (A//C) + (B//C)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(6, 10, 4))\n# Output: 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_calculator(a,b,c):\n   shelves = 0\n   shelves += a // c\n   shelves += b // c\n   remainder = (a % c) + (b % c)\n   if remainder > 0:\n      shelves += 1 \n   return shelves\n\nprint(shelf_calculator(A,B,C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\nprint(shelves(4, 3, 2)) # will return 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef calculate_shelves(a,b,c):\n  return math.ceil((a + b) / c)\n\ncalculate_shelves(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A // C) + (B // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateShelf(A, B, C):\n  return (A // C) + (B // C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n    total = A + B\n    shelves = total // C \n\n    # Add 1 shelf if there is a remainder\n    if (total % C != 0):\n        shelves += 1\n\n    return shelves\n\nprint(shelves_needed(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef birthday_soda(A,B,C):\n  return (A//C + B//C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef shelvesFilled (A, B, C):\n    n_shelves = (A + B) // C\n    return n_shelves",
          "\n\nA + B = C\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef find_shelf(A, B, C): \n  return (A + B) // C\n\nprint(find_shelf(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateShelves(A, B, C): \n    shelves = (A + B) // C\n    return shelves",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calculate_shelves(A,B,C):\n  shelves_total = (A+B)//C\n  return shelves_total \n  \nanswer = calculate_shelves(A, B, C)\nprint(answer)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_shelves(A, B, C):\n    return (A // C) + (B // C)",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " For a birthday party Cody bought 4 regular sodas and 44 diet sodas. If his fridge would only hold 6 on each shelf, how many shelves would he fill up? ",
      "final_answer": 8.0,
      "index": 370
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 42,
      "duration": 33.952775955200195,
      "templates": [
        "Robin's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a Python function that returns the answer.",
        "Robin's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef van_calculator(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n return (B + C) // A + 1",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n    return math.ceil((B + C) / A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculate_num_vans(A, B, C):\n  total = B + C\n  vans = total // A\n  if total % A > 0:\n    vans += 1\n  return vans",
          "\nAnswer = (B+C) / A"
        ],
        [
          "\n\nA = int\nB = int\nC = int\n\ndef vans_required(A, B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef van_count(A, B, C): \n  total = B + C\n  vans = total // A\n  if total % A > 0:\n    vans = vans + 1\n  return vans",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n    return math.ceil((B + C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C): \n  return math.ceil((B+C)/A) \n\n#Test\nvans_needed(12, 30, 15) \n#Answer: 3 vans",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef numVans(A,B,C):\n  return (B + C) // A + 1",
          "\nAnswer =  (B + C) / A"
        ],
        [
          "\n\ndef trip_to_zoo (A, B, C):\n  return (B + C) / A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef field_trip(A,B,C):\n  return (B + C) // A + (B + C) % A",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(a, b, c):\n  return (b + c) // a + (1 if (b + c) % a > 0 else 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef field_trip_vans(A, B, C):\n  return (B // A + C // A + (B % A + C % A > 0))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C): \n  return math.ceil((B + C)/A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return math.ceil((B + C)/A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return ceil((B+C)/A)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_vans(A,B,C):\n    total_passengers = B + C\n    vans_needed = total_passengers // A\n    if total_passengers % A > 0:\n        vans_needed += 1\n    \n    return vans_needed\n\nprint(number_of_vans(A, B, C))",
          "\nAnswer = \u2308(B + C)/A\u2309"
        ],
        [
          "\n\ndef calculate_vans(a, b, c):\n  return ((b + c) // a) + 1",
          "\nAnswer = (B + C)/A"
        ]
      ]
    },
    "source": {
      "question": " Robin's class is going on a field trip to the zoo. If each van can hold 8 people and there are 22 students and 2 adults going, how many vans will they need? ",
      "final_answer": 3.0,
      "index": 371
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 53.95221781730652,
      "templates": [
        "Ned was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Ned was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numTrips(A, B, C):\n  return (B+C)//A + ((B+C)%A > 0)\n\nprint(numTrips(A, B, C))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  num_trips = (B + C) // A\n  if (B + C) % A != 0:\n    num_trips += 1\n  return num_trips\n\nprint(num_trips(A, B, C))",
          "\n\nAnswer = (A + B)+(A + C) / A"
        ],
        [
          "\n\ndef trips(A,B,C):\n    return (B//A + C//A + (B%A + C%A)//A + (B%A + C%A)%A)\n\nprint(trips(2,7,6)) \n\nAnswer: 5",
          " \nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef findTrips(A,B,C):\n  return (B//A + C//A + max(B % A, C % A))\n  \n#Test:\nfindTrips(3,5,7) \n#returns 5",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef number_of_trips (A, B, C):\n    return (B + C) // A + (B + C) % A \n\n# Example call:\nnumber_of_trips(2, 3, 5)\n# Returns 4",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C): \n    totalTrips = (B + C) // A\n    if (B + C) % A != 0:\n        totalTrips += 1\n    return totalTrips",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef countTrips(A, B, C):\n  return (B//A + C//A + ((B + C) % A > 0)) \n\ntrips = countTrips(A, B, C)\nprint(trips)",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + (B + C) % A > 0",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef getTrips(A, B, C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\n\nAnswer =  A + B + C - 2"
        ],
        [
          "\n\ndef getTrips(A,B,C): \n trips = 0\n if B > A: \n   trips += B // A\n   if B % A > 0: \n     trips += 1\n if C > A: \n   trips += C // A\n   if C % A > 0: \n     trips += 1\n return trips \n\nprint(getTrips(A,B,C))",
          "\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B//A + C//A + (B % A > 0) + (C % A > 0))\n\nnum_trips(4, 10, 12)\n# This will return 3 trips",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + 1",
          "\nAnswer = A + (B + C - 1) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n    return (B//A + C//A + (B%A + C%A)//A)\n\n#Example\n\nprint(num_trips(3, 5, 10))\n# Output: 4",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef calculateTrips (A, B, C): \n  return (B//A + C//A + (B%A + C%A)//A)",
          "\n\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C):\n  return (B + C) // A + 1",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef num_trips(A,B,C):\n  return (B+C)//A + bool((B+C) % A)\n\nThe function returns the number of trips Ned will make, given A, B, and C.\n\nFor example: num_trips(5, 10, 6)\nThis returns 3 because Ned will need to make three trips to pick up all 16 trays (10 from one table and 6 from another).",
          "\nAnswer = ((A + B) / A) + ((A + C) / A)"
        ],
        [
          "\n\ndef trips(A,B,C):\n    return (B + C) // A + (B + C) % A",
          "\nAnswer = A + B + C - 1"
        ],
        [
          "\n\ndef numOfTrips(A, B, C):\n  return (B + C) // A + (B + C) % A\n  \nnumOfTrips(A, B, C)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrips(a,b,c):\n    return (b+c)//a + (b+c)%a\n    \n# If he has to carry a,b and c trays, \n# the function takes 3 inputs - a,b,c trays and returns the number of trips he will make.",
          "\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + (B + C) % A > 0\n\n# Example:\nnum_trips(4, 10, 15)  # returns 4",
          "\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef NedTrips(A, B, C):\n  return (B + C) / A\n\nprint(NedTrips(4, 8, 12))\n# Output: 5.0",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef calc_trips(A,B,C):\n  return (B + C) // A + ((B + C) % A > 0)\n\nprint(calc_trips(A, B, C))",
          "\n\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\nprint(num_trips(A, B, C))",
          "\nAnswer = (A+B)/A + (A+C)/A"
        ],
        [
          " \n\ndef numTrips(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n\nprint(numTrips(A, B, C))",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrip(A, B, C):\n  return (B + C) / A \n\nprint(numTrip(1, 3, 5)) # 8",
          "\n\nAnswer = (A + B + C)/A"
        ]
      ]
    },
    "source": {
      "question": " Ned was helping the cafeteria workers pick up lunch trays, but he could only carry 5 trays at a time. If he had to pick up 5 trays from one table and 5 trays from another, how many trips will he make? ",
      "final_answer": 2.0,
      "index": 372
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 50,
      "duration": 45.971012115478516,
      "templates": [
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a Python function that returns the answer.",
        "There school's baseball team had A new players and B returning players. If the coach put them into groups with C players in each group, how many groups would there be?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef group_formation(A,B,C):\n  return (A+B)//C\n\nprint(group_formation(A,B,C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef group_teams(A, B, C):\n  return (A+B)//C\n  \nAnswer: group_teams(A,B,C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef calculateGroups(A, B, C):\n    total_players = A + B\n    number_groups = total_players // C\n    return number_groups",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef calc_groups(A, B, C): \n    num_groups = (A + B) // C\n    return num_groups",
          "\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a, b, c):\n  total = a + b  # Total number of players\n  groups = total // c  # Number of groups \n  # Check if there is a remainder\n  if total % c != 0:\n    groups += 1  # Add an extra group for the remainder\n  return groups\n\nprint(num_groups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_count(a, b, c):\n  return (a + b) // c\n\nprint(group_count(a, b, c))",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef group_team(A, B, C):\n  return (A + B) // C",
          "\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  total_players = A + B\n  groups = total_players // C \n  return groups",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calc_groups(A, B, C): \n    total_players = A + B \n    groups = total_players // C \n    return groups",
          "\nAnswer = (A + B)/C"
        ],
        [
          " \n\ndef numberOfGroups(A,B,C):\n    totalPlayers = A + B\n    return totalPlayers // C\n\nprint(numberOfGroups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_division(a, b, c): \n  return (a + b) // c\n\nprint(group_division(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef groupcount(A, B, C):\n  return (A + B) // C\n  \nprint(groupcount(6, 4, 3)) # 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_groups(A,B,C):\n  total_players = A + B\n  return total_players // C\n  \n#Example\ncalculate_groups(10,20,5)\n#Answer: 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef groupNumber(A, B, C):\n    totalPlayers = A + B\n    groups = totalPlayers // C\n    return groups\n\nprint(groupNumber(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  return ((A + B)//C + (A + B) % C)\n\nAnswer: groups(A, B, C)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef groups(A, B, C):\n  total_players = A + B\n  num_groups = total_players // C\n  if total_players % C > 0:\n    num_groups += 1\n  \n  return num_groups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n    totalPlayers = A + B\n    return totalPlayers // C\n\n#Example\nnumGroups(4, 5, 2) #Answer: 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_groups(a,b,c):\n  total = a + b\n  return total // c\n  \nprint(num_groups(a,b,c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n    total = A + B\n    groupNum = total // C\n    rem = total % C\n    if rem > 0:\n        return groupNum + 1\n    else:\n        return groupNum",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calcGroups(a, b, c):\n  totalPlayers = a + b\n  groups = totalPlayers // c\n  if totalPlayers % c > 0:\n    groups += 1\n  return groups\n\nprint(calcGroups(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numberOfGroups(A, B, C):\n    return (A + B)//C\n\nprint(numberOfGroups(4, 3, 2)) # Result: 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups (A, B, C):\n  total_players = A + B\n  num_groups = total_players//C\n  return num_groups",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numGroups(A, B, C):\n  return ((A + B) // C) + ((A + B) % C > 0)\n  \nnumGroups(5, 7, 3)\n\nThis will return 3 groups.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef groups(newPlayers, returningPlayers, playersPerGroup):\n  numberOfGroups = (newPlayers + returningPlayers) // playersPerGroup\n  return numberOfGroups",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef group_size_calculator(A, B, C):\n  total_players = A + B\n  if total_players < C:\n    return 0\n  elif total_players % C == 0: \n    return total_players // C\n  else: \n    return total_players // C + 1\n\nprint(group_size_calculator(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " There school's baseball team had 2 new players and 6 returning players. If the coach put them into groups with 4 players in each group, how many groups would there be? ",
      "final_answer": 2.0,
      "index": 373
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 52.38181185722351,
      "templates": [
        "For homework Amy had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a Python function that returns the answer.",
        "For homework Amy had A math problems and B spelling problems. If she can finish C problems in an hour how long will it take her to finish all the problems?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef time_needed(A, B, C):\n  total_time = A + B + C\n  return total_time\n\nprint(time_needed(3, 5, 2))\n# Output: 10",
          "\nAnswer = 1 hour + (A + B)/C hours"
        ],
        [
          " \n\ndef homework_time():\n  math_time = A * 1/C #find the time to complete each set of problems\n  spelling_time = B * 1/C\n  total_time = math_time + spelling_time #calculate the total time to complete all problems\n  return total_time #return the answer\n\nprint(homework_time())",
          "\n\nAnswer = (A + B + C) * 1 hour"
        ],
        [
          "\n\ndef timeToFinish(a, b, c): \n  return a/c + b/c\n\nprint(timeToFinish(A, B, C) + ' hours')",
          "\nAnswer = A + B + C / 3 hrs"
        ],
        [
          "\n\ndef finish_homework(A, B, C):\n  return (A + B)/C \n\nprint(finish_homework(A, B, C))",
          "\n\nAnswer = (A+B+C)/60 minutes"
        ],
        [
          "\n\ndef homeworkTime():\n  A = 30\n  B = 20\n  C = 60\n  total_time = (A + B + C)\n  return total_time\n\nprint(\"It will take Amy \"+str(homeworkTime())+\" minutes to finish all the problems.\")",
          "\nAnswer = ((A + B)/C)*60"
        ],
        [
          "\n\ndef totalProbTime(A, B, C):\n    return ((A + B) / C) * 60\n\nprint(totalProbTime(10, 20, 5))\n# 120 Minutes",
          "\n\nAnswer = A + B + C \u00f7 3 hours"
        ],
        [
          "\n\ndef time_to_complete(a,b,c):\n  return (a + b) / c\n\nprint(\"It will take Amy \" + str(time_to_complete(A,B,C)) + \" hours to finish all the problems.\")",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef total_problems(a, b, c):\n   total_time = (a * 0.5) + (b * 0.2) + (c * 1)\n   return total_time\n\nprint(total_problems(4,5,2)) # Output: 7.0",
          "\nAnswer = A+B+C/3"
        ],
        [
          "\n\ndef total_time(A, B, C):\n  total_number_of_problems = A + B + C\n  total_time = total_number_of_problems * 60 # 60 minutes in an hour\n  return total_time\n\nprint(total_time(3, 5, 4)) # would output 540 (9 hours)",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef timeToComplete(A, B, C):\n  return (A + B) / C\n\ntimeToComplete(A, B, C)",
          "\n\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef time_to_finish(A, B, C):\n  total_time = A*60 + B*3 + C\n  return total_time\n\ntotal_time = time_to_finish(A, B, C)\nprint(\"It will take Amy\", total_time, \"minutes to finish all the problems.\")",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef calculate_time(num_A, num_B, num_C):\n  total_problems = num_A + num_B + num_C\n  total_time = total_problems / num_C\n  return total_time\n\nresult = calculate_time(3, 4, 7)\nprint(result)\n\n#It will take Amy 2.4285714285714284 hours to finish all the problems.",
          "\n\nAnswer =  A + B + C / 3 hours"
        ],
        [
          "\n\ndef time_to_complete(a, b, c):\n  return (a + b) / c\n\nprint(time_to_complete(a, b, c))",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef homework(A, B, C):\n  total_time = (A + B) / C\n  return total_time\n\nprint(homework(A, B, C))",
          "\nAnswer = (A + B + C) / (1/60) hours"
        ],
        [
          "\n\ndef time_taken(a, b, c):\n  total_problems = a + b + c\n  time_taken = total_problems/c\n  return time_taken\n\nprint(time_taken(a, b, c))",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef problems_time(a, b, c):\n  return (a + b) / c\n\nprint(problems_time(60, 20, 8))\n# 10.0",
          "\n\n(A + B + C) \u00f7 1 = Answer\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n  total_problems = A + B + C\n  time = total_problems / C\n  return time\n\ncalculate_time(A, B, C)",
          "\n\nAnswer = 1 hour + A/C hours + B/C hours"
        ],
        [
          "\n\ndef problems_time(A, B, C):\n  total = A + B + C\n  answer = total * 60\n  return answer\n\nprint(problems_time(A=3, B=5, C=2))\n#The answer is 480 minutes",
          "\nAnswer = (A + B + C) / 1 hr"
        ],
        [
          "\n\ndef time_to_complete(A, B, C): \n  return (A + B)/C\n\nprint(time_to_complete(A, B, C))",
          "\n\nAnswer = (1/C) * (A + B) hours"
        ],
        [
          "\n\ndef homework_time(a, b, c): \n  return (a + b)/c \n\nhomework_time(A, B, C)",
          "\nAnswer = A/C*B+1"
        ],
        [
          "\n\ndef homeworkTime(A, B, C):\n  return (A + B) / C\n\nprint(homeworkTime(A,B,C))",
          "\nAnswer = A + B + C / 3"
        ],
        [
          "\n\ndef math_spelling_prob(A,B,C):\n  return \"It will take Amy \" + str((A + B) / C) + \" hours to finish all the problems.\"\n\nprint(math_spelling_prob(A, B, C))",
          "\nAnswer = (A + B + C) / 1 hour"
        ],
        [
          "\n\ndef problemTime(a, b, c):\n  time = (a+b)/c\n  return 'It will take Amy ' + str(time) + ' hours to finish all the problems.'\n\nprint(problemTime(A, B, C))",
          "\nAnswer = A + B + C / 1 hour"
        ],
        [
          "\n\ndef total_problems(A,B,C): \n  total_time = A + B + C \n  return total_time \n\nprint(total_problems(2,2,1))\n\nPrints 5",
          "\nAnswer = A/C * B + C"
        ],
        [
          "\n\ndef amys_homework(A, B, C):\n  total_problems = A + B + C\n  return total_problems / C\n\nprint(amys_homework(2,3,1)) # Output: 5",
          "\nAnswer = A/C + B/C hours"
        ]
      ]
    },
    "source": {
      "question": " For homework Amy had 18 math problems and 6 spelling problems. If she can finish 4 problems in an hour how long will it take her to finish all the problems? ",
      "final_answer": 6.0,
      "index": 374
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 38.90774083137512,
      "templates": [
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a Python function that returns the answer.",
        "Maria was making baggies of cookies with A cookies in each bag. If she had B chocolate chip cookies and C oatmeal cookies, how many baggies could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_baggies(A, B, C):\n    return min(B//A, C//A)",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          " \n\ndef make_baggies(a,b,c):\n  return min(b//a,c//a)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef cookieBag(A, B, C):\n  return (B//A + C//A)\n\nprint(cookieBag(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef cookie_baggies(a, b, c):\n  total_cookies = b + c\n  baggies = total_cookies // a\n  return baggies",
          "\n\nAnswer = (A*B + A*C) / A"
        ],
        [
          "\n\ndef cookie_bag_calc(A, B, C):\n  return min(B//A, C//A)",
          "\nAnswer = (A/B)+(A/C)"
        ],
        [
          "\n\ndef cookie_baggies(A, B, C): \n  return min(B // A, C // A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef how_many_baggies(a, b, c):\n    return min(b // a, c // a)",
          "\nAnswer = (A*B + A*C)/A"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n    return min(B // A, C // A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_baggies(A,B,C): \n  return (B + C) // A \n  \n#call the function \nnum_baggies(A,B,C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (A)*(B/A + C/A)"
        ],
        [
          "\n\ndef cookie_bag(A,B,C):\n  return min(B//A, C//A)",
          "\n\nAnswer = (A*B + A*C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = floor(Min(A, B+C)/A)"
        ],
        [
          "\n\ndef cookieBaggies(A,B,C):\n  return min(B//A, C//A)",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef cookieBagCount(A,B,C):\n  return int((B+C)/A)",
          "\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\n\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n    return min(B//A, C//A)",
          "\nAnswer = floor(A/(B+C))"
        ],
        [
          "\n\ndef num_baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (A*(B+C))/A"
        ],
        [
          "\ndef baggies(a, b, c):\n  bags = 0 \n  bags_chocolate = b // a\n  bags += bags_chocolate \n  bags_oatmeal = c // a\n  bags += bags_oatmeal\n  return bags\n\nprint(baggies(A, B, C))",
          "\nAnswer = (A * (B + C))/A"
        ],
        [
          "\n\ndef make_baggies(A, B, C):\n    return (B // A) + (C // A)",
          "\nAnswer = A * (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n    return (B//A + C//A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A,B,C):\n  return min(B//A,C//A)",
          "\n\nAnswer = (A*B + A*C) / A"
        ],
        [
          "\n\ndef cookie_bag_count(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = A(B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return max(B//A, C//A)",
          "\nAnswer = (A * (B + C)) / A"
        ],
        [
          "\n\ndef make_baggies(A, B, C): \n  if B >= A or C >= A: \n    baggies = (B // A) + (C // A)\n  elif B + C < A: \n    baggies = 0\n  else: \n    baggies = 1\n  return baggies\n\nmake_baggies(A, B, C)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baggies(A, B, C):\n  return min(B // A, C // A)",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Maria was making baggies of cookies with 3 cookies in each bag. If she had 2 chocolate chip cookies and 16 oatmeal cookies, how many baggies could she make? ",
      "final_answer": 6.0,
      "index": 375
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 47.773006200790405,
      "templates": [
        "Sarah's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a Python function that returns the answer.",
        "Sarah's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_loads(shirts, sweaters):\n  return (shirts // A) + (sweaters // A) + (shirts % A > 0) + (sweaters % A > 0)",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef washing_machine_loads(A, B, C):\n    return (B//A + C//A + (B%A + C%A)//A + 1)\n\nprint(washing_machine_loads(3, 10, 6)) # Outputs 4",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef CalculateLoads(A, B, C):\n  return (B + C)//A + 1",
          "\nAnswer =  ceil(A/B + A/C)"
        ],
        [
          "\n\ndef loadTotal(A, B, C):\n  return (B//A + C//A) if B % A == 0 and C % A == 0 else (B//A + C//A + 1)\n\nprint(loadTotal(5, 10, 8))\n# Output: 3",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef calc_loads(shirts, sweaters):\n  return (shirts + sweaters) // A + ((shirts + sweaters) % A > 0)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numLoads(A,B,C):\n  total = B+C\n  if total % A == 0:\n    return total/A\n  return (total//A) + 1\n\nnumLoads(8,7,4)\n# Output: 2",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washing_machine(a,b,c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washing_machine_loads(A,B,C):\n  return (B//A) + (C//A) + (B%A + C%A > 0)\n\n#If Sarah had to wash 5 shirts and 3 sweaters with a washing machine that takes up to 4 pieces of clothing at a time, she would have to do 3 loads.\nwashing_machine_loads(4,5,3)\n#Output: 3",
          "\n\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef num_loads(A, B, C):\n  total_clothes = B + C \n  return total_clothes // A + (1 if (total_clothes % A) else 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef laundryLoads(shirts, sweaters):\n  return (shirts + sweaters) // A + (1 if (shirts + sweaters) % A else 0)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_loads(a, b, c):\n    return (b + c)//a + 1",
          "\n\nAnswer = (B + C) \u00f7 A"
        ],
        [
          "\n\ndef num_of_loads(A,B,C):\n    return math.ceil((B+C)/A)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_loads(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef loads(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\n\nAnswer = (B / A) + (C / A)"
        ],
        [
          " \n\ndef num_loads(A,B,C): \n  return (B+C)/A + 1\n  \nanswer = num_loads(A,B,C)",
          "\nAnswer = ((B/A) + (C/A))"
        ],
        [
          "\n\ndef number_of_loads(A, B, C):\n  return (B+C)//A + (1 if ((B+C) % A) > 0 else 0)",
          "\nAnswer =  (B/A) + (C/A)"
        ],
        [
          "\n\ndef total_loads(A, B, C):\n  total = (B + C)/A\n  return total\n\nnum_loads = total_loads(5, 10, 5)\nprint(num_loads)\n\nAnswer: 3.0",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef washingLoads(a, b, c):\n  return math.ceil((b + c) / a)\n\nwashingLoads(a, b, c)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef calculate_Total_Loads (A, B, C):\n  total_loads = (B/A) + (C/A)\n  return total_loads \n\ntotal_loads = calculate_Total_Loads (4, 12, 8)\nprint(total_loads) \n\nThe result should be: 4 loads",
          "\nAnswer = \u2308(B + C) / A\u2309"
        ],
        [
          "\n\ndef calc_loads(A,B,C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (B / A) + (C / A)"
        ],
        [
          "\n\ndef washing_loads(a, b, c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef number_of_loads(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n\n#for example \nnumber_of_loads(5, 10, 8)\n#returns 3",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef laundry_loads(A, B, C):\n  return (B//A + C//A + (B%A + C%A)>0)",
          "\nAnswer = A + \u2308(B+C)/A\u2309  - 1"
        ],
        [
          "\n\ndef washing_machine(A, B, C):\n    total_loads = (B + C) // A\n    if (B + C) % A > 0:\n        total_loads += 1 \n    return total_loads\n\n# example\nwashing_machine(7, 9, 4) \n# this would return 3 loads",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef numLoads(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\nAnswer = (B/A) + (C/A)"
        ]
      ]
    },
    "source": {
      "question": " Sarah's old washing machine could only wash 5 pieces of clothing at a time. If she had to wash 43 shirts and 2 sweaters how many loads would she have to do? ",
      "final_answer": 9.0,
      "index": 376
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 44,
      "duration": 46.69861125946045,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef adoptPuppies(A, B, C): \n  return (A+B)/C\n\n# Calling the function \nprint(adoptPuppies(A, B, C))",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef timeToAdopt(A, B, C):\n  return (A + B) / C\n\n#To calculate the time in days, divide by 24\n\nprint(timeToAdopt(A, B, C) / 24)",
          "\nA + B - C/day = Answer\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef days_to_adopt_all(a, b, c):\n  return (a + b) // c\n\nnumber_of_days = days_to_adopt_all(a, b, c)\nprint(f\"It will take {number_of_days} days to adopt all the puppies\")",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoptees(A, B, C):\n  totalPups = A + B\n  days = totalPups // C\n  return days\n\n# Example\nprint(adoptees(30, 40, 2))\n# Output: 35",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(a, b, c): \n  return (a + b)/c\n\nadoptionTime(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoption_time(A, B, C): \n  total_puppies = A + B\n  days_for_adoption = total_puppies // C\n  if total_puppies % C != 0: \n    days_for_adoption += 1\n  return days_for_adoption\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adopt_puppies(a, b, c): \n  total_puppies = a + b\n  days = total_puppies // c\n  return days \n\nanswer = adopt_puppies(A, B, C)",
          "\nAnswer = A+B divided by C days"
        ],
        [
          "\n\ndef puppy_adoption(A, B, C):\n    total = A + B\n    \n    if C == 0:\n        return 0\n    \n    time = total // C\n    \n    if total % C != 0:\n        time += 1\n    \n    return time",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  total_puppies = a + b\n  return total_puppies / c\n\n#Example:\nprint(adoption_time(10, 5, 2))\n#Answer: 7.5 days",
          "\nAnswer = (A + B) / C days"
        ],
        [
          " \n\ndef adoption_period(A, B, C):\n    total_puppies = A + B\n    days = total_puppies // C\n    if total_puppies % C > 0:\n        days += 1\n    return days\n\nadoption_period(A, B, C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef puppiesAdopted(A, B, C): \n  totalPuppies = A + B \n  puppiesPerDay = C \n  return totalPuppies / puppiesPerDay \n\nprint(puppiesAdopted(A, B, C))",
          "\nAnswer = (A + B) \u00f7 C days"
        ],
        [
          "\n\ndef adoptPuppies(A, B, C):\n  totalPuppies = A + B\n  days = totalPuppies / C\n  return days\n\nprint(adoptPuppies(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef puppies_adoptions_timer(A, B, C):\n  total_puppies = A + B\n  days = total_puppies / C\n  return days\n\nprint(puppies_adoptions_timer(20, 10, 5)) # The answer is 6 days.",
          "\nAnswer = (A + B) / C ( days )"
        ],
        [
          "\n\ndef shelter_puppies(A,B,C):\n    return (A + B) // C\n\nprint(shelter_puppies(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef AdoptionTime(A, B, C): \n  totalPuppies = A + B\n  adoptionDays = totalPuppies / C\n  return adoptionDays\n \nAdoptionTime(A, B, C)",
          "\nAnswer = (A + B) / C Days"
        ],
        [
          "\n\ndef pet_shelter_adoption(A, B, C):\n  total_puppies = A + B\n  total_days = total_puppies // C\n  return total_days\n\nprint(pet_shelter_adoption(10, 8, 3)) # Output: 6 days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pet_shelter(A,B,C):\n    total_puppies = A+B\n    days = total_puppies/C\n    \n    return days\n\nprint(pet_shelter(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelterAdoptions(a, b, c):\n  total = a + b\n  return max(0, round(total / c))\n\nprint(shelterAdoptions(50, 10, 2)) # 25 days",
          "\n\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef calcAdoptionTime(A, B, C):\n  return (A + B) / C\n\nprint(calcAdoptionTime(A, B, C))",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef puppyAdoption (A, B, C): \n    totalPuppies = A + B\n    adoptionTime = totalPuppies / C\n    return adoptionTime\n\nprint(puppyAdoption(A,B,C))",
          "\n\nAnswer = (A+B) \u00f7 C days"
        ],
        [
          "\n\ndef numOfDays(A, B, C):\n  total = A + B\n  return total // C\n\nprint(numOfDays(10, 15, 4))\n#output: 7",
          "\nAnswer = (A+B)\u00f7C days"
        ],
        [
          "\n\ndef adoptionTime(a, b, c):\n  total_puppies = a + b\n  return total_puppies / c\n  \nanswer = adoptionTime(A, B, C)",
          "\nAnswer = (A + B) / C days"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 3 puppies when another 3 were brought in. If 3 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 2.0,
      "index": 377
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 46,
      "duration": 40.3430118560791,
      "templates": [
        "While playing at the arcade, Luke won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a Python function that returns the answer.",
        "While playing at the arcade, Luke won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef arcade_tickets(A, B, C):\n  total = A + B\n  candy = total//C\n  return candy",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef tickets_to_candy(a,b,c):\n  total_tickets = a + b\n  num_candy = total_tickets // c\n  return num_candy",
          "\n\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candy_num(A, B, C): \n  return A + B // C \n  \ncandy_num(A, B, C)",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef tickets(A, B, C):\n  total_tickets = A + B\n  candy = total_tickets // C \n  return candy\n\ntickets(20, 17, 5) # This would return 11 as the answer.",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_candy_purchases(A, B, C):\n  total_tickets = A + B\n  candy_purchases = total_tickets // C\n  return candy_purchases",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef arcadeTickets(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef buy_candy(A, B, C):\n    return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef num_of_candies(A, B, C):\n  return (A+B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_purchase(A, B, C):\n  return A + B // C\n  \n#The function takes three parameters: A is the number of tickets won playing 'whack a mole', B is the number of tickets won playing 'skee ball', and C is the cost of the candy.",
          "\n\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candy_buy(A, B, C):\n    return int((A + B) / C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_to_candy(a,b,c):\n  return min(a,b) // c",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_cost(A, B, C):\n  return (A + B) // C\n\n# Example\ncandy_cost(30, 20, 7) => 7",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_buy(A, B, C):\n  total = A + B\n  return total // C \n\nprint(candy_buy(50, 25, 3))\n# Output: 17",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(a,b,c):\n    total = a+b\n    if total >= c:\n        answer = total//c\n        return \"Luke can buy \"+str(answer)+\" pieces of candy.\"\n    else:\n        return \"Luke cannot buy candy.\"",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef candy(A,B,C):\n        return (A + B) // C\n        \nprint(candy(12,16,4))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_many(a, b, c):\n  return a + b // c\n\nhow_many(A,B,C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef candy_purchase(A, B, C):\n  total_tickets = A + B\n  num_candy = total_tickets // C\n  return num_candy\n  \ncandy_purchase(100, 50, 5) # Returns 20",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef lukes_tickets(A, B, C):\n  return (A + B) // C\n\nlukes_tickets(20, 30, 5) \n\n# Output: 10",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candycount(a, b, c):\n  return (a + b) // c\n\nprint(candycount(4, 10, 7))\n\n# Output: 3",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_to_candy(A, B, C): \n  return min(A//C, B//C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_total(A, B, C):\n  return (A + B) // C\n\ncandy_total(50, 75, 5)\n# Output: 20",
          "\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " While playing at the arcade, Luke won 2 tickets playing 'whack a mole' and 13 tickets playing 'skee ball'. If he was trying to buy candy that cost 3 tickets a piece, how many could he buy? ",
      "final_answer": 5.0,
      "index": 378
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 48,
      "duration": 44.34478998184204,
      "templates": [
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a Python function that returns the answer.",
        "A group of A friends went into a restaurant. The chef already had B chicken wings cooked but cooked C more for the group. If they each got the same amount how many would each person get?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          " \n\ndef get_wings(A, B, C):\n  return (B + C) / A\n\nprint(get_wings(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_chicken_wings(A, B, C):\n  return (B + C) // A\n\n# Example\nnumber_of_chicken_wings(4, 5, 10) # Returns 6",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    total = B + C\n    return total / A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings (A, B, C):\n  return (B + C) / A \n\nprint (chicken_wings(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef ChickenWings(A, B, C):\n\ttotal_chicken_wings = B + C\n\twings_per_person = total_chicken_wings / A\n\treturn wings_per_person\n\nprint(ChickenWings(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef getWings(A, B, C):\n    return (B + C)//A\n\nprint(getWings(A, B, C))",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  total_wings = B + C\n  return total_wings // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  total = B + C\n  return total // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef chicken_wings_per_person(A, B, C):\n    '''\n    Parameters:\n    A: The number of friends\n    B: The number of chicken wings already cooked\n    C: The number of chicken wings cooked for the group       \n    Returns: The number of chicken wings each person gets\n    '''\n    return (B+C) // A\n\n# Test\nprint(chicken_wings_per_person(",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef wings_per_person(a, b, c):\n  total_wings = b + c\n  return total_wings // a\n\nwings_per_person(A, B, C)",
          "\nAnswer = (A * B)/C"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) // A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef wings_per_person(A, B, C):\n    return (B + C) / A\n\nprint(wings_per_person(A, B, C))",
          "\nAnswer = A x (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B + C) // A\n\n# Call the function with parameters A = 5, B = 10, C = 6\nchicken_wings(5, 10, 6)\n# Answer: 4",
          "\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef divideWings(A, B, C):\n  return (B + C) // A    # Integer division is used to get answer.",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef total_wings(A, B, C):\n  return (B + C) // A\n\nprint(total_wings(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef divide_wings(A, B, C):\n    total_wings = B+C\n    return total_wings // A\n\nprint(divide_wings(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef ChickenWings(A, B, C):\n  totalNumber = B + C\n  return totalNumber // A\n\nprint(ChickenWings(A, B, C))",
          "\nAnswer = B/A + C/A"
        ],
        [
          "\n\ndef chickens_per_person(a, b, c):\n  return (b + c) / a\n  \nprint(chickens_per_person(A, B, C))",
          "\nAnswer = (A + C) / B"
        ],
        [
          "\n\ndef wing_per_person(a, b, c):\n    return (b + c) // a\n\nprint(wing_per_person(A, B, C))",
          "\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef getChickenWings(A, B, C): \n  result = (B + C) // A # Division returns an integer\n  return result\n\nprint(getChickenWings(A, B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n    return (B+C)//A\n\nprint(chicken_wings(A, B, C))",
          "\nAnswer = (A * B) / C"
        ],
        [
          "\n\ndef chicken_wings(A, B, C):\n  return (B + C) // A\n\n#example\n#A = 5\n#B = 20\n#C = 10\n#answer = 6\n\nprint(chicken_wings(5, 20, 10)) # 6",
          "\nAnswer = (A \u00d7 B) / C"
        ],
        [
          "\n\ndef wings_quantity(A, B, C):\n  return (B + C) // A\n\nprint(wings_quantity(A, B, C))",
          "\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " A group of 3 friends went into a restaurant. The chef already had 8 chicken wings cooked but cooked 10 more for the group. If they each got the same amount how many would each person get? ",
      "final_answer": 6.0,
      "index": 379
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 44,
      "duration": 48.40045475959778,
      "templates": [
        "Nancy's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a Python function that returns the answer.",
        "Nancy's old washing machine could only wash A pieces of clothing at a time. If she had to wash B shirts and C sweaters how many loads would she have to do?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef washing_machine(A, B, C):\n  \n  # Divide the total number of items to wash by the maximum number of items that the machine can wash at one time. \n  return (B + C) // A \n\n# Call the function\nwashing_machine(A, B, C)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef num_loads(A, B, C):\n  return (B // A) + (C // A) + (B % A + C % A > 0)\n\nprint(num_loads(A, B, C))",
          " \nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef number_of_loads(A, B, C): \n  return (B + C)/A \n\nprint(number_of_loads(A, B, C))",
          "\nAnswer = (B / A) + (C / A)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef computeLoads(A,B,C):\n  numLoads = (B + C) // A\n  if (B + C) % A != 0:\n    numLoads += 1\n  return numLoads\n\nprint(computeLoads(5, 7, 8)) # 3",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef load_count(A,B,C):\n  return (B//A + C//A + (B%A + C%A)//A)\n\nload_count(7,5,3) # Returns 2",
          "\nAnswer = (A+1)//B + (A+1)//C"
        ],
        [
          "\n\ndef wash_load(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef wash_loads(A, B, C):\n  return (B//A + C//A + (B % A > 0) + (C % A > 0))\n\nwash_loads(5, 10, 6) # returns 3",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef calculate_loads(shirts, sweaters):\n  return (shirts + sweaters) / A",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washing_machine(A,B,C):\n  return (B//A + C//A + (B%A + C%A)//A)\n\nprint(washing_machine(2,5,4)) # Answer: 4",
          "\n\nAnswer = (B shirts + C sweaters) / A pieces of clothing"
        ],
        [
          "\n\ndef laundry(a,b,c):\n  total = b + c\n  if total % a == 0:\n    return total // a\n  else:\n    return (total // a) + 1\n\nlaundry(A, B, C)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          " \n\ndef loads(A, B, C): \n    # Calculate total number of pieces to be washed \n    total = B+C  \n    # Calculate the number of loads \n    loads = total // A  \n    # Check if the remainder is zero or not\n    if (total % A != 0): \n        loads += 1\n  \n    return loads\n\n# Driver code \nA = 8\nB = 5\n",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef loads(A, B, C):\n  return (B + C) // A + ((B + C) % A > 0)\n\nprint(loads(A, B, C))",
          "\nAnswer = (A + (B + C)) / A"
        ],
        [
          "\n\ndef washing_loads(A,B,C):\n  return (B//A + C//A + (B%A + C%A)//A)\n\n#testing\nwashing_loads(7,5,8)\n#Returns 2",
          "\nAnswer = A = B + C"
        ],
        [
          " \n\ndef loads(A,B,C):\n  return (B + C) // A + ((B + C) % A > 0)\n \nloads(A,B,C)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculateLoads(A, B, C):\n  totalLoads = (B + C) // A\n  if (B + C) % A != 0:\n    totalLoads += 1\n  return totalLoads\n\ntotalLoads = calculateLoads(A, B, C)\nprint(\"Total number of loads =\", totalLoads)",
          "\nAnswer = A + ((B+C-A)/A)"
        ],
        [
          "\n\ndef calc_loads(A, B, C):\n  total_clothing = B + C\n  loads = total_clothing // A\n  if total_clothing % A > 0:\n    loads += 1\n  return loads\n\nloads = calc_loads(A, B, C)",
          "\nAnswer = [(B/A) + (C/A)]"
        ],
        [
          "\n\ndef calculate_washing_loads(A, B, C):\n  return (B + C) // A + (B + C) % A\n\n# if we have a washing machine that can wash 10 pieces at a time and\n# we need to wash 3 shirts and 4 sweaters\nprint(calculate_washing_loads(10, 3, 4))  # 2",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef loads(A, B, C):\n  return (B+C)//A + (1 if (B+C)%A > 0 else 0)",
          "\nAnswer = (A > B + C) ? (B + C) / A : (B / A) + (C / A) + 1"
        ],
        [
          "\n\ndef numberOfLoads(A, B, C):\n  total = B + C\n  return int(total / A) + (total % A > 0)\n  \nprint(numberOfLoads(A, B, C))",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washingMachLoads(A, B, C):\n  return (B//A + C//A + (B % A > 0) + (C % A > 0))",
          "\nAnswer = (B \u00f7 A) + (C \u00f7 A)"
        ],
        [
          "\n\ndef num_loads(A, B, C):\n  return (B//A + C//A + (B%A + C%A + A - 1) // A)\n\nAnswer: num_loads(A, B, C)",
          "\n\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef washing_machine(a, b, c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\n\nAnswer = ((B + C) / A) + 1"
        ]
      ]
    },
    "source": {
      "question": " Nancy's old washing machine could only wash 9 pieces of clothing at a time. If she had to wash 19 shirts and 8 sweaters how many loads would she have to do? ",
      "final_answer": 3.0,
      "index": 380
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 46,
      "duration": 32.245359897613525,
      "templates": [
        "Paul had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Paul had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef buyToys(A,B,C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\n\ndef calculate(A, B, C): \n  return ((A + B) // C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          " \n\ndef num_toys_bought(A, B):\n    C = 10\n    return (A + B) // C\n\nprint(num_toys_bought(50, 20)) # prints 8",
          "\nA+B/C = Answer \nAnswer = A + B/C"
        ],
        [
          "\n\ndef total_toys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  total = (A + B) // C\n  return total ",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calc(A,B,C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B): \n  total_saved = A + B\n  num_toys = total_saved // C \n  return num_toys",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toySpend(A, B):\n  C = A + B\n  toys = C // 20\n  return toys",
          "\n\nA + B = C\nAnswer = C/3"
        ],
        [
          "\n\ndef toy_calculator(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_toys(A, B, C): \n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toysCalc(A, B, C):\n    totalAmount = A + B\n    return int(totalAmount / C)",
          "\nAnswer = A + B /C"
        ],
        [
          "\n\ndef calculateToys(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef answer(A,B,C):\n  return (A+B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n  num_toys = (A + B) // C\n  return num_toys",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef dollars_spent(A,B,C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef purchase_toys(A,B): \n  C = (A + B) // 4\n  return C",
          "\n\nA + B = C\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys_bought(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_toys(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C): \n    return int((A + B) / C)",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calc_num_toys(A,B):\n  return (A+B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buyToys(A, B, C): \n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A + B) // C\nprint(toys(A, B, C))",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculateTotal(A, B, C):\n  return (A + B) // C",
          "\n\nA + B / C = Answer\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " Paul had saved up 3 dollars. If he received another 7 dollars for his allowance, how many 5 dollar toys could he buy? ",
      "final_answer": 2.0,
      "index": 381
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 40,
      "duration": 30.92589521408081,
      "templates": [
        "Jerry made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Jerry made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef money_lasted(A, B, C):\n    return (A + B) / C\n    \nprint(money_lasted(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef time_budget(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef how_long(a, b, c):\n  total_amount = a + b\n  weeks = total_amount / c\n  return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A,B,C):\n  #A,B represent amount he made mowing lawns and weed eating;\n  #C represents how much was spent each week\n  total_cash = A + B\n  weeks_money_lasts = total_cash / C\n  return weeks_money_lasts \n    \nprint(money_lasts(45,20,5))  # prints 11.0",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A,B,C):\n    return ((A+B)/C)",
          "\n\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef lawnMoney(A,B,C):\n  totalMoney = A+B\n  weeks = totalMoney/C\n  return weeks",
          "\nAnswer = (A + B - C)/C"
        ],
        [
          " \n\ndef money_lasting(A, B, C):\n  return ((A + B) // C)",
          "\n\nAnswer = (A+B)/C weeks"
        ],
        [
          "\n\ndef weeks_to_spend(A, B, C):\n  total = A + B\n  return total // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_timeline(A,B,C):\n    total_time = (A + B) // C\n    return total_time",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  return max(A, B)//C",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef time_for_money(A, B, C):\n  money = A + B\n  time = money / C\n  return time",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateDuration(a,b,c):\n  return (a + b) // c\n\n#Example: \ncalculateDuration(10, 5, 2)\n#Answer: 8 Weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef money_last(A, B, C):\n  return (A+B)//C",
          "\n\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef money_lasts(a, b, c):\n  total = a + b\n  return total / c",
          "\n\nAnswer = (A + B) /C"
        ],
        [
          "\n\ndef lawnMowingMoney(A, B, C):\n  return (A + B) / C",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef months_of_savings(A, B, C):\n  return round((A + B)/C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_saving(A, B, C):\n  return (A+B) // C",
          "\nAnswer = (A + B - C)/C"
        ],
        [
          "\n\ndef calculate_weeks(A, B, C):\n  return (A + B) // C\n\nanswer = calculate_weeks(A, B, C)\nprint(\"Jerry's money will last him for \" + str(answer) + \" weeks.\")",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef MoneyDuration (A, B, C):\n    total = A + B\n    return total / C\n\nprint(MoneyDuration(A, B, C))",
          "\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef mow_lawns (A, B, C):\n  return round((A + B) / C)",
          "\nAnswer = ((A + B) / C) weeks"
        ]
      ]
    },
    "source": {
      "question": " Jerry made 14 dollars mowing lawns and 31 dollars weed eating. If he only spent 5 dollar a week, how long would the money last him? ",
      "final_answer": 9.0,
      "index": 382
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 37.992629051208496,
      "templates": [
        "While playing at the arcade, Ned won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a Python function that returns the answer.",
        "While playing at the arcade, Ned won A tickets playing 'whack a mole' and B tickets playing 'skee ball'. If he was trying to buy candy that cost C tickets a piece, how many could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef candies(A,B,C):\n  return A + B // C\n\nprint(candies(10,12,2)) #14",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef num_candy_tickets (A, B, C): \n    return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef tickets(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candy_purchase(A,B,C):\n  return (A + B) // C\n\n#Call the function\ncandy_purchase(100, 200, 15) #Returns 17",
          "\n\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef candy(a, b, c):\n  total = a + b\n  if total > 0:\n    return total // c\n  else:\n    return 0\n\nprint(candy(A, B, C))",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_candy(A, B, C):\n  return A + B // C\n\nprint(buy_candy(5, 10, 4))\n# Output: 6",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_amount(A,B,C):\n  amount = A + B\n  return amount // C\n  \nprint(candy_amount(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef number_of_candies(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_for_candy(a, b, c):\n  total_tickets = a + b\n  num_candy = total_tickets // c\n  return num_candy",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n  return A + B // C\n\nprint(candy_calculator(100, 50, 5))\n\nOutput: 30",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(A, B, C):\n  tickets = A + B\n  candy = tickets // C\n  return candy",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef ticket_calculator(A, B, C):\n    return (A + B) // C\n\n# Call the function with 25 tickets from 'whack a mole', 50 tickets from 'skee ball', and 3 tickets for a piece of candy \nprint(ticket_calculator(25, 50, 3)) \n\n# Output: 19",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(a,b,c):\n  return (a + b)//c\n  \n#Example \ncandy_calc(10,8,3) \n#returns 5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef buy_tickets(A, B, C):\n  return A + B // C \n\nprint(buy_tickets(10, 15, 3))\n# Output: 11",
          " \n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n  return A + B // C\n\n# Example\nprint(candy_calculator(40, 25, 5))\n# Output: 11",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef tickets_for_candy(A, B, C):\n  return A + B // C\nprint(tickets_for_candy(10, 15, 3))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n  total_tickets = A + B\n  candy = total_tickets // C\n  return candy",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef tickets_needed(A, B, C):\n  return min(A, B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef arcade_buy(A, B, C):\n    return A + B / C\n\nprint(arcade_buy(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy(A, B, C):\n    return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef buy_candy(A, B, C): \n  return min(A, B) // C",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " While playing at the arcade, Ned won 26 tickets playing 'whack a mole' and 19 tickets playing 'skee ball'. If he was trying to buy candy that cost 9 tickets a piece, how many could he buy? ",
      "final_answer": 5.0,
      "index": 383
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 54.843027114868164,
      "templates": [
        "Luke was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Luke was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_trips(a,b,c):\n  return (b+c)//a + 1                                                                                                                                                                                 \n                                                                                                                                                                                                                \nnum_trips(A,B,C)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrips(a,b,c):\n  return (b + c)//a + int((b + c)%a != 0)\n\nprint(numTrips(3,5,7)) # 3",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef tray_trips(A, B, C):\n    if A == 0 or B == 0 or C == 0:\n        return 0\n    else:\n        trips = 0\n        if B < A:\n            trips += 1\n            A -= B\n        else:\n            trips += B / A\n            B = B % A\n\n        if C < A:\n            trips += 1\n            A -= C\n        else:\n           ",
          "\nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef num_of_trips(a,b,c):\n  return ((b + c) // a) + ((b + c) % a > 0)\n\nprint(num_of_trips(A, B, C))",
          " \n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef pickUpTrays(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = A + (B + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return ceil(B/A) + ceil(C/A)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(a, b, c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef TripsNeeded(A,B,C):\n  totalTrips = B//A + C//A\n  remainderTrips = B%A + C%A\n  if remainderTrips == 0:\n    return totalTrips\n  else:\n    return totalTrips + 1\n\nprint(TripsNeeded(3,6,4))\n# Output: 3",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef trips(A,B,C):\n  return (B//A + C//A) + (B%A + C%A) > 0",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + min((B + C) % A, 1)",
          "\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef lunch_trips(A, B, C): \n    return (B + C)/A",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + int((B + C) % A > 0)\n\nprint(numTrips(3, 4, 8))\n# Output: 3",
          "\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef calcTrips(A,B,C):\nx = max(B,A)/min(B,A)\nreturn int((B+C)/A)*x+1\n\nprint(calcTrips(3,4,7))\n\nOutput: 5",
          "\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef numOfTrips(a, b, c):\n  return (b + c) // a + ((b + c) % a > 0)\n\nprint(numOfTrips(A, B, C))",
          "\n\nAnswer = (A + B)/A + (A + C)/A = (A + B + A + C)/A"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C):\n  return math.ceil((B + C) / A)\n\n# calling the function\nnumberOfTrips(A, B, C)",
          "\n\nAnswer = (A * B) + (A * C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n    return math.ceil(B/A) + math.ceil(C/A)",
          "\nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          " Assume A, B, and C are all integers.\n\ndef trips(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numTrips(a, b, c):\n  return (b+c)//a + (b + c)%a\n  \n#Example\nnumTrips(3, 10, 5) # returns 4",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef calculate_number_of_trips(A, B, C):\n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\n\nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef numOfTrips(A, B, C):\n  return (B+C)//A + ((B+C)%A > 0)\n\nprint(numOfTrips(A, B, C))",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + (B + C) % A\n  \nprint(num_trips(A,B,C))",
          "\nAnswer = (A+B+C)/A"
        ],
        [
          "\n\ndef num_trips (A, B, C):\n  return (B + C)//A + ((B + C) % A > 0)\n\n# for example\nnum_trips(2, 4, 6)  # answer is 4 trips",
          "\n\nAnswer = (A x B) + (A x C) / A"
        ],
        [
          "\n\ndef pickup_lunch_trays(A, B, C):\n  trips = ((B+C)//A)  \n  remainder = ((B+C)%A)  \n  if remainder > 0:\n    trips += 1\n  return trips\n\ntrips = pickup_lunch_trays(3, 4, 5)\nprint(trips)   # Output: 3",
          "\nAnswer = B + C."
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return ((B + C) // A) + ((B + C) % A > 0)\n\n# example\nnumTrips(3, 5, 10)  # 4 trips",
          "\n\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef calculateTrips(a, b, c):\n  return (b // a) + (c // a) + (b % a != 0) + (c % a != 0)",
          "\nAnswer = B + C"
        ]
      ]
    },
    "source": {
      "question": " Luke was helping the cafeteria workers pick up lunch trays, but he could only carry 4 trays at a time. If he had to pick up 20 trays from one table and 16 trays from another, how many trips will he make? ",
      "final_answer": 9.0,
      "index": 384
    }
  },
  {
    "result": 324.0,
    "meta": {
      "n_calls": 24,
      "duration": 19.55953598022461,
      "templates": [
        "Vanessa and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Vanessa recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Vanessa and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Vanessa recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        324.0,
        324.0,
        324.0,
        324.0
      ],
      "completions": [
        [
          "\n\ndef recycling_points(A, B, C):\n  return A * (B + C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recyclingPoints(A, B, C):\n  return (B + C) * A\n \nprint(recyclingPoints(1, 10, 20))\n# Output: 30",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycle_points(A, B, C):\n  return A*(B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_Points(A, B, C): \n    return (A * B) + (A * C)",
          "\n\nAnswer = A * (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_points(A, B, C):\n    return (B + C) / A\n\nanswer = calculate_points(A, B, C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef point_counter(A, B, C):\n  return (B + C) / A\n\nprint(point_counter(A, B, C))",
          "\nAnswer = A*(B+C)"
        ],
        [
          " \n\ndef recycling_points(A, B, C): \n  return (B + C) / A",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n    return (B/A) + (C/A)",
          " \nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(a,b,c):\n  return (b+c)*a\n  \n  # usage\npoints = recycling_points(a, b, c)\nprint(points)",
          "\nAnswer = A(B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n  return (B + C) / A\n  \nprint(recycling_points(5, 10, 15))\n\nAnswer: 4",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (B + C) // A \n  \nanswer = total_points(A, B, C)",
          "\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef recyclingPoints(A, B, C):\n  return (B + C) * A\n  \nAnswer: The function returns the answer (B + C) * A.",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Vanessa and her friends were recycling paper for their class. For every 9 pounds they recycled they earned one point. If Vanessa recycled 20 pounds and her friends recycled 16 pounds, how many points did they earn? ",
      "final_answer": 4.0,
      "index": 385
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 44,
      "duration": 46.60959982872009,
      "templates": [
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a Python function that returns the answer.",
        "A pet shelter had A puppies when another B were brought in. If C puppies a day are adopted, how long would it take for all of them to be adopted?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef time_to_adopt(A, B, C):\n  return (A + B) / C\n\n# Usage:\ntime_to_adopt(A, B, C)",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef adoption_time(a,b,c):\n  total_puppies = a + b\n  total_days = total_puppies / c\n  return total_days\n\nprint(adoption_time(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptedPuppies(A, B, C): \n  totalPuppies = A + B \n  daysTillAdoption = totalPuppies / C \n  return daysTillAdoption \n\nprint(adoptedPuppies(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef puppies_adopted(A, B, C):\n  total_puppies = A + B \n  days = total_puppies // C \n  if total_puppies % C != 0:\n    days += 1\n  return days \n\nprint(puppies_adopted(A, B, C))",
          "\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef pup_adoption(A, B, C):\n  total = A + B\n  days = total // C\n  if (total % C == 0):\n    return days\n  else:\n    return days + 1\n\npup_adoption(A, B, C)",
          "\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adoption_time(A, B, C):\n  total_puppies = A + B\n  days_required = total_puppies // C\n  return days_required\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef time_to_adopt(A,B,C):\n  return (A+B)/C",
          "\n\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef pet_shelter_adoption(A, B, C):\n    total_puppies = A + B\n    days = total_puppies // C\n    if total_puppies % C != 0:\n        days += 1\n    return days\n\nanswer = pet_shelter_adoption(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef pet_shelter(a, b, c):\n  total_puppies = a + b \n  days = total_puppies // c\n  if total_puppies % c > 0: \n    days += 1\n  return days\n\nprint(pet_shelter(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adopted(a, b, c):\n  total_puppies = a + b\n  adoption_days = total_puppies // c\n  return adoption_days\n\nprint(adopted(A, B, C))",
          "\n\nAnswer = (A+B)/C   days"
        ],
        [
          " \n\ndef calc_shelter_time(A, B, C): \n  return (A + B) / C\n\nprint(calc_shelter_time(A, B, C))",
          "\n\nAnswer = (A+B)/C days"
        ],
        [
          "\n\ndef adoption_time(total_puppies, adoption_rate):\n  total_time = total_puppies/adoption_rate\n  return total_time\n\nadoption_time(A+B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  total = A + B\n  days = total // C\n  if total % C != 0:\n    days += 1\n  return days\n\nprint(adoptionTime(A, B, C))",
          "\n\nAnswer = (A + B)/C days"
        ],
        [
          "\n\ndef adoption_time(a,b,c):\n  return (a+b)/c\n\nprint(adoption_time(A, B, C))",
          "\nAnswer = ((A+B)/C) days"
        ],
        [
          "\n\ndef adopted_puppies(a, b, c):\n  total_puppies = a + b\n  days = total_puppies/c\n  return days\n  \nprint(adopted_puppies(10, 5, 3)) #Output: 4.166666666666667",
          "\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoptPuppies(A, B, C):\n  total_puppies = A + B \n  total_days = total_puppies // C\n  if total_puppies % C > 0:\n    total_days += 1\n  return total_days\n\nprint(adoptPuppies(A, B, C))",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoption_time(a, b, c):\n  total_pups = a + b\n  days = total_pups / c\n  return days \n\nprint(adoption_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_adoptions(A, B, C):\n    adoptions = A + B\n    days = adoptions / C\n    return days\n\nanswer = calculate_adoptions(A, B, C)\nprint(answer)",
          "\nAnswer = (A + B) divided by C days."
        ],
        [
          "\n\ndef timeToAdopt(a, b, c):\n  totalPets = a + b\n  adoptionTime = totalPets / c\n  return adoptionTime\n\n#usage example\ntimeToAdopt(1, 3, 2) #2.5",
          "\nAnswer = (A + B) \u00f7 C days"
        ],
        [
          " \n\ndef find_time(A, B, C):\n    total_puppies = A + B\n    days_for_adoption = total_puppies/C\n    return days_for_adoption\n\nprint(find_time(A, B, C))",
          "\n\nAnswer = (A + B) / C days"
        ],
        [
          "\n\ndef adoptionTime(A, B, C):\n  totalPuppies = A + B\n  return totalPuppies/C \n\nprint(adoptionTime(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef adoptPuppies(a, b, c):\n  totalPuppies = a + b\n  daysForAdoption = totalPuppies / c\n  return daysForAdoption\n\nprint(adoptPuppies(A,B,C))",
          " \nAnswer = (A+B)/C days"
        ]
      ]
    },
    "source": {
      "question": " A pet shelter had 2 puppies when another 34 were brought in. If 4 puppies a day are adopted, how long would it take for all of them to be adopted? ",
      "final_answer": 9.0,
      "index": 386
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 37.72827506065369,
      "templates": [
        "At a company picnic A managers and B employees decided to start a game of volleyball. If they split into C teams how many people would be on each team?\nWrite a Python function that returns the answer.",
        "At a company picnic A managers and B employees decided to start a game of volleyball. If they split into C teams how many people would be on each team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef team_size(managers, employees, teams):\n  return (managers + employees) // teams",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef game_teams (A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef volleball_teams(managers, employees, teams):\n  return (managers + employees) / teams",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef teamSize(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef num_persons_per_team(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef teams_volleyball_game(a, b, c):\n  return a // c + b // c + (a % c + b % c)//c \n\nprint(teams_volleyball_game(a, b, c))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C):\n    return A//C + B//C",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef volleballTeams(A, B, C):\n  number_per_team = (A + B) // C\n  return number_per_team",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef VolleyballTeams(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef teams(a, b, c):\n  return (a + b) // c",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef team_split(managers, employees, teams):\n  return ((managers + employees) // teams)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef team_splitter(A, B, C):\n  num_on_each_team = (A + B) // C\n  return num_on_each_team\n\n#example\nteam_splitter(10, 20, 4)  # Answer: 15",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef volleyball(A, B, C):\n  return (A + B)//C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef teamSizeCalc(A,B,C):\n    return (A+B)//C",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef peoplePerTeam(A,B,C):\n  return (A+B)//C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C): \n  return int((A+B)/C)",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef division(A,B,C): \n  return (A + B) // C \n\nprint(division(A,B,C))",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef volleyball_teams(managers, employees, teams):\n  team_size = int((managers + employees) / teams)\n  return f\"There would be {team_size} people on each team.\" \n  \nprint(volleyball_teams(4, 16, 2))\n\nOutput: There would be 10 people on each team.",
          "\nAnswer = A / C + B / C"
        ],
        [
          " \ndef volleyballGame(a, b, c):\n  return (a+b)//c",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef teams(A, B, C):\n  return A + B // C",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef volleyball_teams(A, B, C):\n    return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef get_teams(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef team_members(A, B, C): \n  return (A + B) // C",
          "\nAnswer = C \u00d7 A/B"
        ],
        [
          " \n\ndef volleyball_teams(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef teams(A, B, C):\n  return (A + B) // C\n\n# the parentheses around (A + B) are redundant, but added for clarity",
          "\n\nAnswer = A/C + B/C"
        ]
      ]
    },
    "source": {
      "question": " At a company picnic 9 managers and 15 employees decided to start a game of volleyball. If they split into 8 teams how many people would be on each team? ",
      "final_answer": 3.0,
      "index": 387
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 36,
      "duration": 33.30672907829285,
      "templates": [
        "John was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "John was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef pages_used(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  total_pages = total_cards // A\n  if total_cards % A > 0:\n    total_pages += 1\n  return total_pages",
          "\nAnswer = A + (C/B rounded up to the nearest whole number)"
        ],
        [
          "\n\ndef pages_in_binder(b, c):\n  return (b + c)//A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef baseball_card_pages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  return int(total_cards/20) + (1 if total_cards%20 != 0 else 0)",
          "\nAnswer = A + (B/C)"
        ],
        [
          " Assume that John can fit 9 cards on each page.\n\ndef page_num(b, c):\n    num = (b + c) // 9\n    return num + 1",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef organizeCards(new, old):\n  total_cards = new + old\n  pages = total_cards // A\n  if total_cards % A > 0:\n    pages = pages + 1\n  return pages",
          "\nAnswer = (B+C) / A"
        ],
        [
          "\n\ndef calc_pages(b, c):\n  return (b + c) // 10 + 1\n\npages = calc_pages(b, c) \nprint(pages)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numPages(B, C):\n  return (B+C)//A + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef getTotalPages(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  num_pages = total_cards // 26\n  if (total_cards % 26 != 0):\n    num_pages += 1\n  return num_pages\n\nprint(getTotalPages(B,C))",
          "\n\nAnswer = ceil(B/A + C/A)"
        ],
        [
          "\n\ndef get_num_pages(new_cards, old_cards):\n    return (new_cards + old_cards) // A + (1 if (new_cards + old_cards) % A > 0 else 0)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef num_pages(b, c):\n  return math.ceil((b + c) / A)",
          "\n\nAnswer = A + (B + C) // 2"
        ],
        [
          "\n\ndef baseball_binder(B, C):\n  return math.ceil((B+C)/A)",
          "\nAnswer = A + (C/9) + (B/9)"
        ],
        [
          "\n\ndef pages_needed(new_cards, old_cards):\n    total_cards = new_cards + old_cards\n    pages_needed = total_cards // A\n    if total_cards % A > 0:\n        pages_needed += 1\n    return pages_needed",
          "\nAnswer = A + [B + C / A]"
        ],
        [
          "\n\ndef pagesInBinder(new_cards, old_cards): \n  total_cards = new_cards + old_cards \n  pages_needed = total_cards // 10 \n  if total_cards % 10 != 0:\n    pages_needed += 1\n  return pages_needed",
          "\n\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef baseball_binder(B, C):\n  total_cards = B + C\n  total_pages = total_cards // A\n  if total_cards % A != 0:\n    total_pages += 1\n  return total_pages",
          "\n\nAnswer = A + (B + C)/A"
        ],
        [
          "\n\ndef calculatePages(newCards, oldCards):\n pages = (newCards + oldCards) // A\n if (newCards + oldCards) % A != 0:\n    pages += 1\n return pages",
          "\nAnswer = A + (B + C - 1)/A"
        ],
        [
          "\n\ndef pagecount(b,c):\n  return (b+c)//A + 1",
          "\nAnswer = A + (B/C)"
        ]
      ]
    },
    "source": {
      "question": " John was organizing his baseball cards in a binder with 3 on each page. If he had 8 new cards and 16 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 8.0,
      "index": 388
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 30,
      "duration": 25.584961891174316,
      "templates": [
        "Wendy uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Wendy uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "  \n\ndef calculate_pictures(A, B, C):\n  return (A + B) / C\n\nprint(calculate_pictures(A, B, C))",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef album_pics(A, B, C):\n  return (A + B) / C\n  \nprint(album_pics(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef picAlbums(A, B, C):\n  return A/C + B/C",
          "\n\nAnswer = (A+B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef sort_pics(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef number_of_albums(A, B, C):\n    return (A + B) // C\n\nprint(number_of_albums(5, 10, 4))\n# Output: 6",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef album_pics(A, B, C):\n  return (A + B)//C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_sort(pictures_phone, pictures_camera):\n  total_pictures = pictures_phone + pictures_camera\n  pictures_per_album = total_pictures // 3\n  return pictures_per_album\n\nprint(album_sort(A, B))",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef album_pic_division(A,B,C):\n    return int((A + B) / C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef findPicsPerAlbum(A, B, C):\n  totalPictures = A + B\n  return totalPictures // C\n  \nanswer = findPicsPerAlbum(A, B, C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef pictures_in_albums(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  total_pics = A + B\n  pics_per_album = total_pics/C\n  return pics_per_album",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef numPictures(A, B, C):\n  \n  return (A + B) // C",
          "\n\nAnswer = A/C + B/C"
        ],
        [
          " \n\ndef album_size(A, B, C):\n    number_of_pics = A + B\n    album_size = number_of_pics / C\n    return album_size\n\nprint(album_size(A,B,C))",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef numPicsInEachAlbum(numPicsA, numPicsB):\n  totalPics = numPicsA + numPicsB\n  return totalPics // C\n  \nprint(numPicsInEachAlbum(A, B))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_pics(A, B, C): \n  total_pics = A + B\n  return total_pics // C\n\nprint(number_of_pics(15, 25, 3))  # Answer: 10",
          "\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " Wendy uploaded 22 pictures from her phone and 2 from her camera to facebook. If she sorted the pics into 4 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 6.0,
      "index": 389
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 46.583842039108276,
      "templates": [
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A toy store had A giant stuffed bears in stock when they got another shipment with B bears in it. The put the bears onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelfNumber(A, B, C):\n  return A + B // C\n\nprint(shelfNumber(A, B, C))",
          "\nAnswer = A + B/C"
        ],
        [
          "\n\ndef bears_on_shelves(A, B, C):\n    return (A + B) // C\n\n# For example, if there are 10 A bears, 20 B bears, and 5 on each shelf\nshelves = bears_on_shelves(10, 20, 5)\nprint('They used {} shelves.'.format(shelves))\n\n# Output: They used 6 shelves.",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculateShelves(a, b, c):\n  total_bears = a + b\n  return total_bears // c\n\nprint(calculateShelves(a, b, c))",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef bear_shelves(A, B, C):\n  return A + B // C\n  \nprint(bear_shelves(20, 10, 5))\n# Output: 6",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculateShelves(A, B, C): \n  return (A + B) // C\n\n# Example Usage\nprint(calculateShelves(15, 10, 8))\n# Output: 4",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n    return (A + B) // C\n\n# Example\nprint(numShelves(50, 20, 10))\n# Output: 7",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef count_bears(A, B, C):\n    return (A + B) // C\n\nprint(count_bears(10, 4, 3))\n# will return 4",
          "\nAnswer = ((A + B)/C)"
        ],
        [
          "\n\ndef bearsOnShelves(A, B, C):\n  return (A + B) // C\n\nprint(bearsOnShelves(20, 30, 4))\n# Output: 10",
          "\nAnswer = B \u00f7 C"
        ],
        [
          "\n\ndef num_shelves(A,B,C): \n  total_num_shelves = (A+B)//C \n  return total_num_shelves\n\nprint(num_shelves(A,B,C))",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef shelfCalculator(A, B, C):\n  return (A + B) // C\n  \nprint(shelfCalculator(10, 22, 5)) # prints: 5",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef total_shelves(A, B, C):\n  return (A + B) // C\n\ntotal_shelves(A, B, C)",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef getNumberOfShelves(A, B, C): \n  return (A + B) // C\n\nprint(getNumberOfShelves(3, 10, 5))  # returns 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A + B) // C\n\nshelves = calculate_shelves(10, 10, 5)\nprint(shelves) # prints 4",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C): \n return (A + B) // C \n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B \u00f7 C"
        ],
        [
          "\n\ndef count_shelves(A, B, C):\n  return (A+B) // C\n\nprint(count_shelves(10, 5, 3))\n# Output: 4",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  return (A + B) // C\n\nshelves(A, B, C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  total_shelves = (A + B) // C\n  return total_shelves\n\nprint(shelf_count(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C\n\n#Example\nshelves(10, 20, 5)\n\n#Output\n8",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves (A, B, C): \n  return (A + B) // C\n\nprint(shelves(5, 10, 4)) \n\nAnswer: 6",
          "\n\nA + B = C\nC/A = Number of shelves\nAnswer = C/A"
        ],
        [
          "\n\ndef bear_shelves(A, B, C):\n  return (A + B) // C\n\nprint(bear_shelves(2, 4, 6))  # Output: 1",
          "\n\nAnswer = C/B"
        ],
        [
          "\n\ndef total_shelves(A, B, C):\n  return (A + B) // C\n  \nprint(total_shelves(A, B, C))",
          "\nAnswer = A + B \u00f7 C"
        ],
        [
          "\n\ndef calculate_shelves(a, b, c):\n  return (a + b) // c\n    \nprint(calculate_shelves(10, 20, 5)) # 6 shelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelf_number(A, B, C):\n  return (A + B) // C\n\nprint(shelf_number(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef get_num_shelves(A, B, C):\n  return (A + B) // C\n\nprint(get_num_shelves(A, B, C))",
          "\nAnswer = (A+B)/C"
        ],
        [
          " \n\ndef calcShelves(A, B, C):\n  return (A + B) // C\n\nprint(calcShelves(8, 4, 3)) # Output: 4",
          "\n\nAnswer = (A + B) / C"
        ]
      ]
    },
    "source": {
      "question": " A toy store had 17 giant stuffed bears in stock when they got another shipment with 10 bears in it. The put the bears onto shelves with 9 on each shelf. How many shelves did they use? ",
      "final_answer": 3.0,
      "index": 390
    }
  },
  {
    "result": 384.0,
    "meta": {
      "n_calls": 28,
      "duration": 22.20488977432251,
      "templates": [
        "Zoe and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Zoe recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a Python function that returns the answer.",
        "Zoe and her friends were recycling paper for their class. For every A pounds they recycled they earned one point. If Zoe recycled B pounds and her friends recycled C pounds, how many points did they earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        384.0,
        384.0,
        384.0,
        384.0,
        384.0
      ],
      "completions": [
        [
          " \n\ndef paper_points(A, B, C): \n    return A * (B + C)",
          "\n\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C): \n  return A * (B + C)",
          "\nAnswer = A*(B + C)"
        ],
        [
          "\n\ndef recyclingPoints(A, B, C):\n  return (A * B) + (A * C)",
          "\n\nAnswer = A*(B+C)"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A * B + A * C)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef calculatePoints(A,B,C):\n  return A*(B+C)",
          "\n\nAnswer = A*(B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_points(A, B, C):\n  return A * (B + C)",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          " \n\ndef total_points(A, B, C):\n  return (B + C) / A",
          "\n\nAnswer = A \u00d7 (B + C)"
        ],
        [
          "\n\ndef recycling_points(a, b, c): \n  return (a*b + a*c)",
          "\nAnswer = A * (B + C)"
        ],
        [
          "\n\ndef totalPoints (A,B,C): \n  return A*(B + C)",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef pointCounter(A, B, C):\n  return (B+C)/A\n\npointCounter(2, 10, 15) => 15",
          "\n\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef recycling_points(A, B, C):\n    return A*(B+C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef points_earned(A,B,C):\n  return (B+C)*A \n\npoints_earned(A, B, C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef recycling(A, B, C): \n  return A*(B+C)",
          "\nAnswer = A x (B + C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return (A * B) + (A * C)",
          "\nAnswer = A \u00d7 (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Zoe and her friends were recycling paper for their class. For every 8 pounds they recycled they earned one point. If Zoe recycled 25 pounds and her friends recycled 23 pounds, how many points did they earn? ",
      "final_answer": 6.0,
      "index": 391
    }
  },
  {
    "result": 10.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.660298109054565,
      "templates": [
        "Billy was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a Python function that returns the answer.",
        "Billy was organizing his baseball cards in a binder with A on each page. If he had B new cards and C old cards to put in the binder, how many pages would he use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        10.0
      ],
      "completions": [
        [
          "\n\ndef baseballCards(B, C):\n  return (B + C) // A + 1",
          "\nAnswer =int((B+C)/A) + 1"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numPages(new, old):\n    total = new + old\n    pages = total // A\n    if(total % A > 0):\n        pages += 1\n    return pages",
          "\nAnswer = Math.ceil((B + C) / A)"
        ],
        [
          "\n\ndef num_pages(B, C):\n  # Add A, B, and C\n  page_total = A + B + C\n  # Divide by A and round up to get number of pages\n  page_count = round(page_total / A)\n  # Return total\n  return page_count",
          "\nAnswer = (B + C) / A"
        ],
        [
          " \n\ndef pages_needed(new_cards, old_cards):\n    num_pages = (new_cards + old_cards) // 10\n    if (new_cards + old_cards) % 10 > 0:\n        num_pages += 1\n    return num_pages",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef numberOfPages(B, C):\n  return (B + C) // A + 1",
          "\n\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef number_of_pages(new_cards, old_cards):\n  return (new_cards + old_cards) // 10 + (1 if (new_cards + old_cards) % 10 else 0)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef page_count(new_cards, old_cards):\n  total_cards = new_cards + old_cards\n  pages = total_cards // 25\n  if total_cards % 25 > 0:\n    pages += 1\n  return pages",
          "\n\nAnswer = A + (B + C) / A"
        ],
        [
          "\n\ndef pageCalc(B,C):\n  return (B + C) // A + 1",
          "\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef page_count(B,C):\n  total = B + C\n  return total // A\n  if total % A > 0:\n    return total // A + 1\n  else:\n    return total // A",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\ndef number_of_pages(B, C):\n  return (B + C) // A + 1\n  \n# Where A is the number of cards per page.",
          "\nAnswer = B + C / A"
        ],
        [
          "\n\ndef calc_pages(b, c):\n  pages = (b + c) // A\n  if (b + c) % A > 0:\n    pages += 1\n  return pages",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_for_cards(new, old):\n  return math.ceil((new + old) / A)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_needed(A, B, C):\n    return (B + C) // A + 1",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef baseballCards(numOfCards, numOfOldCards):\n  totalPages = math.ceil((numOfCards + numOfOldCards) / A)\n  return totalPages",
          "\n\nAnswer = A + ((B + C) / A)"
        ],
        [
          " \n\ndef pageNeeded(B, C):\n  totalCards = B + C\n  pagesNeeded = totalCards // A\n  if totalCards % A != 0:\n    pagesNeeded = pagesNeeded + 1\n    \n  return pagesNeeded",
          "\nAnswer =A + (B+C)/A"
        ],
        [
          "\n\ndef calculate_pages(b, c): \n  return (b + c) // A + 1",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calc_pages(new_cards, old_cards):\n  pages = (new_cards + old_cards) // 10\n  remainder = (new_cards + old_cards) % 10\n  if remainder > 0:\n    pages += 1\n  return pages\n  \nanswer = calc_pages(B, C)",
          "\n\nAnswer = A + (B / C)"
        ],
        [
          "\n\ndef numOfPages(new_cards, old_cards):\n  total = new_cards + old_cards\n  pages = total // A\n  if total % A > 0: \n    pages += 1 \n  return pages",
          "\n\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef baseball_cards(B,C):\n    TC = B + C\n    pages = TC // A\n    if TC % A != 0:\n        pages += 1\n    return pages",
          "\nAnswer = A + (B/C)"
        ],
        [
          "\n\ndef num_pages(B, C):\n  return int((B+C) / A) + 1",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numOfPages(B, C):\n  return B + C // 9 + 1 # assumes that each page holds 9 cards",
          "\nAnswer = B + C/A"
        ],
        [
          "\n\ndef pagesUsed(A,B,C): \n  return (B + C) // A + 1",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef num_pages(new, old):\n  return (new // A) + (old // A) + (f'{new % A > 0}' or f'{old % A > 0}')\n\nprint(num_pages(B, C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef pages_used(cards_a, cards_b, cards_c):\n  total_cards = cards_a + cards_b + cards_c\n  page_number = total_cards // 9\n  if total_cards % 9 != 0:\n    page_number += 1\n  return page_number",
          "\nAnswer = A + (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Billy was organizing his baseball cards in a binder with 5 on each page. If he had 3 new cards and 42 old cards to put in the binder, how many pages would he use? ",
      "final_answer": 9.0,
      "index": 392
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 48.679540157318115,
      "templates": [
        "For a birthday party Tom bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a Python function that returns the answer.",
        "For a birthday party Tom bought A regular sodas and B diet sodas. If his fridge would only hold C on each shelf, how many shelves would he fill up?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculateShelves(A, B, C): \n    totalSodas = A + B\n    numberOfShelves = totalSodas // C\n    return numberOfShelves\n\nprint(calculateShelves(6, 4, 3)) # returns 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef birthday_soda(A,B,C): \n  total_shelves = (A + B) // C \n  return total_shelves \n\nprint(birthday_soda(20,15,4))\n\nOutput: 5",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef birthday_soda(A,B,C): \n\treturn int((A+B)/C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef SodaShelves(A, B, C): \n  totalShelves = int(A/C) + int(B/C) \n  return totalShelves",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numShelves(A,B,C):\n  return (A + B) // C\n  \nnumShelves(A,B,C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A,B,C):\n  return (A+B)//C + (A+B)%C > 0\n\nprint(shelves(3,2,4)) #answer is 2",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A//C)+(B//C)",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef soda_shelves(A, B, C):\n  return (A//C) + (B//C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesCount(a, b, c):\n  return (a // c + b // c)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A // C) + (B // C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_of_shelves(A, B, C):\n  return (A + B) // C\n\nprint(num_of_shelves(30, 20, 5)) # 8 shelves",
          "\n\nAnswer = $\\frac{A+B}{C}$"
        ],
        [
          "\n\ndef soda_shelves(A, B, C):\n    return (A + B) // C\n\n#Example\nsoda_shelves(10, 12, 3) \n#returns 4",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef numShelvesFilled(A,B,C):\n  return math.ceil((A+B)/C)",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves_filled(A, B, C):\n  return (A + B)//C\n\nprint(shelves_filled(10, 8, 4))\n# Prints 3",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_shelves(A, B, C):\n  total_shelves = (A+B)//C\n  return total_shelves\n\nprint(calc_shelves(A, B, C))",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef countShelves(A, B, C): \n    return math.ceil(A/C) + math.ceil(B/C)\n        \nprint(countShelves(A, B, C))",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef calculateShelves(A,B,C):\n  total = A + B\n  return total // C\n  \nprint(calculateShelves(A,B,C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef Birthday_Party(A, B, C):\n  return (A//C) + (B//C) + (A%C) + (B%C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelvesOfSoda(A, B, C):\n    return (A + B) // C + ((A + B) % C > 0)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A + B) // C + (A + B) % C > 0",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef soda_shelves(a, b, c):\n  return (a//c) + (b//c)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\n\ndef solve(a,b,c):\n    shelves_filled = (a + b) // c\n    if (a + b) % c > 0:\n        shelves_filled += 1\n    return shelves_filled\n\nprint(solve(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef answer(A, B, C):\n    numShelves = ((A + B) // C)\n    if (A + B) % C > 0:\n        numShelves = numShelves + 1\n    return numShelves",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef sodaShelves(A,B,C):\n  return (A + B)/C\n\n# Call the function\nsodaShelves(5, 7, 6)\n# Output: 2.5",
          "\n\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return math.ceil(A / C) + math.ceil(B / C)",
          "\n\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " For a birthday party Tom bought 4 regular sodas and 52 diet sodas. If his fridge would only hold 7 on each shelf, how many shelves would he fill up? ",
      "final_answer": 8.0,
      "index": 393
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 51.049686908721924,
      "templates": [
        "Victor was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a Python function that returns the answer.",
        "Victor was helping the cafeteria workers pick up lunch trays, but he could only carry A trays at a time. If he had to pick up B trays from one table and C trays from another, how many trips will he make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef trips(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef tripsNeeded(A, B, C): \n  answer = A // (B + C)\n  return answer + (A % (B + C) > 0)\n\n#Call the function \ntripsNeeded(10, 2, 1)\n# returns 4",
          "\n\nAnswer = (A + B) + (A + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n  return (B+C) // A + (B+C) % A",
          "\n\nAnswer = B + C / A"
        ],
        [
          " \n\ndef num_of_trips(A, B, C):\n  return (B//A) + (C//A) + (B%A > 0) + (C%A > 0)",
          "\nAnswer = ((A + B) + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B//A + C//A + (B%A + C%A)//A + ((B%A + C%A)%A > 0))\n\n# For example, if Victor can carry 3 trays at a time and he has to pick up 4 trays from one table and 6 trays from another, he will need to make 3 trips:\n\nprint(numTri",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n    return (B + C) // A + (B + C) % A",
          "\n\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C):\n  return (B + C) // A + 1\n\nnum_trips(A, B, C)",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef tray_trips(a,b,c):\n    total = b + c\n    trips = total // a\n    if total % a != 0:\n        trips += 1\n    return trips\n    \ntrips = tray_trips(A,B,C)",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef numOfTrips(A, B, C):\n  return (B + C) //A + (B + C) % A",
          "\n\nAnswer = (A + B) + (A + C)"
        ],
        [
          "\n\ndef numberOfTrips(A, B, C): \n  return (B+C)//A + (B+C) % A \n  \nprint(numberOfTrips(A, B, C))",
          "\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_trips(A, B, C): \n  return (B + C) // A + (((B + C) % A) > 0)\n  \nprint(num_trips(A, B, C))",
          "\n\nAnswer = (A + B) + (A + C) = 2A + B + C"
        ],
        [
          "\n\ndef trips(A,B,C):\n  if A < B or A < C:\n    return 'A is too small!'\n  else:\n    return (B+C) // A + (B+C) % A",
          "\nAnswer = (A + B) + (A + C)"
        ],
        [
          " \n\ndef trips(A, B, C):\n    return ((B + C) // A) + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef calculate_trips(A, B, C):\n  total_trips = (B + C) // A\n  if (B + C) % A > 0:\n    total_trips += 1\n  return total_trips\n\n# example\ncalculate_trips(2, 3, 4)\n# Output: 3",
          "\n\nAnswer = A + (B + C)"
        ],
        [
          "\n\ndef trips(A,B,C):\n  return (B + C) // A + (1 if (B+C) % A > 0 else 0)",
          "\n\nAnswer = \u230a(A+B)/C\u230b"
        ],
        [
          "\n\ndef trips(A, B, C):\n  total_trays = B + C\n  return total_trays // A + (total_trays % A > 0)",
          "\nAnswer = A + B + C"
        ],
        [
          "\n\ndef trays(A, B, C):\n  trips = (B + C) / A\n  return trips\n\nprint(trays(A, B, C))",
          "\n\nAnswer = (A + B + C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C)/A\n\nprint(numTrips(A, B, C))",
          "\nAnswer = (A + B) / A + (A + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n  totalTrips = B//A + C//A\n  remainder = B%A + C%A\n  if remainder > 0: \n    totalTrips += 1\n  return totalTrips\n\nprint(numTrips(A,B,C))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef numTrips(A, B, C):\n  return (B + C) // A + min( (B + C)% A, 1)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef trips(a,b,c): \n  return (b+c) // a + int(((b+c) % a) != 0)\n\ntrips(A,B,C)",
          "\n\nAnswer = (A + B + C) / A"
        ],
        [
          "\n\ndef num_of_trips(A, B, C):\n  total_trips = (B + C) // A\n  if (B + C) % A != 0:\n    total_trips += 1\n  return total_trips\n\nprint(num_of_trips(1, 10, 20)) #should print 4",
          "\nAnswer = (A + B) + (A + C) / A"
        ],
        [
          "\n\ndef trips(A, B, C):\n    return (B+C)//A + bool((B+C)%A)\n\nLet A = 5, B = 16 and C = 10\ntrips(5, 16, 10)\n\nThis will return 4 trips.",
          " \nAnswer = (A + B)/A + (A + C)/A"
        ],
        [
          "\n\ndef numTrips(A, B, C): \n    return (B//A + C//A + 1)\n\n# example  \nprint(numTrips(2, 6, 7)) # Output: 4",
          "\n\nAnswer = (A+B+C) / A"
        ]
      ]
    },
    "source": {
      "question": " Victor was helping the cafeteria workers pick up lunch trays, but he could only carry 7 trays at a time. If he had to pick up 23 trays from one table and 5 trays from another, how many trips will he make? ",
      "final_answer": 4.0,
      "index": 394
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 39.451576948165894,
      "templates": [
        "Paul had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a Python function that returns the answer.",
        "Paul had saved up A dollars. If he received another B dollars for his allowance, how many C dollar toys could he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef possibleToys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef money_for_toys(A,B,C):\n  return (A + B) // C",
          "\nAnswer = A + B \\div C"
        ],
        [
          "\n\ndef toy_calculator(A, B, C):\n  return (A + B) // C  # Integer division, answer = no. of C dollar toys",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_cost(a,b,c):\n  total_funds = a+b\n  return total_funds // c\n\n# Call the function\ncalculate_cost(A, B, C)",
          "\n\nAnswer = (A + B) \\ C"
        ],
        [
          "\n\ndef num_toys_available(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toyCalculator(A,B,C):\n  total = A+B\n  toys = total//C\n  return toys",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toys_calculator(A, B, C):\n  return (A + B) / C",
          "\n\nA + B = C\nAnswer = A + B = C"
        ],
        [
          "\n\ndef toy_purchase(A, B, C):\n  total = A + B\n  return total // C",
          "\n\nA + B = C\nAnswer = A + B / C"
        ],
        [
          "\n\ndef money_for_toys(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A+B / C"
        ],
        [
          "\n\n\ndef numToys(A, B):\n  C = (A + B) // 4\n  return C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef how_many_toys(A, B, C):\n    return (A + B) // C",
          "\nA + B = C\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef buy_toy(A, B):\n  return (A+B)/C",
          "\nAnswer = (A + B) \u00f7 C"
        ],
        [
          "\n\ndef toy_calculator(A,B):\n    C = A + B\n    return C//3\n\nprint(toy_calculator(500,50)) #Prints 171",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef money_toys(A, B, C): \n  return (A + B)//C",
          "\n\nA + B / C = Answer\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A + B) / C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toys_for_Paul(A, B):\n  C = A + B\n  return C // 10\n\nprint(toys_for_Paul(100, 20))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n    return (A + B) // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A + B) // C\n\ntoys = calculate_toys(A, B, C)\nprint(\"With A dollars saved up and B dollars for allowance, Paul can buy C dollar toys.\")",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef find_toys(A, B, C):\n  total_dollars = A+B\n  number_of_toys = total_dollars // C\n  return number_of_toys",
          "\nA + B = C\nAnswer = C"
        ],
        [
          "\n\ndef total_cost(A, B, C):\n    return (A+B)//C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef toy_price(A, B, C):\n  return (A + B) // C",
          "\n\nA + B = C\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef toy_calculator(A, B, C):\n  total = A + B\n  return total // C",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef get_toys(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = A + B / C"
        ],
        [
          "\n\ndef buy_toys(A, B):\n    \n    total = A + B\n    C = total // 10\n    \n    return C",
          "\n\nAnswer = A+B/C"
        ],
        [
          "\n\ndef calculator(A, B, C):\n  return (A + B) // C",
          "\nA + B = C \nAnswer = C"
        ]
      ]
    },
    "source": {
      "question": " Paul had saved up 4 dollars. If he received another 11 dollars for his allowance, how many 5 dollar toys could he buy? ",
      "final_answer": 3.0,
      "index": 395
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 36,
      "duration": 32.81286597251892,
      "templates": [
        "Katie uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a Python function that returns the answer.",
        "Katie uploaded A pictures from her phone and B from her camera to facebook. If she sorted the pics into C different albums with the same amount of pics in each album, how many pictures were in each of the albums?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef picAlbums(A,B,C):\n  return (A + B) / C \n  \nprint(picAlbums(A,B,C))",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef picsPerAlbum(A, B, C):   \n  return ((A + B) // C)\n\nprint(picsPerAlbum(A, B, C))",
          "\n\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef divide_pics(A, B, C):\n  total_pics = A + B\n  pics_per_album = total_pics / C\n  return pics_per_album\n\nprint(divide_pics(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef num_pics(A,B,C):\n    return (A + B)//C\n  \nprint(num_pics(A,B,C))",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          " \n\ndef albums(A, B, C):\n  num_pics = (A + B) / C\n  return num_pics\n  \nThe return value will be the number of pictures in each of the albums.",
          "\nAnswer = A/C +B/C"
        ],
        [
          "\n\ndef pics_albums (a, b, c): \n  return (a + b) / c \n\nAnswer: (a+b)/c",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  total_pics = A + B\n  pics_per_album = total_pics / C\n  return int(pics_per_album)\n\nprint(album_pics(50, 40, 6)) # prints 10",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef getPicNumbers(picA, picB): \n  totalPics = picA + picB\n  albumPics = totalPics//C\n  return albumPics",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef same_amount_albums(A, B, C):\n totalPics = A + B\n return totalPics//C\n \nalbums = same_amount_albums(5, 10, 3)\nprint(albums)\n\nAnswer: 7",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return ((A + B) // C)",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef num_of_pics_per_album(A, B, C):\n  return (A + B) // C",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef equalPictures(A, B, C):\n    return (A + B) / C;\n\nprint(equalPictures(A, B, C))",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef albums_pics(A, B, C): \n  total = A + B\n  return total // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef picsInAlbums(A, B, C):\n  return (A + B) // C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  \n  total_pics = A + B\n  answer = total_pics // C\n  \n  return answer\n  \nprint(number_of_pictures(10, 20, 3))",
          "\nAnswer = A/C + B/C"
        ],
        [
          "\n\ndef pic_albums(a,b,c):\n    return (a+b)//c\n\nAnswer: pic_albums(A,B,C)",
          "\nAnswer =A + B/C"
        ],
        [
          "\n\ndef sort_pics(A, B):\n  total = A + B\n  return total // C\n\n# If A = 5, B = 10, and C = 4, the answer would be 3.",
          "\n\nAnswer = (A + B)/C"
        ],
        [
          " \n\ndef album_photos(A, B, C):\n  return (A + B) / C",
          "\nAnswer = (A + B) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " Katie uploaded 30 pictures from her phone and 51 from her camera to facebook. If she sorted the pics into 9 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ",
      "final_answer": 9.0,
      "index": 396
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.80705904960632,
      "templates": [
        "Debby's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a Python function that returns the answer.",
        "Debby's class is going on a field trip to the zoo. If each van can hold A people and there are B students and C adults going, how many vans will they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef vans_needed(A,B,C): \n  return (B + C) // A + (1 if (B + C) % A > 0 else 0)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return (B // A) + (C // A) + (B % A > 0) + (C % A > 0)",
          "\n\nAnswer = (A*B + A*C) / A"
        ],
        [
          "\n\ndef vansNeeded(A, B, C): \n  return math.ceil((B + C) / A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  total_people = B + C\n  vans = total_people // A\n  remainder = total_people % A\n  if remainder > 0:\n    vans += 1\n  return vans",
          "\nAnswer = (B + C)/A"
        ],
        [
          " \n\ndef vans_needed(A, B, C):\n    return (B//A + 1 + C//A + 1)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  # Calculate the number of vans needed\n  vans = ((B + C) // A) + ((B + C) % A > 0)\n  \n  return vans",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef num_vans(A, B, C): \n  return (B + C) // A + (B + C) % A",
          "\n\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef calculate_vans(A, B, C):\n  total = B + C\n  return total // A + (total % A > 0)\n  \nprint(calculate_vans(A, B, C))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A,B,C):\n  return (B // A) + (C // A) + (B % A + C % A) // A +  (B % A + C % A) % A",
          "\nAnswer = (B+C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  total = B + C\n  return total // A + (1 if total % A > 0 else 0)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef number_of_vans(A, B, C):\n  total_people = B + C\n  return total_people // A + (1 if total_people % A > 0 else 0)",
          "\n\nAnswer = ((B + C) / A)"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n    total_people = B + C\n    vans_needed = total_people // A\n    if total_people % A > 0:\n        vans_needed += 1\n    return vans_needed",
          "\nAnswer = A*((B+C)/A)"
        ],
        [
          "\n\ndef vansRequired(A, B, C):\n  return (B//A + C//A + (B%A + C%A)//A +  1 if (B%A + C%A)%A > 0 else 0)",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  people = B + C\n  vans_needed = people / A \n  return vans_needed",
          "\n\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef numVans(a, b, c):\n  return (b + c) // a + ((b + c) % a > 0)\n\n# To call the function:\nnumVans(A, B, C)",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans (A, B, C):\n  return ((B + C) / A) + 1",
          "\nAnswer = (B + C)/A"
        ],
        [
          "\n\ndef vansNeeded (a, b, c):\n  return (b // a) + (c // a) + (b % a > 0) + (c % a > 0)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef calc_vans(A, B, C):\n    return int(math.ceil((B + C) / A))",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef vans_needed(A, B, C):\n  return (B//A + C//A + 1) if B % A > 0 or C % A > 0 else (B//A + C//A)",
          "\nAnswer = (B/A) + (C/A)"
        ],
        [
          "\n\ndef vans_needed(A, B, C): \n  return math.ceil((B+C)/A)",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef field_trip_vans(a, b, c):\n\t# Divide total number of people by capacity of van \n\tvans = (b + c) // a \n \n\t# Check if extra van is needed (remainder is not 0)\n\tif (b + c) % a != 0:\n\t\tvans += 1 \n \n\treturn vans\n \n# Ex. A = 10, B =",
          "\n\nAnswer = (B + C)\u00f7A"
        ],
        [
          "\n\ndef num_vans(A, B, C):\n  return (B // A + C // A + (B % A + C % A) // A + ((B % A + C % A) % A > 0))",
          "\n\nAnswer = (B + C) / A"
        ],
        [
          " \n\ndef number_of_vans(A, B, C):\n    vans_needed = (B + C) / A\n    return vans_needed",
          "\nAnswer = (B + C) / A"
        ],
        [
          "\n\ndef calculateNumVans(A, B, C):\n  return math.ceil((B + C) / A)",
          "\nAnswer = (B+C)/A"
        ],
        [
          "\n\ndef zoo_trip(people, students, adults):\n    vans = (students + adults) // people\n    if (students + adults) % people > 0:\n        vans += 1\n    return vans",
          "\n\nAnswer = (B + C) / A"
        ]
      ]
    },
    "source": {
      "question": " Debby's class is going on a field trip to the zoo. If each van can hold 9 people and there are 40 students and 14 adults going, how many vans will they need? ",
      "final_answer": 6.0,
      "index": 397
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 44,
      "duration": 38.65943193435669,
      "templates": [
        "For Halloween Emily received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a Python function that returns the answer.",
        "For Halloween Emily received A pieces of candy from neighbors and B pieces from her older sister. If she only ate C pieces a day, how long would the candy last her?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef calculateCandy(A, B, C):\n    return (A + B) // C\n\nprint(calculateCandy(15, 5, 2)) # Should return 10",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long(A, B, C):\n  return (A + B) / C\n\nprint(how_long(3, 5, 2))  # Answer: 4 days",
          "\nAnswer = (A + B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef days_of_candy(a, b, c):\n  total_pieces = a + b\n  days = total_pieces / c\n  return days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef calc_halloween_candy(A, B, C):\n    total = A + B\n    days = total / C\n    return days",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyCalculator(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_lasts(a, b, c):\n  return (a+b)/c\n\nprint(candy_lasts(A,B,C))",
          "\n\nAnswer = ((A + B) / C) days"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n   return (A + B) // C",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef candy_longevity(a,b,c):\n  total_candy = a + b\n  days_candy_lasts = total_candy // c\n  return days_candy_lasts\n  \ncandy_longevity(A,B,C)",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef days_of_candy(A,B,C):\n  total_candy = A + B\n  return total_candy // C\n\nprint(days_of_candy(10,5,2))\n# Output: 7 days",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyDuration(a, b, c):\n  return (a + b)//c\n\nprint(candyDuration(5, 10, 2))\n\nThis will return 8 as the answer, meaning the candy will last Emily 8 days.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(a, b, c):\n  return ((a + b) // c) + (((a + b) % c) > 0)\n\nprint(candy_calc(A, B, C))",
          "\n\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef halloween_candy(A, B, C):\n  total_days = (A + B) / C\n  return total_days",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_last(a,b,c):\n  return (a+b)/c\n\nprint(candy_last(3,5,2))\n# Output: 4.0",
          "\nAnswer = A + B / C"
        ],
        [
          "\n\ndef candy_lasting_time(A, B, C):\n  total_candy = A + B\n  days_lasting = total_candy/C\n  return days_lasting\n\nprint(candy_lasting_time(15, 10, 3)) # will return 7.5",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef halloween_candy(A, B, C):\n    return int((A + B) / C)",
          "\n\nAnswer = (A+B) \u00f7 C"
        ],
        [
          "\n\ndef candy_duration(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef HalloweenCandy(A, B, C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_lasts(A, B, C):\n    total_pieces = A + B\n    days = total_pieces / C\n    return days",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef how_long(a, b, c): \n  total_pieces = a + b \n  days = int(total_pieces/c) \n  return days",
          "\nAnswer =  (A + B) / C"
        ],
        [
          "\n\ndef candy_time(A, B, C):\n  answer = ((A + B) // C)\n  return answer\n\nprint(candy_time(A, B, C))",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candyLast(A, B, C):\n  totalCandy = A + B\n  day = totalCandy / C\n  return day",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef candy_calc(A, B, C):\n\u00a0\u00a0\u00a0\u00a0return (A + B) // C\n",
          "\n\nAnswer = (A + B)/C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Emily received 5 pieces of candy from neighbors and 13 pieces from her older sister. If she only ate 9 pieces a day, how long would the candy last her? ",
      "final_answer": 2.0,
      "index": 398
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 36,
      "duration": 31.490643978118896,
      "templates": [
        "Frank made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a Python function that returns the answer.",
        "Frank made A dollars mowing lawns and B dollars weed eating. If he only spent C dollar a week, how long would the money last him?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef money_last(A, B, C):\n  return (A+B)/C",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef lawnMoneyDuration(A, B, C):\n    return (A + B) / C\n\n# calling the function\nprint(lawnMoneyDuration(2, 3, 1))\n# Output: 5",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(A, B, C):\n  return (A + B) / C\n\nprint(money_last(A, B, C))",
          "\nAnswer = (A + B)  / C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef money_lasts(A,B,C):\n    mowing_time = A // C\n    weed_time = B // C\n    return max(mowing_time, weed_time)\n\nprint(money_lasts(40, 20, 5))    # returns 8",
          "\nAnswer = (A+B)/C"
        ],
        [
          "\n\ndef money_lasts(A,B,C): \n  return (A + B) // C",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef money_run_out (A, B, C):\n    total_money = A + B\n    weeks = total_money/C\n    return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef income_length(A, B, C):\n  total_income = A + B\n  return round(total_income / C, 0)",
          "\n\nAnswer = (A + B - C) / C"
        ],
        [
          "\n\ndef getTotalWeeks(A,B,C):\n  total = A + B\n  weeks = total/C\n  return weeks\n\nanswer = getTotalWeeks(A,B,C)",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef weeks_money_will_last(A, B, C): \n    money_made = A + B \n    weeks_payed_for = money_made / C \n    return weeks_payed_for \n\nprint(weeks_money_will_last(25, 10, 5))\n\n# This will return 8 weeks.",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(A,B,C):\n    total_money = A + B\n    return total_money / C\n\nprint(\"The money will last for \" + str(money_last(A,B,C)) + \" weeks.\")",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef money_calc(A, B, C):\n    total_dollars = A + B\n    weeks = total_dollars / C\n    return weeks",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasted(A, B, C):\n  total_money = A + B\n  weeks = total_money / C\n  return weeks",
          "\nAnswer = (A + B)/C"
        ],
        [
          "\n\ndef money_last(A,B,C):\n  return (A + B) // C",
          "\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(A, B, C):\n    return (A+B)//C\n\n#returns the number of weeks the money will last",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_last(a, b, c):\n    return (a + b) / c  # Number of weeks the money would last him.",
          "\n\nAnswer = (A+B) / C"
        ],
        [
          "\n\ndef money_lasted_weeks(A, B, C):\n    total = A+B\n    return total/C",
          "\nAnswer = (A + B) / C"
        ],
        [
          " \n\ndef money_lasted(a, b, c):\n  return (a + b) // c\n  \nprint(money_lasted(10, 4, 2))\n# 6 weeks",
          "\n\nAnswer = (A + B) / C"
        ],
        [
          "\n\ndef money_lasts(A, B, C):\n  return (A + B) // C",
          "\nAnswer = ((A+B)-C) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " Frank made 5 dollars mowing lawns and 58 dollars weed eating. If he only spent 7 dollar a week, how long would the money last him? ",
      "final_answer": 9.0,
      "index": 399
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 40,
      "duration": 33.680893898010254,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef calc(A, B, C):\n  return (A - B) * C\n\nprint(calc(A, B, C))",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef installWindows(B, C):\n  return (A - B) * C\n  \ninstallWindows(B, C)",
          "\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef installation_time(total_windows, existing_windows, install_time):\n  return (total_windows - existing_windows) * install_time\n\n# Usage \ninstallation_time(20, 10, 1.5) # => 15.0",
          "\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n  remaining_windows = A - B\n  total_time = remaining_windows * C\n  return total_time",
          "\n\nAnswer = (B * C) + ((A - B) * C) hours"
        ],
        [
          "\n\ndef installWindows(a, b, c):\n  return (a - b) * c\n\nAnswer = installWindows(A, B, C)",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef window_install_time(a, b, c):\n  total_time = (a-b)*c\n  return total_time",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(B,C):\n  rest_windows = A - B\n  time = rest_windows * C\n  return time",
          "\nAnswer = (B x C) hours"
        ],
        [
          "\n\ndef install_windows(A, B, C):\n  return (A - B) * C\n\nAnswer = install_windows(A, B, C)",
          "\nAnswer = (B + C) * A"
        ],
        [
          "\n\ndef installWindows(a, b, c):\n  return (a - b) * c\n\nprint(installWindows(A, B, C))",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          " \n\ndef windowTime(A, B, C):\n  return (A - B) * C\n\nprint(windowTime(10, 8, 2))  # 4",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef installTime(a, b, c):\n  return (a - b) * c\n  \nprint(installTime(20, 10, 2))\n# Output: 20",
          "\n\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef timeToInstallWindows(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef windows(A, B, C):  \n  return (A-B)*C\n  \nAnswer:\nwindows(A, B, C)= (A-B)*C",
          "\n\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef install_windows(B, C): \n    return (10 - B) * C\n\nprint(install_windows(B, C))",
          "\nAnswer = (B * C) + (A - B) * C"
        ],
        [
          "\n\ndef total_hours(A, B, C):\n  return (A-B)*C\n\nprint(total_hours(10, 2, 4))\n# Output: 24",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef installWindows(A, B, C):\n  return (A-B) * C\n\nprint(installWindows(20, 10, 4))\n# Output: 40",
          "\n\nAnswer = (A-B) * C hours"
        ],
        [
          "\n\ndef installWindows(installed, total, hours):\n  return (total - installed) * hours",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef installWindows(a, b, c):\n    return (a - b) * c \n\nprint(installWindows(50, 20, 4)) # Returns 240",
          "\nAnswer = B + (A - B) * C"
        ],
        [
          "\n\ndef WindowTime(A, B, C):\n    x = A-B\n    time = x * C\n    return time",
          "\nAnswer = (A - B) \u00d7 C hours"
        ],
        [
          "\n\ndef time_to_install_windows(a,b,c):\n  return (a-b)*c\n\ntime_to_install_windows(10, 4, 2) # Returns 8",
          "\n\nAnswer = (B - A) * C hours"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 14 windows. The builder had already installed 5 of them. If it takes 4 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 36.0,
      "index": 400
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.551466941833496,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef potato_cooking_time(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef time_to_cook(A, B, C):\n  return (A - B) * C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cookTime(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef timeToCook(A, B, C):\n  return (A - B) * C\n\nprint(timeToCook(A, B, C))",
          "\n\nAnswer = A * C - B * C"
        ],
        [
          "\n\ndef potato_cook_time(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A-B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef time_to_cook_potatoes(A, B, C):\n    total_cook_time = (A-B) * C\n    return total_cook_time",
          "\n\nAnswer = (A-B) * C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 16 potatoes. He has already cooked 7. If each potato takes 5 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 45.0,
      "index": 401
    }
  },
  {
    "result": 77.0,
    "meta": {
      "n_calls": 38,
      "duration": 30.92939066886902,
      "templates": [
        "Ned bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Ned still have?\nWrite a Python function that returns the answer.",
        "Ned bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Ned still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        77.0,
        77.0,
        77.0
      ],
      "completions": [
        [
          "\n\ndef chocolate_calc(A, B, C):\n  return (A * C) - B\n\nanswer = chocolate_calc(A, B, C)",
          "\nAnswer = A * C - B"
        ],
        [
          " \n\ndef left_pieces(A, B, C): \n  return A * C - B",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candies_left(A, B, C): \n    return (A*C) - B \n\nanswer = candies_left(A, B, C)",
          " to find the answer to the problem.\n\nAnswer = A * C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef chocolate_pieces(A, B, C):\n  return (A - B) * C\n  \nAnswer = chocolate_pieces(A, B, C)",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef ned_chocolate(A,B,C):\n  return (A - B) * C\n\nprint(ned_chocolate(5,2,20))\n\nAnswer: 80",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_remaining(a,b,c):\n  return (a-b)*c\n  \nprint(candy_remaining(A,B,C))",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_left(A, B, C):\n  return (A - B) * C\n\nprint(pieces_left(3, 1, 10))\n\nanswer: 20",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n  return (A - B) * C\n\n# Example\ncandy_left(3, 1, 16)\n# 48",
          "\nAnswer = A \u00d7 C - B"
        ],
        [
          "\n\ndef pieces_of_candy(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A * C - B"
        ],
        [
          " \n\nA = Boxes \nB = Gave \nC = Pieces\n\ndef remaining_pieces(boxes, gave, pieces):\n  return (boxes * pieces) - gave",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return (A - B) * C\n\nprint(candy(10, 3, 5)) # returns 75",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_left(A, B, C):\n    return (A-B)*C \n\nanswer = pieces_left(A, B, C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef chocolate_pieces(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef ned_chocolate(A, B, C):\n  total_pieces = A*C\n  pieces_left = total_pieces - (B*C)\n  return pieces_left\n  \nprint(ned_chocolate(A, B, C))",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef amount_of_candy(A, B, C):\n    return (A - B) * C\n\nprint(amount_of_candy(10, 5, 12))\n# Prints 60",
          "\n\nAnswer = A * C - B"
        ],
        [
          " \n\ndef candy_pieces(A, B, C):\n  return A * C - B * C",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef box_candy(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_remaining(A, B, C):\n  return (A - B) * C\n\nprint(candy_remaining(10, 3, 20))\n# Returns 340",
          "\nAnswer = A*C - B"
        ]
      ]
    },
    "source": {
      "question": " Ned bought 14 boxes of chocolate candy and gave 7 to his little brother. If each box has 6 pieces inside it, how many pieces did Ned still have? ",
      "final_answer": 42.0,
      "index": 402
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 38.861084938049316,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef lives_total(A, B, C):\n    return (A - B) * C\n    \nprint(lives_total(4, 2, 3))\n# Output: 6",
          "\nAnswer = A x C lives"
        ],
        [
          "\n\ndef lives_total(a, b, c): \n  return (a-b)*c \n\nlives_total(A, B, C)",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C \n  \nprint(total_lives(5, 3, 2))\n# 10",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return A * C - B * C\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A-B)*C\n\nprint(total_lives(10, 2, 3))\n# Output: 24",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_remaining(A,B,C):\n    return (A - B) * C \n\ntotal_lives = lives_remaining(A,B,C)\nprint(total_lives)",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A - B) * C\n\nprint(lives_left(5, 2, 3))\n# Output: 15",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C): \n  total_lives = (A - B) * C\n  return total_lives\n\nprint(lives_total(10, 2, 3)) # Output: 24",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A - B) * C\n\nprint(totalLives(7,3,4)) # Output: 16",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(a_players, b_players, c_lives):\n  return (a_players * c_lives) + (b_players * c_lives)",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef get_lives_total(A, B, C):\n  return A * C - B * C",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A - B) * C\n\nprint(lives_total(5, 2, 4))\n# Output: 12",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n  return (a-b)*c\n\nanswer = lives_total(A, B, C)",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n    return (A - B) * C\n\nprint(calculate_lives(A, B, C))",
          "\n\nAnswer = A x C"
        ],
        [
          " \n\ndef total_lives(A, B, C): \n    return (A - B) * C     # A - B represents the number of players left, and each of them have C lives",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef livesLeft(A, B, C):\n  return (A - B) * C\n\nprint(livesLeft(8, 2, 3)) #Answer: 18",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n  return a * b * c\n\nlives_total(A, B, C)",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n  return (A - B) * C\n\nprint(totalLives(5, 2, 3))\n\nThis returns 15.",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n  return (A * C) - (B * C)",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(a, b, c):\n  return a*c-b*c",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives():\n\tA = int(input(\"How many friends were playing? \"))\n\tB = int(input(\"How many players quit? \"))\n\tC = int(input(\"How many lives did each player have? \"))\n\ttotal_lives = (A - B) * C\n\treturn total_lives\n\nprint(lives())",
          "\n\nAnswer = A * C"
        ]
      ]
    },
    "source": {
      "question": " There were 11 friends playing a video game online when 5 players quit. If each player left had 5 lives, how many lives did they have total? ",
      "final_answer": 30.0,
      "index": 403
    }
  },
  {
    "result": 25.0,
    "meta": {
      "n_calls": 20,
      "duration": 17.62392807006836,
      "templates": [
        "Henry earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "Henry earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        25.0,
        25.0,
        25.0,
        25.0,
        25.0
      ],
      "completions": [
        [
          "\n\ndef earned_money(A, B, C):\n  return (B-C)*A\n\nprint(earned_money(10, 20, 4))\n\nThis will print out 160.",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef mowedLawns(A, B, C):\n  return (B - C) * A\n\nanswer = mowedLawns(A, B, C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef lawn_earnings(A, B, C):\n  return (B-C)*A",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef mowed_lawns(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_earned(A, B, C):\n  return (B - C) * A\n\nanswer = calculate_earned(A, B, C)",
          "\n\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef mowed_lawns(A, B, C):\n  return (A * (B - C))\n\nmowed_lawns(A, B, C)",
          "\n\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef mow_lawns(A,B,C):\n  return (B-C)*A\n\nmow_lawns(5,10,4) # returns 45",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef final_earnings(A, B, C):\n  return (B - C) * A\n\nfinal_earnings(A, B, C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef money_earned(a, b, c):\n  return (b - c) * a\n\nmoney_earned(A, B, C)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n    return (B - C) * A\n\nprint(money_earned(A, B, C))",
          "\n\nAnswer = (A x (B - C))"
        ]
      ]
    },
    "source": {
      "question": " Henry earned 5 dollars for each lawn he mowed. If he had 12 lawns to mow, but forgot to mow 7 of them, how much money did he actually earn? ",
      "final_answer": 25.0,
      "index": 404
    }
  },
  {
    "result": 18.0,
    "meta": {
      "n_calls": 46,
      "duration": 40.44655513763428,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        18.0
      ],
      "completions": [
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (A - B) * C\n  \nAnswer = calculatePoints(A, B, C)",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n  \ntotal_points(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef get_total_points(a,b,c):\n  return (a-b)*c\n\nprint(get_total_points(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n    return (A - B) * C\n\n#example\ntotal_points(10, 2, 5)\n\n# returns 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculateScore(a, b, c):\n  return (a - b) * c\n\nprint(calculateScore(a, b, c))",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef TeamScore(A, B, C):\n  return (A - B) * C\n  \nTeamScore(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef get_total_points(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A-B)*C\nprint(totalPoints(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef pointsScored(A,B,C):\n  return (A-B)*C\n\nprint(pointsScored(A,B,C))",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return (A-B)*C\n\nprint(totalScore(A, B, C))",
          "\nAnswer = A - B \u00d7 C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\nprint(points_scored(A, B, C))",
          "\n\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          "\n\ndef calculate_points(a, b, c):\n  return (a - b) * c\n\nprint(calculate_points(A, B, C))",
          "\n\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef totalPoints(A,B,C):\n    return (A-B)*C\n\nAnswer: totalPoints (A,B,C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B)*C\n  \ntotal_points(10, 2, 7) #returns 56",
          "\n\nAnswer = A * C - (A-B) * C"
        ],
        [
          "\n\ndef totalPoints(a, b, c):\n  return (a - b) * c\n\nprint(totalPoints(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\nprint(points_scored(A, B, C))",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef point_total(A, B, C):\n  return (A - B) * C\n\n#Example\npoint_total(10, 3, 10) #returns 70",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n\nprint(totalPoints(A, B, C))",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B)*C\n  \ntotal_points(10, 2, 5) \n# Returns 40",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef calc_points(A, B, C):\n  return (A-B)*C\n\nprint(calc_points(A, B, C))",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  totalPoints = (A - B) * C\n  return totalPoints\n\nprint(totalPoints(10, 3, 5))\n# Output: 35",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n  \ntotal_points(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef score_total(A, B, C):\n  return (A - B) * C\n  \nscore_total(6, 2, 10) # -> 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 5 members total, but during a game 2 members didn't show up. If each member that did show up scored 6 points, how many points were scored total? ",
      "final_answer": 18.0,
      "index": 405
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.704746961593628,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          " \n\ndef time_to_paint(A, B, C):\n  return (A-C) * B",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n    return (A - C) * B\n\nanswer = calculate_time(A, B, C)",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef timeToPaint(A, B, C):\n    return (A - C) * B \n\nprint(timeToPaint(5, 3, 2)) # 9 hours",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef paint_rooms(A, B, C):\n  return (A-C)*B",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_time(A, B, C):\n    return (A-C)*B",
          "\nAnswer = (A - C) * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef paint_rest(a,b,c):\n    return (a-c)*b\n\nprint(paint_rest(20,4,15))\n\nThis will print out 20 hours.",
          "\nAnswer = (A - C) * B"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 10 rooms in a building. Each room takes 8 hours to paint. If he already painted 8 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 16.0,
      "index": 406
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 22,
      "duration": 19.583274126052856,
      "templates": [
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a Python function that returns the answer.",
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0,
        12.0,
        12.0,
        12.0,
        12.0
      ],
      "completions": [
        [
          "\n\ndef calculate_points(A, B, C):\n  return (B - C) * A\n  \nAnswer:  (B - C) * A",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef earn_points(A, B, C):\n  return (B-C)*A\n  \n earn_points(2, 10, 8)\n#Output: 16",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return (B - C) * A\n\nprint(points_earned(5, 10, 2))\n# Output: 30",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_points(A, B, C):\n    return (B - C) * A\n\nprint(enemy_points(10, 50, 3))\n# 470",
          "\nAnswer = A * (B-C)"
        ],
        [
          "\n\ndef enemy_defeated_points(A, B, C):\n  return (B - C) * A\n\n#Example\nenemy_defeated_points(25, 10, 8)\n#Answer: 50",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef enemy_points(A, B, C):\n  return (B - C) * A\n\n# Example:\nprint(enemy_points(5, 10, 5))\n# output: 25",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef calc_points(A, B, C):\n  return (B-C)*A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef enemy_points(A, B, C): \n    return (B - C) * A\n\nprint(enemy_points(50, 10, 3))\n# Output: 350",
          "\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef pointsCalc(A, B, C):\n    return (B-C)*A\n\nprint(pointsCalc(20, 10, 2))\n# Output: 160",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef enemyPoints(A, B, C):\n  return (B - C) * A\n\nanswer = enemyPoints(A, B, C)\nprint(answer)",
          "\n\nAnswer = A x (B - C)"
        ]
      ]
    },
    "source": {
      "question": " In a video game, each enemy defeated gives you 3 points. If a level has 6 enemies total and you destroy all but 2 of them, how many points would you earn? ",
      "final_answer": 12.0,
      "index": 407
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 28,
      "duration": 20.983323335647583,
      "templates": [
        "Wendy earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a Python function that returns the answer.",
        "Wendy earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef pointsEarned(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef pointsEarned (A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef recycledPoints(A,B,C):\n  return A*(B-C)",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_points(a, b, c):\n  return a * (b - c)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n    return A * (B - C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef recyclePoints(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n    return A*(B-C)",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef PointsForRecyclingCans(A,B,C):\n   return A * (B-C)",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n    return (B - C) * A\n    \nanswer = calculatePoints(A, B, C)",
          " :\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef point_calculator(a, b, c):\n  return (b - c) * a\n\n# example:\npoints = point_calculator(5, 10, 3)\nprint(points)\n# Result: 25",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef recycling_points(bags, uncounted):\n    return bags * A - uncounted * A",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef pointsEarned(A,B,C):\n  return A*(B-C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " Wendy earned 5 points for each bag of cans she recycled. If she had 11 bags, but didn't recycle 2 of them, how many points would she have earned? ",
      "final_answer": 45.0,
      "index": 408
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 34.925464153289795,
      "templates": [
        "Each chocolate bar in a box cost $3. If a box had A bars total and Olivia sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $3. If a box had A bars total and Olivia sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_money(A, B):\n  return (A - B) * 3\n\ncalculate_money(A, B)",
          "\n\nAnswer = $3A - $3B"
        ],
        [
          " Assume A and B are integers.\n\ndef money_earned(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef chocoBar(A, B): \n  return (A - B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef make_money(A, B):\n    return (A - B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef totalMoney(A, B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef totalMoneyMade(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef profits(A, B):\n  return (A - B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef make_money(A, B): \n    return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef sale_of_chocolate_bars(A, B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef chocolateBox(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          " \n\ndef choco_profit(A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef calculate_sales (A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          " \n\ndef money_made(A, B):\n    return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  money = (A - B)*3\n  return money",
          "\n\nAnswer = (3 * (A-B))"
        ],
        [
          "\n\ndef chocolateMoney(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef calculateRevenue(A, B):\n    return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef Money_Made(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A-3B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 3",
          " \n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef goldbar_money (A, B):\n  return 3 * (A-B)",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef profit_calculator(A, B):\n    return (A-B)*3\nprofit_calculator(A, B)",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef oliviaMoney(A,B):\n  return (A-B)*3",
          "\n\nAnswer = $3A - $3B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef sellChocolate(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef getMoneyMade(A, B):\n  return (A - B) * 3\n  \ngetMoneyMade(A, B)",
          "\nAnswer = 3A - 3B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $3. If a box had 7 bars total and Olivia sold all but 4 bars, how much money would she have made? ",
      "final_answer": 9.0,
      "index": 409
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 26,
      "duration": 20.08651089668274,
      "templates": [
        "Kaleb bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Kaleb still have?\nWrite a Python function that returns the answer.",
        "Kaleb bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Kaleb still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        79.0,
        79.0,
        79.0
      ],
      "completions": [
        [
          "\n\ndef pieces_left(A, B, C):\n  return A*C - B\n\nprint(pieces_left(3, 15, 6)) # Answer: 39",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return A * C - B\n\n# example\n\nprint(candy_pieces(2, 3, 4))  # will output 8",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef remainingCandy(A, B, C):\n  return (A * C) - B",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return (A-B)*C\n\npieces = candy_pieces(5, 3, 4)\nprint(pieces)\n# Output: 8",
          "\nAnswer = (A-B)*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy_pieces(A,B,C):\n  return (A-B)*C\n\nprint(candy_pieces(5,2,25))\n\nOutput: 100",
          "\nAnswer = A*C - B"
        ],
        [
          " \n\ndef candy_remaining(A, B, C):\n return (A * C) - B",
          "\n\nAnswer = A \u00d7 C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return (A * C) - B\n  \nprint(candy_pieces(A, B, C))",
          "\nAnswer = AC - B"
        ],
        [
          "\n\ndef candyCalc (A, B, C):\n  return (A * C) - B\n\nAnswer = candyCalc(A, B, C)",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef pieces_left(A, B, C):\n  return (A - B)*C\n\nprint(pieces_left(5, 2, 10))\n# Output: 30",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef kaleb_candy(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef chocolate_pieces(A, B, C):\n  return A*C - B*C",
          "\nA x C - B \nAnswer = A x C - B"
        ],
        [
          "\n\ndef chocolate_pieces(A,B,C):\n  return (A - B) * C",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef kaleb(A, B, C):\n  return (A-B)*C\n\nanswer = kaleb(4,2,6)\nprint(answer)\n\nPrints:\n12",
          "\nAnswer = A*C - B"
        ]
      ]
    },
    "source": {
      "question": " Kaleb bought 14 boxes of chocolate candy and gave 5 to his little brother. If each box has 6 pieces inside it, how many pieces did Kaleb still have? ",
      "final_answer": 54.0,
      "index": 410
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 35.57602119445801,
      "templates": [
        "At a restaurant each adult meal costs $3 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $3 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef cost (a, b):\n  return a * 3\n\nprint (cost(a,b))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef group_meal(a, b):\n  return a * 3\n\nprint(group_meal(a, b))",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef meal_cost(a,b):\n  return a*3\n\nprint(meal_cost(a,b))",
          "\n\nAnswer = 3A"
        ],
        [
          " \n\ndef restaurant_bill(adults, kids):\n  return adults * 3\n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 3A"
        ],
        [
          " \n\ndef meal_cost(A,B):\n  return A*3\n\nprint(meal_cost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef restaurant_cost(adults, kids):\n  return adults * 3\n  \nrestaurant_cost(A, B)",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef restaurantCost(A, B):\n  return A * 3\n\nprint(restaurantCost(A, B))",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef mealcosts(A, B):\n    return A * 3\n\nprint(mealcosts(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef meals_cost(A, B):\n  cost = A*3\n  return cost\n\nprint(meals_cost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A*3\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 3A"
        ],
        [
          " \n\ndef restaurant_bill(adults, kids):\n  cost = adults * 3 \n  return cost \n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef restaurant(A, B):\n  return A*3\n\nprint(restaurant(A, B))",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A*3\n\nprint (restaurant_cost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef total_cost(a, b):\n  return 3*a\n  \nprint(total_cost(a, b))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef mealCost(A, B): \n  return A * 3\n\nprint(mealCost(A, B))",
          "\nAnswer = 3 x A"
        ],
        [
          "\n\ndef getMealCost(A, B): \n  return A * 3 \n  \nprint(getMealCost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef total_cost(A, B): \n  return A * 3 \n\nprint(total_cost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return 3 * A\n\nmeal_cost(A, B)",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef meal_cost_calculator(A, B):\n  cost = A * 3\n \n  return cost\n\ntotal_cost = meal_cost_calculator(A, B)\nprint(\"The total cost for the group to eat is $\" + str(total_cost) + \".\")",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef group_meal(A, B):\n  return 3 * A\n  \nprint(group_meal(A, B))",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 3\n  \nprint(meal_cost(A, B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef cost_of_meal (A,B):\n  return A*3\n \ncost_of_meal(A,B)",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 3\n\nprint(meal_cost(A,B))",
          "\nAnswer = 3A"
        ],
        [
          "\n\ndef cost_of_meal(adults, children):\n  total_cost = adults * 3\n  return total_cost\n\nprint(cost_of_meal(A, B))",
          "\n\nAnswer = 3A"
        ],
        [
          "\n\ndef cost(A, B):\n  total = A * 3\n  return total\n\nprint(cost(A, B))",
          "\nAnswer = 3A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $3 and kids eat free. If a group of 12 people came in and 7 were kids, how much would it cost for the group to eat? ",
      "final_answer": 15.0,
      "index": 411
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 37.19117712974548,
      "templates": [
        "Jerry had A action figures, but needed B total for a complete collection. If each one costs $8, how much money would he need to finish his collection?\nWrite a Python function that returns the answer.",
        "Jerry had A action figures, but needed B total for a complete collection. If each one costs $8, how much money would he need to finish his collection?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef collection_cost(a, b):\n  return (b - a) * 8 \n\ncollection_cost(A, B)",
          "\nAnswer = $8B"
        ],
        [
          "\n\ndef complete_collection(A, B): \n  return (B - A) * 8",
          "\nAnswer = $8B"
        ],
        [
          "\n\ndef total_cost(A, B):\n    return (B - A) * 8\n\ntotal_cost(A, B)",
          "\nAnswer = 8B"
        ],
        [
          "\n\ndef finish_collection(A, B):\n  return (B - A) * 8\n  \nfinish_collection(A, B)",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef total_cost(action_figures, total_needed):\n  return action_figures * 8 * total_needed\n\nanswer = total_cost(A, B)",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef totalCost(A, B):\n  return (B - A) * 8\n\nprint(totalCost(A, B))",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef complete_collection(action_figures, total):\n  return 8 * (total - action_figures)\n\ncomplete_collection(A, B)",
          "\nAnswer = $8B"
        ],
        [
          "\n\ndef total_cost(A, B):\n  return (B - A) * 8\n\nprint(total_cost(A, B))",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef completeCollection(A, B):\n  return (B - A) * 8\n\nAnswer = completeCollection(A, B)",
          "\nAnswer = $8B"
        ],
        [
          "\n\ndef complete_collection(num_needed):\n  return num_needed * 8\n\nprint(complete_collection(B))",
          "\nAnswer = $8B"
        ],
        [
          "\n\ndef calc_cost(A, B):\n  return (B-A)*8\n\nprint(calc_cost(A, B))",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef total_cost(total_figures):\n    return 8 * total_figures\n\n# For example, if Jerry needed 10 total figures:\n\nprint(total_cost(10)) # prints 80",
          "\nAnswer = 8B"
        ],
        [
          "\n\ndef complete_collection(A, B): \n  return (B - A)*8",
          "\n\nAnswer = ($8 x B)"
        ],
        [
          "\n\ndef collection_cost(A, B):\n  return (B - A) * 8 \n\nprint(collection_cost(A, B))",
          "\n\nAnswer = $(8B - 8A)"
        ],
        [
          "\n\ndef total_need(A, B):\n  return (B - A) * 8\n\ntotal_need(A, B)",
          "\n\nAnswer = 8B"
        ],
        [
          "\n\ndef JerrysCollection(A,B):\n  return (B-A)*8",
          "\nAnswer = 8B"
        ],
        [
          "\n\ndef completeCollection(A, B):\n  return (B - A) * 8\n\ncompleteCollection(A, B)",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef collection_cost(A,B):\n  return (B-A)*8\n\nprint(collection_cost(A,B))",
          "\nAnswer = ($8 x B)"
        ],
        [
          "\n\ndef collection_cost(A, B):\n  return (B-A)*8 \nprint(collection_cost(A, B))",
          "\n\nAnswer = $8B"
        ],
        [
          "\n\ndef complete_collection(action_figures, total_needed):\n  return action_figures * 8 + (total_needed - action_figures) * 8",
          "\nAnswer = 8B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B-A)*8",
          "\nAnswer = ($8) x (B)"
        ],
        [
          "\n\ndef total_cost(A, B):\n  return (B - A) * 8\ntotal_cost(A, B)",
          "\nAnswer = 8 \u00d7 B"
        ],
        [
          "\n\ndef collection_cost(a, b):\n  cost = (b-a)*8\n  return cost\n\ncollection_cost(A, B)",
          "\nAnswer = (B - A) x 8"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 8\n\nprint(complete_collection(A, B))",
          "\n\nAnswer = $64"
        ],
        [
          "\n\ndef completeCollection(A, B):\n  return (B - A) * 8\n\ncompleteCollection(A, B)",
          "\n\nAnswer = $8 \u00d7 B"
        ]
      ]
    },
    "source": {
      "question": " Jerry had 7 action figures, but needed 16 total for a complete collection. If each one costs $8, how much money would he need to finish his collection? ",
      "final_answer": 72.0,
      "index": 412
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 26,
      "duration": 21.700916051864624,
      "templates": [
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a Python function that returns the answer.",
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef get_points(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef get_points(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A*(B - C)"
        ],
        [
          "\n\ndef Points(A, B, C):\n  return (B - C) * A\n\nPoints(A, B, C)",
          "\nAnswer = (A*(B-C))"
        ],
        [
          "\n\ndef pointsEarned(A, B, C):\n    return (B-C) * A\n\nprint(pointsEarned(20, 10, 3))  # 140",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_points(A, B, C):\n  return (B - C)*A",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  numPoints = (B - C) * A\n  return numPoints",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef pointsEarned(a, b, c):\n  return (b - c) * a\n  \n#call the function\npointsEarned(5, 10, 3)\n#Output: 25",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calc_points(a, b, c):\n  return (b - c) * a\n\nprint(calc_points(5, 10, 3))\n# answer: 25 points",
          "\n\nAnswer = A*(B - C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (B-C) * A\n\nanswer = calculatePoints(A, B, C)",
          " \nAnswer = (A x (B - C))"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\n\ndef enemy_points(A, B, C):\n  points_earned = (B - C) * A\n  return points_earned\n\nprint(enemy_points(10, 20, 5))  # returns 150",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef enemy_points(a, b, c):\n    return (a * (b - c))\n\n# Test function\nenemy_points(5, 10, 3)\n# Output: 25",
          "\n\nAnswer = (A * (B - C))"
        ],
        [
          "\n\ndef pointsEarned(A, B, C):\n  return (B-C) * A\n\n# To call the function\npointsEarned(A, B, C)",
          "\n\nAnswer = A x (B - C)"
        ]
      ]
    },
    "source": {
      "question": " In a video game, each enemy defeated gives you 9 points. If a level has 11 enemies total and you destroy all but 3 of them, how many points would you earn? ",
      "final_answer": 72.0,
      "index": 413
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 39.40579700469971,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef totalLives(A, B, C):\n    total = A * C - B * C \n    return total",
          "\nAnswer = (A x C) - B"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return A*C - B*C\n\nprint(lives_total(A, B, C))",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives(A,B,C): \n  return (A - B)*C \n\nprint(totalLives(5,3,2))\n\n# 10",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n  \nprint(total_lives(8, 3, 5)) # Output: 25",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A-B)*C\n\nlives_total(5,2,3)\n# Output: 15",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef remaining_lives(A, B, C):\n  return (A-B)*C",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef video_game(A, B, C):\n    return A*C - B*C\n\n# example\nprint(video_game(5, 3, 3)) \n# Output: 12",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A - B)*C\n\nprint(totalLives(4, 2, 3))\n\nOutput:\n12",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n  return A * C - B * C",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C - B*C\n\ntotal_lives(A, B, C)",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\n# example \nprint(total_lives(5, 2, 3)) # prints 15",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n  return (A - B)*C\n\ncalculate_lives(5, 2, 3)\n# Answer: \n15",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n  \nprint(total_lives(10, 3, 5))\n# Output: 35",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_total(A,B,C):\n  return (A - B) * C\n\nlives_total(5,3,2) # returns 8",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * B * C",
          "\nAnswer = A x C  lives"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A - B) * C\n\nlives_total(4, 2, 5) #returns 20",
          "\nAnswer = A * C"
        ],
        [
          " \n\ndef num_lives(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A*C - B*C\n\nprint(total_lives(5, 2, 3))\n# Output: 15",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * B * C",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * C - B * C",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef totalLives(a, b, c):\n    return (a - b) * c\n\nprint(totalLives(10, 5, 3))  # Answer: 30",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C - B * C\n\nprint(total_lives(A, B, C))",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n  return (a - b) * c\n\nprint(lives_total(A, B, C))",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C-B*C\n\nprint(totalLives(A, B, C))",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\nprint(total_lives(4, 2, 3)) # Prints 12",
          "\n\nAnswer = A * C"
        ]
      ]
    },
    "source": {
      "question": " There were 16 friends playing a video game online when 7 players quit. If each player left had 8 lives, how many lives did they have total? ",
      "final_answer": 72.0,
      "index": 414
    }
  },
  {
    "result": 20.0,
    "meta": {
      "n_calls": 36,
      "duration": 33.203492164611816,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        20.0
      ],
      "completions": [
        [
          "\n\ndef installation_time(A, B, C):\n    return (A - B) * C\n\nprint(installation_time(100, 50, 2)) # 100",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef time_for_windows(windows_installed, windows_needed, hours_per_window):\n    num_of_windows_needed = windows_needed - windows_installed\n    time_in_hours = num_of_windows_needed * hours_per_window\n    return time_in_hours\n\nanswer = time_for_windows(B, A, C)",
          "\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef calculate_window_hours(b, c):\n  return (12 - b) * c\n\nwindow_hours = calculate_window_hours(B, C)\nprint(\"It will take\", window_hours, \"hours to install the rest of the windows.\")",
          "\n\nAnswer = (A-B) \u00d7 C hours"
        ],
        [
          "\n\ndef totalWindowTime(numOfWindowsA, numOfWindowsB, timePerWindow):\n  return (numOfWindowsA - numOfWindowsB) * timePerWindow\n\nprint(totalWindowTime(20, 10, 2))",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef install_windows(installed, needed, time):\n  return (needed - installed) * time\n\nprint(install_windows(B, A, C))",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\ndef installWindows(a,b,c):\n  return (a-b)*c \nprint(installWindows(A,B,C))",
          "\nAnswer = (A - B)*C hours"
        ],
        [
          "\n\ndef total_window_installation_time(num_windows_installed, num_windows_needed, time_per_window):\n  return (num_windows_needed - num_windows_installed) * time_per_window\n\nprint(total_window_installation_time(B, A, C))",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef window_installation_time(a, b, c):\n  return (a - b) * c\n\n#Answer\nAnswer = window_installation_time(A, B, C)",
          "\n\nAnswer = (A-B)*C Hours"
        ],
        [
          "\n\ndef window_installation(windows_installed, windows_to_install, hours_per_window): \n  total_hours = (windows_to_install - windows_installed) * hours_per_window\n  return total_hours",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_for_windows(a,b,c):\n  return (a-b)*c\n\nprint(time_for_windows(10,5,2))  # Output: 10",
          "\nAnswer = (A - B) * C Hours"
        ],
        [
          "\n\ndef calculate_time(windows, installed, time):\n  return float(windows - installed) * time\n\n#Example\ntime = calculate_time(40, 20, 3) \n#Returns 60, because it will take 60 hours to install all the windows",
          "\nAnswer = (B - A)*C hours"
        ],
        [
          "\n\ndef installWindows(B, C):\n  return (B + 1) * C\n\nprint(installWindows(B, C))",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef installationTime(A, B, C):\n  return (A-B)*C\n\nprint(installationTime(50, 10, 2))  # 80",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef timeToInstallWindows(a, b, c):\n  return (a - b) * c\n\nprint(timeToInstallWindows(10, 5, 2))\n# Output: 10 hours",
          "\n\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef installWindows(A,B,C):\n  return (A-B)*C\n\nprint(installWindows(20, 10, 2)) // Output: 20",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef window_time(a, b, c):\n  return (a-b)*c\n\nprint(window_time(10, 5, 3))\n# Output: 15",
          "\nAnswer = (A-B)C"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 10 windows. The builder had already installed 6 of them. If it takes 5 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 20.0,
      "index": 415
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 14,
      "duration": 10.287760972976685,
      "templates": [
        "Adam earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "Adam earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef calculateEarnings(A, B, C):\n  return A*(B-C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef money_earned(A,B,C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef mow_lawns(A, B, C):\n  return (B - C) * A\n\n#Example\n\nmow_lawns(5, 10, 2)\n#returns 40",
          "\nAnswer = A*(B - C)"
        ],
        [
          "\n\ndef total_earnings(A, B, C):\n    return A * (B - C)",
          "\n\nAnswer = A * (B-C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef moneyEarned(A,B,C):\n  return A * (B-C)",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef mowLawns(A, B, C):\n  return A * (B-C)",
          "\nAnswer = A(B-C)"
        ]
      ]
    },
    "source": {
      "question": " Adam earned 9 dollars for each lawn he mowed. If he had 12 lawns to mow, but forgot to mow 8 of them, how much money did he actually earn? ",
      "final_answer": 36.0,
      "index": 416
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 44.20978093147278,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\nprint(points_scored(A, B, C))",
          "\nAnswer = A x C - (A-B) x C"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n    return (A - B) * C\n    \ntotalScore(A, B, C)",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return (A - B) * C\n  \nprint(totalScore(A, B, C))",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculateScore(A, B, C):\n  total = (A - B) * C\n  return total",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculate_points(a, b, c):\n  return (a - b) * c\n\n# Example result\nprint(calculate_points(7, 5, 10)) # Output: 20",
          "\nAnswer =  A x C - (A - B) x C"
        ],
        [
          " \n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n  \ntotalPoints(A, B, C)",
          "\n\nAnswer = A * C - (A-B) * C"
        ],
        [
          "\n\ndef score_points(A, B, C):\n  return (A - B) * C\n  \nscore_points(A, B, C)",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef calculate_total_points(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n    return (A-B)*C\n\nprint(points_scored(5,2,10)) # Output: 30",
          "\nAnswer = A x C - (B x C)"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n \nAnswer -> totalPoints(A, B, C)",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef pointsScored(A, B, C):\n  return (A - B) * C\n\n#Example\n\npointsScored(10, 5, 3) \n\n# Output\n45",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A-B)*C\n\nprint(points_scored(5, 2, 10))\n# prints 30",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef pointTotal(A, B, C):\n  return (A - B) * C\n  \npointTotal(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n  return (A - B) * C\n\nprint(calculate_points(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef TriviaPoints(A, B, C): \n  return (A - B) * C\n\nanswer = TriviaPoints(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculatePoints(totalMembers, membersShowedUp, pointsScored):\n    return (totalMembers - membersShowedUp) * pointsScored",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n\ntotalPoints(10, 2, 5) = 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculate_total_points(A,B,C):\n  return (A-B)*C\n\nprint(calculate_total_points(10,2,3)) # Output: 24",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef scoreTotal(A, B, C):\n  return (A - B) * C     # subtract the number of members who didn't show up from the total number of members, then multiply by the number of points each member scored.",
          "\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n    return (A-B)*C\n  \ntotalPoints(A,B,C)",
          "\nAnswer = A*C -(A-B)*C"
        ],
        [
          "\n\ndef calc_points(A, B, C):\n  return (A - B) * C\n\n# Example\ncalc_points(5, 2, 10) # returns 30",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculateTotalPoints(a, b, c):\n  return (a - b) * c\n\nprint(calculateTotalPoints(a, b, c))",
          "\n\nAnswer = A * C - B * C"
        ],
        [
          "\n\ndef total_score(a, b, c):\n  return (a-b)*c\n\ntotal_score(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A-B)*C\n\nprint(total_score(10, 2, 5)) # Output: 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 12 members total, but during a game 4 members didn't show up. If each member that did show up scored 8 points, how many points were scored total? ",
      "final_answer": 64.0,
      "index": 417
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 48,
      "duration": 38.1618549823761,
      "templates": [
        "Mike had A video games but B of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn?\nWrite a Python function that returns the answer.",
        "Mike had A video games but B of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0
      ],
      "completions": [
        [
          "\n\ndef sell_games(A, B):\n  return (A - B) * 7\n\nprint(sell_games(A, B))",
          "\nAnswer = 7 * A - 7 * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_earnings(working_games):\n  return working_games * 7\n\nprint(calculate_earnings(A-B))",
          "\n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef money_earned(games):\n  return games * 7\n\nprofit = money_earned(A-B)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef calculate_earnings(working_games):\n  return round(working_games * 7)\n  \nprint(calculate_earnings(A - B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef sell_video_games(working_games):\n    return working_games * 7\n\nprint(sell_video_games(A-B))",
          "\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef sell_games(games_working):\n  return games_working * 7",
          "\n\nAnswer = 7xA-7xB"
        ],
        [
          "\n\ndef sell_games(A, B):\n    return (A-B) * 7\n\nsell_games(A, B)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef money_earned(A, B):\n  return (A-B) * 7\n\nmoney_earned(A, B)",
          "\n\nAnswer = $7xA-B"
        ],
        [
          "\n\ndef money_earned(video_games):\n  working_games = video_games - (video_games/2)\n  total = working_games * 7\n  return total\n\nprint(money_earned(A))",
          "\nAnswer = 7 \u00d7 A"
        ],
        [
          "\n\ndef sell_video_games(A, B):\n    return (A - B)*7\n\n# example\nsell_video_games(10, 4)\n# returns 42",
          " \n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef sale_value(num_working):\n  return num_working * 7\n\nprint(sale_value(A-B))",
          "\n\nAnswer = 7 * (A - B)"
        ],
        [
          "\n\ndef calculate_earnings(working_games):\n  earnings = working_games * 7\n  return earnings\n\nprint(calculate_earnings(A - B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef games_revenue(A, B):\n    working_games = A - B\n    revenue = working_games * 7\n    return revenue",
          "\nAnswer = 7 \u00d7 A - 7 \u00d7 B"
        ],
        [
          "\n\ndef earn_money(num_working_games):\n  return num_working_games * 7",
          "\n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef sell_games(a,b):\n  return (a-b)*7\n\nprint(sell_games(a,b))",
          "\n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef get_money_earned(A, B):\n  money = (A - B) * 7\n  return money",
          "\n\nAnswer = 7 \u00d7 A - 7 \u00d7 B"
        ],
        [
          "\n\ndef sell_working_games(A, B):\n  working_games = A - B\n  total_earn = working_games * 7\n  return total_earn\n\nprint(sell_working_games(A, B))",
          "\nAnswer = 7xA - 7xB"
        ],
        [
          "\n\ndef sale(A, B):\n  return (A - B) * 7\n\nanswer = sale(A, B)\nprint(answer)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          " \n\ndef sell_games(a,b):\n  return (a-b) * 7\n\nsell_games(A, B)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef sellingGames(A, B):\n    return (A - B) * 7\n\nsellingGames(A, B)",
          "\n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef moneyEarned(workingGames):\n  return workingGames * 7\n\nprint(moneyEarned(A-B))",
          "\n\nAnswer = (7 x A) - (7 x B)"
        ],
        [
          "\n\ndef calculate_earnings(num_working_games):\n  return num_working_games * 7",
          "\n\nAnswer = 7 x A"
        ],
        [
          "\n\ndef calculateMoneyEarned(a, b):\n    return (a - b) * 7\n\n# Call the function\ncalculateMoneyEarned(A, B)",
          "\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef get_earnings(A, B):\n    return (A - B) * 7\n\nearnings = get_earnings(A, B)\nprint(earnings)",
          "\nAnswer = 7(A - B)"
        ]
      ]
    },
    "source": {
      "question": " Mike had 16 video games but 8 of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn? ",
      "final_answer": 56.0,
      "index": 418
    }
  },
  {
    "result": 49.0,
    "meta": {
      "n_calls": 14,
      "duration": 9.899826765060425,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        49.0,
        49.0,
        49.0,
        49.0,
        49.0
      ],
      "completions": [
        [
          " \n\ndef paint_time(A, B, C):\n    return (A-C)*B",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef roomPainting(A, B, C):\n  return (A - C) * B\n  \nExample: \nroomPainting(5, 2, 3)\n\nAnswer: 4 hours",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef remaining_time(A, B, C):\n  return (A - C) * B",
          "\nAnswer = (A - C)*B"
        ],
        [
          "\n\ndef paint_time(A, B, C):\n  return (A - C) * B",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_room(A, B, C):\n    return (A-C)*B",
          "\nAnswer = (A - C) * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_time_left(A, B, C): \n    remaining_rooms = A - C\n    remaining_time = remaining_rooms * B\n    return remaining_time",
          "\n\nAnswer = (A-C) * B"
        ],
        [
          "\n\ndef time_to_paint(A, B, C):\n  return (A-C)*B",
          "\n\nAnswer = (A - C) * B hours"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 12 rooms in a building. Each room takes 7 hours to paint. If he already painted 5 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 49.0,
      "index": 419
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 43.42692184448242,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B)*C\n\nlives = total_lives(5, 2, 3)\nprint(lives)\n#Output: 15",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n  return a*b*c\n\nprint(lives_total(A, B, C))",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A-B)*C\n\nresult = totalLives(6, 3, 2)\nprint(result)\n# Prints 12",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(A, B, C): \n  return (A - B) * C\n  \nprint(lives_left(5, 3, 4)) \n# Output: 8",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A-B)*C\n  \nresult = total_lives(3, 2, 5)\nprint(result)\n\n# Output: 15",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n   return (A - B) * C \n\ntotal = totalLives(20, 5, 3) \nprint(\"Total Lives:\", total)",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef numberOfLives(A, B, C): \n  return (A-B)*C\n\nprint(numberOfLives(10, 3, 2))  # 20",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\nprint(total_lives(8, 3, 3))\n# Output: 15",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_remaining(A, B, C): \n   return (A - B) * C \n\nprint(lives_remaining(A, B, C))",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n  \n# Example\ntotal_lives(10, 3, 5)  # Returns 40",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\ntotal = total_lives(A, B, C)\nprint(total)",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return A * B * C",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * B * C",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef computeLives(A, B, C):\n  return A * C - B * C",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A * C - B * C\n\nprint(totalLives(A, B, C))",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef livesTotal(a, b, c):\n  return (a-b)*c\n\nlivesTotal(4,2,3)\nAnswer: 12",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef online_game(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return A*C-B*C",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return a*c - b*c\n\nprint(total_lives(A, B, C))",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A*C - B*C\n\ntotal_lives(5, 2, 3)\n# Returns 21",
          " \nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(a,b,c):\n  return (a*c)-b*c",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef num_lives_left(A, B, C):\n    return A*C - B*C",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef Lives_Left(A, B, C): \n  return (A-B)*C\n  \nanswer = Lives_Left(A, B, C)",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A - B) * C\n  \nlives_left(5, 2, 3) # Returns 9",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n    \n    return a*b*c\n    \nprint(total_lives(A, B, C))",
          "\n\nAnswer = A*C"
        ]
      ]
    },
    "source": {
      "question": " There were 8 friends playing a video game online when 5 players quit. If each player left had 5 lives, how many lives did they have total? ",
      "final_answer": 15.0,
      "index": 420
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 47.031237840652466,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef total_points(A, B, C):\n    return (A - B) * C\n\nprint(total_points(10, 3, 6))   # Returns 42",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored_total(A,B,C):\n  total_points = (A - B) * C\n  return total_points\n\ntest1 = points_scored_total(6,2,3)\n# 18 points scored",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef scored_points(A, B, C):\n  return (A - B) * C\n\nprint(scored_points(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A-B) * C\n\nprint(total_score(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored_total(A, B, C):\n  return (A - B) * C\n\nprint(points_scored_total(10, 2, 5))\n# Output: 40",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A-B)*C\n\n# Example\ntotal_score(6, 2, 10)\n# Output: 40",
          "\n\nAnswer = A x C - (A - B) x C"
        ],
        [
          "\n\ndef total_points_scored(A, B, C):\n  return (A - B) * C\n  \nprint(total_points_scored(7, 3, 10))\n# Output: 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculate_score(a,b,c):\n  return (a-b)*c\n  \nscore_total = calculate_score(a,b,c)",
          "\n\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C \n\ntotalPoints(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef score_total(A, B, C):\n  return (A-B)*C\n\nprint(score_total(A, B, C))",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculatePoints(a, b, c):\n  return (a - b) * c\n\nprint(calculatePoints(10, 2, 5))\n\nThis should return 40.",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return (A - B) * C\n\nprint(totalScore(A, B, C))",
          "\nAnswer = A*C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B)*C\n\nprint(points_scored(9, 2, 5))\n# Output: 35",
          "\n\nAnswer = AC"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B) * C\n\nprint(total_points(10, 3, 7))\n# Output: 49",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calcTotalPoints(A, B, C):\n  return (A-B)*C\n\ntotalPoints = calcTotalPoints(A, B, C)\nprint(totalPoints)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n  \n totalPoints (10, 3, 5)\n\nAnswer: 35",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef numPointsScored(A, B, C):\n  return (A - B) * C\n\nprint(numPointsScored(A, B, C))",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n\ntotal_points(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C): \n  return (A - B) * C\n\nprint(total_points(8, 2, 10)) # prints 60",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A,B,C):\n  return (A - B) * C\n\ntotal_points(A,B,C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef score_calculator(a,b,c):\n  total_score = (a - b) * c \n  return total_score\n\nscore_calculator(a,b,c)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPointsScored(A, B, C): \n    return (A - B) * C\n\nprint(totalPointsScored(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef scoreTotal (A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef getScore(A, B, C):\n  return (A - B) * C\n  \nprint(getScore(A, B, C))",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef total_points(A, B, C):\n    return (A - B) * C\n\nprint(total_points(9, 3, 5)) # Output: 30",
          "\n\nAnswer = A * C - (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 15 members total, but during a game 6 members didn't show up. If each member that did show up scored 3 points, how many points were scored total? ",
      "final_answer": 27.0,
      "index": 421
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 44.5009081363678,
      "templates": [
        "Ned had A video games but B of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn?\nWrite a Python function that returns the answer.",
        "Ned had A video games but B of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef sell_games(working_games):\n  return working_games * 7",
          "\n\nAnswer = 7 \u00d7 (A - B)"
        ],
        [
          "\n\ndef total_earnings(working_games):\n return working_games * 7\n\nprint(total_earnings(A - B))",
          "\n\nAnswer = 7 x A - B"
        ],
        [
          "\n\ndef calculateEarnings(workingGames):\n  return 7 * workingGames\n\nprint(calculateEarnings(A-B))",
          "\nAnswer = 7xA - 7xB"
        ],
        [
          "\n\ndef neds_earnings (A, B): \n    return (A - B) * 7\n\nprint(neds_earnings(A, B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef sell_games(x):\n  return x * 7\n\ntotal = sell_games(A - B)\nprint(\"Ned can earn $\" + str(total) + \" by selling his working video games.\")",
          "\nAnswer = 7 x A - 7 x B"
        ],
        [
          " \n\ndef calculateIncome(A,B):\n  return (A-B) * 7\n\nprint(calculateIncome(A,B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef selling_video_games(A, B):\n  return (A - B) * 7\n\nselling_video_games(A, B)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef calculate_sell_price(working_games):\n  return working_games * 7\n\nprint(calculate_sell_price(A-B))",
          "\nAnswer = 7 \u2217 A - 7 \u2217 B"
        ],
        [
          "\n\ndef game_sale(a, b):\n  return (a-b)*7\n\nanswer = game_sale(A, B)",
          "\n\nAnswer = 7 x A - B"
        ],
        [
          "\n\ndef sellWorkingGames(a, b):\n  return (a - b) * 7\n\nprint(sellWorkingGames(A, B))",
          "\nAnswer = 7xA-7xB"
        ],
        [
          "\n\ndef money_earned(A, B):\n  return (A - B) * 7\n\nprint(money_earned(A, B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef profit_from_game_sales(working_games):\n    return working_games * 7\n\nprint(profit_from_game_sales(A - B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef sell_video_games(A, B):\n  return (A - B) * 7\n\nsell_video_games(A, B)",
          "\n\nAnswer = 7 \u00d7 A - 7 \u00d7 B"
        ],
        [
          "\n\ndef sellGames(A,B):\n  return (A - B) * 7\n  \nsellGames(A,B)",
          "\n\nAnswer = 7xA-7xB"
        ],
        [
          "\n\ndef video_game_profit(A, B):\n  profit = (A-B)*7\n  return profit\n  \nprint(video_game_profit(A, B))",
          "\n\nAnswer = 7*A-7*B"
        ],
        [
          "\n\ndef working_games_earning(num_of_working_games):\n  return num_of_working_games * 7",
          "\n\nAnswer = 7 * (A - B)"
        ],
        [
          "\n\ndef calculate_sale(num_working_games):\n    return num_working_games * 7\n\nearnings = calculate_sale(A)\nprint(\"Ned could potentially earn $\" + str(earnings) + \" by selling all the working video games.\")",
          "\n\nAnswer = 7 * A - B"
        ],
        [
          "\n\ndef sellVideoGames(A,B):\n  return (A-B) * 7\n\nsellVideoGames(A,B)",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef getSaleRevenue (gamesWorking):\n  return gamesWorking * 7\n\n#Call the function with A as the argument\nearnings = getSaleRevenue(A) \n\nprint(\"Ned can earn $\" + str(earnings) + \" by selling the working games\")",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef Game_Sale (a,b): \n  return (a-b)*7\n\nGame_Sale (A,B)",
          "\nAnswer = 7n, where n is the number of working video games."
        ],
        [
          "\n\ndef ned_revenue(A, B):\n  return (A - B) * 7\n  \nprint(ned_revenue(A, B))",
          "\n\nAnswer = 7 x (A - B)"
        ],
        [
          "\n\ndef neds_money(x, y):\n  return (x - y) * 7\n\nprint(neds_money(A, B))",
          "\n\nAnswer = 7 x (A - B)"
        ],
        [
          "\n\ndef get_earnings(num_working_games):\n  return num_working_games * 7",
          "\n\nAnswer = 7 x A - 7 x B"
        ],
        [
          "\n\ndef Ned_Game_Sale(A, B):\n  working_games = A - B\n  total_earnings = working_games * 7\n  return total_earnings\n\n# example\nprint(Ned_Game_Sale(10, 2)) # outputs 70",
          "\n\nAnswer = 7 \u00d7 A - B"
        ],
        [
          "\n\ndef earn_money(A, B):\n  return (A - B) * 7\n\nprint(earn_money(A, B))",
          "\n\nAnswer = 7 x A - 7 x B"
        ]
      ]
    },
    "source": {
      "question": " Ned had 15 video games but 6 of them weren't working. If he wanted to sell the working games for $7 each, how much money could he earn? ",
      "final_answer": 63.0,
      "index": 422
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 32.42908191680908,
      "templates": [
        "Each chocolate bar in a box cost $6. If a box had A bars total and Zoe sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $6. If a box had A bars total and Zoe sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef money_made(A, B):\n  return (A-B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef calculatePrice(A, B):\n  return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef calculate_profit(A, B):\n  return (A-B)*6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef get_cost(A, B):\n    return (A - B) * 6 \n\n#example \nget_cost(5, 3) # returns 18",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A-B)*6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef totalProfit(a,b):\n    return (a-b) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef ChocolateIncome(A, B):\n  return (A-B) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          " \n\ndef sale_price(A,B):\n  return (A-B)*6 \n\n\nprint(sale_price(A,B))",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef calculateMoneyMade(A, B):\n  return (A - B) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef moneyMade(A, B):\n  return (A - B) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A-B)*6",
          "\nAnswer = 6A - 6B"
        ],
        [
          " \n\ndef chocolate_income(A, B):\n    return (A - B) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef calculate_profit(A, B):\n  return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef chocolate_money(A, B):\n    return (A - B) * 6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef chocolateMoney(A,B):\n  return (A-B)*6",
          "\nAnswer = 6A - 6B"
        ],
        [
          " \n\ndef find_total(A, B):\n  return (A-B)*6",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef chocolate_bar(A, B):\n  return (A-B) * 6",
          "\n\nAnswer = 6A-6B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A-B) * 6\n\n#Call the function\nmoney_made(A,B)",
          " \nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef chocolate_bars(A,B):\n  return (A-B)*6",
          " \nAnswer = 6A-6B"
        ],
        [
          "\n\ndef total_money(A, B): \n    return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef chocolate_profit(A, B):\n    profit = (A - B) * 6\n    return profit",
          "\n\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef barsSold(A, B):\n  return (A - B) * 6",
          "\nAnswer = 6A - 6B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A-B)*6",
          " \n\nAnswer = 6A - 6B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $6. If a box had 13 bars total and Zoe sold all but 6 bars, how much money would she have made? ",
      "final_answer": 42.0,
      "index": 423
    }
  },
  {
    "result": 25.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.033155918121338,
      "templates": [
        "Will bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Will still have?\nWrite a Python function that returns the answer.",
        "Will bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Will still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        25.0,
        25.0,
        25.0,
        25.0,
        25.0
      ],
      "completions": [
        [
          "\n\ndef piecesLeft(A, B, C):\n  return A*C - B\n\nprint(piecesLeft(A, B, C))",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef pieces_left(A, B, C):\n  return A*C - B\n\nprint(pieces_left(A, B, C))",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return A*C - B\n  \nprint(candy(A, B, C))",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candyPieces(A,B,C):\n  return (A*C) - B\n\nanswer = candyPieces(A,B,C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef chocolate_pieces(A, B, C):\n  return (A * C) - B",
          "\n\nAnswer = A * C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateChocolatePieces(a, b, c):\n  return a*c - b\n  \nAnswer: Will still have (A*C - B) pieces.",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C): \n    return (A - B) * C \n\nanswer = candy_pieces(A, B, C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_amount(A,B,C):\n  total_pieces = A*C\n  pieces_left = total_pieces - B\n  return pieces_left\n\nprint(candy_amount(A,B,C))",
          "\nAnswer = A * C - B"
        ]
      ]
    },
    "source": {
      "question": " Will bought 7 boxes of chocolate candy and gave 3 to his little brother. If each box has 4 pieces inside it, how many pieces did Will still have? ",
      "final_answer": 16.0,
      "index": 424
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.574660778045654,
      "templates": [
        "Mike invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 4, how many should he buy?\nWrite a Python function that returns the answer.",
        "Mike invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 4, how many should he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_cupcakes(num_guests):\n  return num_guests * 4\n\nprint(calculate_cupcakes(A))",
          "\n\nAnswer = 4A"
        ],
        [
          "\n\ndef birthday_cupcakes(a, b):\n  return (a - b)*4",
          " \n\nAnswer = 4 x (A + 1)"
        ],
        [
          "\n\ndef cupcakes(num_friends):\n  return num_friends * 4\n\ncupcakes(A)",
          "\n\nAnswer = 16"
        ],
        [
          "\n\ndef calculateCupcakes(guests):\n  return guests * 4 \n\nprint(calculateCupcakes(A)) #where A is the number of guests invited.",
          "\n\nAnswer = (4 x A) + 4"
        ],
        [
          "\n\ndef num_cupcakes(num_guests):\n  return num_guests * 4\n\nprint(num_cupcakes(A + 1))",
          "\nAnswer = 4A"
        ],
        [
          "\n\ndef num_cupcakes(num_guests):\n  return num_guests * 4\n\n#Example\nprint(num_cupcakes(5))\n\n#Output\n20",
          "\nAnswer = 4x + 4, where x represents the number of friends A invited."
        ],
        [
          "\n\ndef cupcakes (x):\n  return x * 4\n  \nnumFriends = A\nprint(cupcakes(numFriends))",
          "\nAnswer = 4A"
        ],
        [
          "\n\ndef cupcakeCount(A, B):\n  return (A + B - 1) * 4",
          "\n\nAnswer = 4A"
        ],
        [
          "\n\ndef calculate_cupcakes(numA, numB):\n  return (numA * 4) + (numB * 4)\n\n# Example:\nprint(calculate_cupcakes(5, 1)) # Returns 24",
          "\n\nAnswer = 4 x (A + 1)"
        ],
        [
          "\n\ndef cupcakes(numFriends):\n    return numFriends * 4\n\nprint(cupcakes(A))",
          "\nAnswer = 16 cupcakes"
        ],
        [
          "\n\ndef cupcakes_needed(invited, absent): \n  return (invited - absent) * 4\n\n# Exmaple\ncupcakes_needed(10, 1) # returns 36",
          "\n\nAnswer = 8 * A"
        ],
        [
          "\n\ndef cupcakes_calculator(number_of_invitees):\n  return number_of_invitees * 4\n\nprint(cupcakes_calculator(A-B))",
          "\nAnswer = 4 x A"
        ],
        [
          "\n\ndef buy_cupcakes(num_people):\n  return num_people*4\n\nprint(buy_cupcakes(A+1))",
          "\nAnswer = (4 x A) + 4"
        ],
        [
          "\n\ndef num_cupcakes(num_people):\n  return num_people * 4\n  \nnum_cupcakes(A - 1)  # A - 1 accounts for the person who couldn't come",
          "\n\nAnswer = (4 x A) + 4"
        ],
        [
          "\n\ndef cupcakes(numInvited):\n  return numInvited * 4\n\nprint(cupcakes(A))",
          "\nAnswer = 4 x (A + 1)"
        ],
        [
          "\n\ndef calculate_cupcakes(num_guests):\n  return num_guests * 4\n \nnumber_of_guests = 8\n\ncupcakes = calculate_cupcakes(number_of_guests)\n\nprint(\"You need to buy\", cupcakes, \"cupcakes.\")",
          "\nAnswer = 4 \u00d7 A"
        ],
        [
          "\n\ndef getCupcakeCount(invitees):\n  cupcakeCount = invitees * 4\n  return cupcakeCount\n\nprint(getCupcakeCount(A))",
          "\n\nAnswer = (4 x A) + 4"
        ],
        [
          "\n\ndef cupcakes_needed(guests):\n  return guests * 4  # 4 cupcakes per person",
          "\nAnswer = 4A"
        ],
        [
          "\n\ndef number_of_cupcakes(num_friends): \n  return num_friends*4\n\n# For example, if there are 5 people attending the party:\nnumber_of_cupcakes(5) # returns 20",
          "\nAnswer = 4A"
        ],
        [
          "\n\ndef cupcake_calculator(num_guests):\n  return num_guests * 4\n\ncupcake_calculator(A-B)",
          "\nAnswer = 24"
        ],
        [
          "\n\ndef calculate_cupcakes(num_people):\n  return num_people * 4\n\nprint(calculate_cupcakes(A))",
          "\n\nAnswer = 4 x A"
        ],
        [
          "\n\ndef cupcakes(n):\n  return n * 4\n\nprint(cupcakes(A))",
          "\n\nAnswer = 16 cupcakes"
        ],
        [
          "\n\ndef num_cupcakes(num_people):\n  return num_people * 4\n\nprint(num_cupcakes(A - 1))",
          "\n\nAnswer = 4A"
        ],
        [
          "\n\ndef number_of_cupcakes(friends):\n  return friends * 4",
          "\n\nAnswer = 4A"
        ],
        [
          "\n\ndef get_cupcakes(invited_friends):\n  return invited_friends * 4\n\n# Assume A is 3 friends\n\nnumCupcakes = get_cupcakes(3)\nprint(numCupcakes) # prints 12",
          "\nAnswer = 4A"
        ]
      ]
    },
    "source": {
      "question": " Mike invited 13 friends to a birthday party, but 7 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 4, how many should he buy? ",
      "final_answer": 24.0,
      "index": 425
    }
  },
  {
    "result": 10.0,
    "meta": {
      "n_calls": 28,
      "duration": 22.255345821380615,
      "templates": [
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a Python function that returns the answer.",
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        10.0,
        10.0,
        10.0,
        10.0
      ],
      "completions": [
        [
          "\n\ndef enemy_defeated(A, B, C):\n    return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_points(A, B, C):\n    return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_defeated_points (A, B, C):\n  return (A * (B-C))",
          "\nAnswer = (A * (B - C))"
        ],
        [
          "\n\ndef get_points(A, B, C):\n  return A*(B-C)",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points_earned(a, b, c):\n  return (b - c) * a\n  \npoints_earned(10, 20, 3)  # Returns 170",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef compute_points(A, B, C):\n  total_points = (B - C) * A\n  return total_points",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_earned (a, b, c):\n  return (a * (b - c)) \n \npoints_earned (10, 20, 5)\n\n# Output: 150",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef pointsEarned(a, b, c): \n  points = (b - c) * a\n  return points",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_points(A, B, C):\n  return (B-C)*A\n  \npoints_earned = enemy_points(5, 10, 3)\n# returns (10-3)*5, or 25 points",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C): \n  return A * (B - C)",
          "\n\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef calculate_points(a, b, c):\n  points = (b-c)*a\n  return points",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef point_calculator(a, b, c):\n  return (a * (b - c))\n  \npoint_calculator(A,B,C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_points(A, B, C):\n    return (B-C)*A\n    \nprint(enemy_points(2, 10, 8))\n# Output: 16",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef PointsEarned(A, B, C):\n  return (B-C)*A\n\nPointsEarned(3, 8, 6) # returns 18",
          "\n\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " In a video game, each enemy defeated gives you 5 points. If a level has 8 enemies total and you destroy all but 6 of them, how many points would you earn? ",
      "final_answer": 10.0,
      "index": 426
    }
  },
  {
    "result": 54.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.035827398300171,
      "templates": [
        "Roger earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "Roger earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        54.0,
        54.0,
        54.0,
        54.0,
        54.0
      ],
      "completions": [
        [
          "\n\ndef earning(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef mow_lawns(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = (A * (B - C))"
        ],
        [
          "\n\ndef lawn_job (A, B, C):\n  return (A * (B - C))\n\nlawn_job(3, 10, 2)   # it will return 24",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = (A*B) - (A*C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef lawnMoney(a, b, c):\n  return a * (b - c)",
          "\nAnswer = A * (B - C)"
        ]
      ]
    },
    "source": {
      "question": " Roger earned 9 dollars for each lawn he mowed. If he had 14 lawns to mow, but forgot to mow 8 of them, how much money did he actually earn? ",
      "final_answer": 54.0,
      "index": 427
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 28,
      "duration": 21.447799921035767,
      "templates": [
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a Python function that returns the answer.",
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef magicCards(A, B, C):\n  return (B - C) * A",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_magic_deck_earnings(A, B, C):\n  return (B-C)*A",
          "\nAnswer = (A * B) - (A * C)"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C):\n  return (B - C) * A \n\nprint(calculate_earnings(5, 10, 6)) # Prints 25",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef profitEarned(A, B, C):\n    return (B-C)*A",
          "\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef magic_card (A, B, C):\n    return (B-C)*A    \n\nThe answer is (B-C)*A",
          "\nAnswer = (B - C)A"
        ],
        [
          "\n\ndef magic_card_earnings(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C):\n  earned = (B - C) * A\n  return earned",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef magic_deck_earnings(A, B, C):\n  return (B - C) * A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n   return (B - C)*A\n\nprint(money_earned(2, 10, 5)) # prints 20",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef magicEarnings(A,B,C):\n  return (B-C)*A\n\nmagicEarnings(5, 10, 5)\nAnswer: 25",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef magic_card_earnings(A, B, C):\n  return (B-C)*A",
          "\nAnswer = (B - C) x A"
        ],
        [
          "\n\ndef magic_cards(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = (B - C)A"
        ],
        [
          "\n\ndef moneyEarned(A, B, C):\n  return (B-C)*A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef moneyEarned(A, B, C): \n  return (B-C)*A",
          "\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " A magician was selling magic card decks for 2 dollars each. If he started with 5 decks and by the end of the day he had 3 left, how much money did he earn? ",
      "final_answer": 4.0,
      "index": 428
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 12,
      "duration": 8.45327115058899,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef cookPotatoes(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          " \n\ndef cookPotatoes(A,B,C):\n  return (A-B)*C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cook Potatoes (A,B,C):\n  return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cook_potato(A, B, C):\n  return (A - B) * C\n\nprint(cook_potato(A, B, C))",
          "\nAnswer = C * (A-B)"
        ],
        [
          "\n\ndef cooktime(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cook_potatoes(a, b, c):\n  return (a - b) * c",
          "\n\nAnswer = (A-B)*C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 12 potatoes. He has already cooked 6. If each potato takes 6 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 36.0,
      "index": 429
    }
  },
  {
    "result": 18.0,
    "meta": {
      "n_calls": 42,
      "duration": 36.10991096496582,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        18.0
      ],
      "completions": [
        [
          "\n\ndef installWindows(A,B,C):\n  return (A - B) * C\n\ninstallWindows(50,20,2) # Returns 60",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef install_windows(A, B, C):\n  total_hours = (A - B) * C\n  return total_hours",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(a, b, c):\n    return (a - b) * c\n\nprint(install_windows(A, B, C))",
          "\n(B+C) x D = Answer\nAnswer = (B+C) x D"
        ],
        [
          "\n\ndef time_needed(B, C): \n  return (B-1)*C",
          "\nAnswer = (A-B)*C hours."
        ],
        [
          "\n\ndef installWindows(A, B, C):\n  remainingWindows = A - B \n  totalHours = remainingWindows * C\n  return totalHours",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(already_installed, number_to_install, hours_per_window):\n  total_time = (number_to_install * hours_per_window)\n  return total_time + (already_installed * hours_per_window)\n  \nanswer = install_windows(B, A - B, C)",
          "\nAnswer = (A-B) \u00d7 C"
        ],
        [
          "\n\ndef windowInstallTime(a,b,c):\n  time = (a-b) * c\n  return time",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef window_installation_time(windows_installed, windows_needed, installation_time):\n  return (windows_needed-windows_installed)*installation_time\n\nAnswer = window_installation_time(B, A, C)",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef window_installation(B,C):\n  return (A-B)*C\n  \n  where A is the total number of windows needed.",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef time_to_install_windows(a, b, c):\n  hours = (a-b) * c\n  return hours\n\nprint(time_to_install_windows(A, B, C))",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_to_install(A, B, C):\n    return (A-B)*C\n\nprint(time_to_install(A, B, C))",
          "\n\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef install_windows(A, B, C):\n  return (A - B) * C\n\nprint(install_windows(20, 10, 5))\n# 50 hours",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_for_windows(a,b,c):\n  return (a-b)*c\n\ntime_for_windows(20, 15, 3)\n# 45",
          "\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef windowInstallationTime(numWindowsInstalled, numWindowsNeeded, installTimePerWindow):\n  numWindowsRemaining = numWindowsNeeded - numWindowsInstalled\n  installTimeNeeded = numWindowsRemaining * installTimePerWindow\n  return installTimeNeeded\n\nanswer = windowInstallationTime(B, A, C)",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef totalTimeToInstallWindows(B, C): \n  return (10 - B) * C\n\nprint(totalTimeToInstallWindows(B, C))",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef windowTime(A, B, C):\n  return (A - B) * C\n\nprint(windowTime(20, 10, 3))\n#90",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_to_install_windows(a,b,c):\n  return (a-b)*c\n\nprint(time_to_install_windows(A,B,C))",
          "\n\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef time_needed(A,B,C):\n  return (A-B)*C\n\nprint(time_needed(10,2,3))\nOutput: 24",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(B, C):\n  return (12 - B) * C\n\nprint(install_windows(B,C))",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef calculateTime(a,b,c):\n  return (a-b)*c\n  \nprint(calculateTime(A, B, C))",
          "\nAnswer = (A - B)*C"
        ],
        [
          "\n\ndef timeToInstall(a,b,c):\n  return (a-b)*c\n\nprint(timeToInstall(8,4,2))\n# Output: 8",
          "\nAnswer = (A - B) * C hours"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 9 windows. The builder had already installed 6 of them. If it takes 6 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 18.0,
      "index": 430
    }
  },
  {
    "result": 81.0,
    "meta": {
      "n_calls": 22,
      "duration": 18.145825147628784,
      "templates": [
        "At the fair Adam bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Adam spend riding the ferris wheel?\nWrite a Python function that returns the answer.",
        "At the fair Adam bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Adam spend riding the ferris wheel?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        81.0,
        -23.0,
        81.0,
        81.0,
        81.0
      ],
      "completions": [
        [
          "\n\ndef spentMoney(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef how_much_did_Adam_spend(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef money_spent_riding_ferris_wheel(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef ride_ferris_wheel(A,B,C):\n  return A - B * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef money_spent(A, B, C):\n  return (A - B) * C\n\n# Example\nmoney_spent(10, 6, 2) # 8",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef spent_on_ferris_wheel(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef amount_spent(a, b, c): \n  return (a - b) * c",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferris_wheel_spend(A, B, C):\n    return (A-B)*C",
          "\n\nAnswer = A - B * C"
        ],
        [
          " \n\ndef spending (a, b, c):\n  return (a-b)*c",
          "\nA - B = X\nX * C = Answer\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef ferris_wheel_cost(A, B, C):\n    cost = (A-B)*C\n    return cost",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef calculate_spending(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ]
      ]
    },
    "source": {
      "question": " At the fair Adam bought 13 tickets. After riding the ferris wheel he had 4 tickets left. If each ticket cost 9 dollars, how much money did Adam spend riding the ferris wheel? ",
      "final_answer": 81.0,
      "index": 431
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 10,
      "duration": 9.259413957595825,
      "templates": [
        "Dave bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Dave still have?\nWrite a Python function that returns the answer.",
        "Dave bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Dave still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        31.0,
        21.0,
        31.0,
        31.0
      ],
      "completions": [
        [
          "\n\ndef remainingCandy(A, B, C):\n  return (A * C) - B",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return (A * C) - B\n\nprint(candy(2, 5, 8))  # prints 20",
          "\nA(C) - B = Answer\nAnswer = (A*C) - B"
        ],
        [
          "\n\ndef dave_chocolate(A, B, C):\n\treturn (A-B)*C\n\nAnswer = dave_chocolate(A, B, C)",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef candy_count(A, B, C):\n    return (A * C) - B",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_remainder(A, B, C):\n  return (A * C) - B",
          "\n\nAnswer = A * C - B"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Dave bought 12 boxes of chocolate candy and gave 5 to his little brother. If each box has 3 pieces inside it, how many pieces did Dave still have? ",
      "final_answer": 21.0,
      "index": 432
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.360289096832275,
      "templates": [
        "John had A action figures, but needed B total for a complete collection. If each one costs $5, how much money would he need to finish his collection?\nWrite a Python function that returns the answer.",
        "John had A action figures, but needed B total for a complete collection. If each one costs $5, how much money would he need to finish his collection?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef johnsCollection (A, B):\n  totalCost = (B - A) * 5\n  return totalCost\n\nprint(johnsCollection(A, B))",
          "\n\nAnswer = $(5B - 5A)"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 5",
          "\n\nAnswer = $(5 * B)"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 5\n\nprint(complete_collection(A, B))",
          "\nAnswer = ($5) x (B)"
        ],
        [
          "\n\ndef get_collection_cost(num_needed):\n  return num_needed * 5\n\ncost = get_collection_cost(B)",
          "\n\nAnswer = (B - A) x 5"
        ],
        [
          "\n\ndef totalCost(A, B):\n    return (B - A) * 5\n\nprint(totalCost(A, B))",
          "\nAnswer = $(5*B)"
        ],
        [
          "\n\ndef complete_collection_cost(num_action_figures, total_needed):\n  return (total_needed - num_action_figures) * 5\n\ncost = complete_collection_cost(10, 15)\n\nprint(cost)  # 50",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 5\n\nprint(complete_collection(A, B))",
          "\n\nAnswer = $ (5 * B)"
        ],
        [
          "\n\ndef money_needed(A, B):\nreturn (B-A)*5",
          "\nAnswer = $5 \u00d7 B"
        ],
        [
          "\n\ndef total_needed(A, B):\n  return (B - A) * 5\n\ntotal_needed(A, B)",
          "\nAnswer = ($5) x (B)"
        ],
        [
          "\n\ndef collection_cost(a, b):\n  return (b - a) * 5\n\ncollection_cost(A, B)",
          "\nAnswer = ($5 \u00d7 B)"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 5\n  \n#Test\nprint(complete_collection(10, 20)) #50",
          "\nAnswer = $(5*B)"
        ],
        [
          "\n\ndef totalCost(A, B):\n  total = (B - A) * 5\n  return total\n\nprint(totalCost(A, B))",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef needed_money(A, B):\n  return (B-A) * 5\n\nprint(needed_money(A, B))",
          "\nAnswer = $5B"
        ],
        [
          "\n\ndef calculate_cost_of_collection(A, B):\n  return (B-A)*5\n\nprint(calculate_cost_of_collection(A, B))",
          "\nAnswer = $(5 * B)"
        ],
        [
          "\n\ndef collection_cost(x,y):\n  return (y - x)*5\n\nprint(collection_cost(A,B))",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef money_for_collection(A, B):\n  return (B - A) * 5\n\nprint(money_for_collection(A,B))",
          "\nAnswer = (B - A) x 5"
        ],
        [
          "\n\ndef needed_for_collection(A, B): \n  return (B - A) * 5\n\nneeded_for_collection(A, B)",
          "\nAnswer = $5B"
        ],
        [
          "\n\ndef finishCollection(A, B):\n  return (B-A)*5\n\nprint(finishCollection(A,B))",
          "\n\nAnswer = $(5*B)"
        ],
        [
          "\n\ndef collection_cost(A, B):\n  return (B-A) * 5\n\ncollection_cost(A, B)",
          "\nAnswer = $5B"
        ],
        [
          "\n\ndef total_cost(A, B):\n  return (B - A) * 5\nprint(total_cost(A, B))",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef totalCost(a,b):\n  return (b-a)*5\n\ntotalCost(a,b)",
          "\n\nAnswer = 5B"
        ],
        [
          "\n\ndef required_cost(A, B):\n  return (B - A) * 5\n\nrequired_cost(A, B)",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef total(A, B):\n    return (B-A)*5\n\nprint(total(A, B))",
          "\n\nAnswer = $(5 x B)"
        ],
        [
          "\n\ndef totalCost(a,b):\n  return (b-a)*5\n\nprint(totalCost(A,B))",
          "\n\nAnswer = $5B"
        ],
        [
          "\n\ndef collectionCost(A, B): \n  return (B - A) * 5 \n  \nprint(collectionCost(A, B))",
          "\n\nAnswer = $5B"
        ]
      ]
    },
    "source": {
      "question": " John had 5 action figures, but needed 7 total for a complete collection. If each one costs $5, how much money would he need to finish his collection? ",
      "final_answer": 10.0,
      "index": 433
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 20,
      "duration": 16.7032687664032,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef calculate_painting_time(A, B, C): \n  return (A-C)*B",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef painting_time(A, B, C):\n  return (A - C) * B\n\n#Example:  \n# painting_time(10, 2, 5)\n# returns 10",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_rooms(A, B, C):\n    return (A - C) * B\n\nprint(paint_rooms(10, 8, 5))  # 40",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_time (A, B, C):\n    \n    return (A - C) * B",
          "\n\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef time_for_painting(A, B, C):\n  return (A - C) * B\n\nprint(time_for_painting(15, 5, 6))\n# prints 45",
          "\nAnswer = (A-C)*B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef time_to_paint(A, B, C):\n  return (A-C)*B",
          "\n\nAnswer = (A-C) * B hours"
        ],
        [
          "\n\ndef time_left_to_paint(A,B,C):\n    total_hours = A * B\n    hours_painted = C * B\n    return total_hours - hours_painted",
          "\n\nAnswer = (A - C) * B hours"
        ],
        [
          "\n\ndef timeToPaintRemaining(A,B,C):\n  remainingRooms = A - C\n  timeLeft = remainingRooms * B\n  return timeLeft\n\nprint(timeToPaintRemaining(20, 2, 5)  ) # This should return 30.",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef time_left(a, b, c): \n  return (a-c) * b\n\nprint(time_left(10, 2, 5)) # Output: 10",
          "\n\nAnswer = (A-C)*B hours"
        ],
        [
          "\n\ndef paint_time(A, B, C):\n    return (A - C) * B\n\nprint(paint_time(10, 2, 5)) #prints 10",
          "\n\nAnswer = (A - C) * B hours"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 9 rooms in a building. Each room takes 8 hours to paint. If he already painted 5 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 32.0,
      "index": 434
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 34.08012795448303,
      "templates": [
        "Each chocolate bar in a box cost $4. If a box had A bars total and Emily sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $4. If a box had A bars total and Emily sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_profit(A,B): \n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef money_made(A, B):\n  return (A - B) * 4\n\nprint(money_made(A, B))",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef choc_money(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef chocolates(A, B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef profit(A,B):\n    revenue = (A - B) * 4\n    return revenue",
          "\nAnswer = (4*A) - (4*B)"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef bars_profit (A, B):\n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef sellChocolate(A,B): \n  return (A-B) * 4 \n \nsellChocolate(A,B)",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef revenue(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef sell_bars(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\n\ndef calc_profit(A,B):\n  return (A-B)*4",
          " \nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef moneyEarned(A, B): \n  return (A - B) * 4 \n  \nAnswer: moneyEarned(A, B)",
          "\n\nAnswer = $4A - $4B"
        ],
        [
          "\n\ndef chocolateBars(A, B):\n   return 4*(A-B)",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_sales(A, B):\n  return A * 4 - B * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef calculate_cost(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_earned(A, B):\n    return (A - B) * 4\n\nprint(money_earned(A, B))",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made (A, B): \n  return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A,B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef sell_bars (a,b):\n  return (a-b)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef calculate_sale(A, B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef price(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = $4A - $4B"
        ],
        [
          "\n\ndef money_earned(A, B):\n  return (A-B) * 4",
          " \nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_bars(A, B):\n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $4. If a box had 8 bars total and Emily sold all but 3 bars, how much money would she have made? ",
      "final_answer": 20.0,
      "index": 435
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 37.6477210521698,
      "templates": [
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn?\nWrite a Python function that returns the answer.",
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef tip_calculator(A,B):\n  return 3*(A-B)",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef waiterTipped(A, B): \n    return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef waiter_tips(A, B): \n  return (A - B) * 3",
          "\n\nAnswer = ($3 x A) - ($0 x B)"
        ],
        [
          "\n\ndef tip_calculation(A,B):\n    return (A-B)*3\n\nprint(tip_calculation(A,B))",
          "\n\nAnswer = ($3 * A) - ($0 * B);"
        ],
        [
          "\n\ndef tip_calc(A, B): \n  return (A-B)*3",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_earnings(a, b):\n    earnings = (a-b)*3\n    return earnings",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculateTip(numA, numB):\n  return (numA - numB) * 3\n\nprint(calculateTip(A, B))",
          "\n\nAnswer = 3A-B"
        ],
        [
          "\n\ndef calculateEarnings(numA, numB):\n  return (numA - numB) * 3\n\nprint(calculateEarnings(A,B))",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip_earning (num_customers, untipped):\n  return (num_customers - untipped) * 3\n\nprint (calculate_tip_earning (A, B))",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_waiter_earnings(num_customers, no_tip):\n  return num_customers * 3 - no_tip * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef waiter_tip(A,B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tipCalc(A, B):\n    return (A-B)*3",
          "\n\nAnswer = 3A - B."
        ],
        [
          "\n\ndef calculate_tip_earnings(a, b):\n  return (a-b)*3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculateTip(A, B):\n  return (A - B)*3",
          "\n\nAnswer = ($3 x A) - $0(B) = $3(A-B)"
        ],
        [
          "\n\ndef calculateTips(totalCustomers, noTip):\n  tipsEarned = (totalCustomers - noTip) * 3\n  return tipsEarned\n\n# Example call to the function \ncalculateTips(A, B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_calculator(num_customers, num_no_tip):\n  return (num_customers - num_no_tip) * 3\n\nprint(tip_calculator(A, B))",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculateTips(A, B): \n  return 3*(A-B)",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef lunch_tip(A,B):\n  return 3*(A-B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip(num_customers, num_non_tips):\n  tips = (num_customers - num_non_tips) * 3\n  return tips\n\nprint(calculate_tip(A, B))",
          "\n\nAnswer = 3A-B"
        ],
        [
          "\n\ndef calculate_tip(a, b):\n  tip = (a - b) * 3\n  return tip\n\n#calculate_tip(A,B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef earnTip(A, B):\n  return (A-B)*3\n\nprint(earnTip(A, B))",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip(a, b):\n  tip_amount = (a - b) * 3\n  return tip_amount\n\nanswer = calculate_tip(a, b)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_total(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef waiter_tips(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip(a, b):\n  return (a - b) * 3\n\nprint(\"Total tip earned: $\" + str(calculate_tip(A, B)));",
          "\n\nAnswer = 3A - B"
        ]
      ]
    },
    "source": {
      "question": " At lunch a waiter had 10 customers and 5 of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn? ",
      "final_answer": 15.0,
      "index": 436
    }
  },
  {
    "result": 31.0,
    "meta": {
      "n_calls": 28,
      "duration": 22.192116022109985,
      "templates": [
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a Python function that returns the answer.",
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        31.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          " \n\ndef WorksheetProblem(A, B, C):\n  return (B-C)*A\n  \nanswer = WorksheetProblem(A, B, C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\n\nAnswer = A*(B-C)"
        ],
        [
          "\n\n\ndef more_problems(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef answer(A, B, C): \n  return (A * B) - C",
          "\n\nAnswer = (A * B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_problems(A, B, C):\n  return (A * (B - C))\n\nAnswer = get_problems(A, B, C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\n\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef grade_problems(A,B,C):\n    return (A*B)-(A*C)\n\nprint(grade_problems(A,B,C))",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C): \n    return (A * (B - C))",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef calculate_remaining_problems(A, B, C):\n    return (A * B) - (A * C)\n\nanswer = calculate_remaining_problems(A, B, C)\nprint(answer)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef grading_problems(A, B, C): \n    return (A * (B - C))",
          "\n\nAnswer = (A * B * C) - (A * C)"
        ],
        [
          "\n\ndef how_many_problems_left(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef more_problems(A, B, C):\n  return (A * B) - (A * C)",
          "\n\nAnswer = (A*B)-C"
        ],
        [
          "\n\ndef grading_problems(A, B, C):\n  return (A * (B-C))",
          "\n\nAnswer = (A * B * (C+1)) - (A * B * C)"
        ],
        [
          "\n\ndef remainingProblems(A, B, C): \n   return (A*B)-(A*C)\n\nprint(remainingProblems(A, B, C))",
          "\nAnswer = (A * B) - C"
        ]
      ]
    },
    "source": {
      "question": " A worksheet had 4 problems on it. If a teacher had 9 worksheets to grade and had already graded 5 of them, how many more problems does she have to grade? ",
      "final_answer": 16.0,
      "index": 437
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.20641779899597,
      "templates": [
        "Will invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 8, how many should he buy?\nWrite a Python function that returns the answer.",
        "Will invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 8, how many should he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_cupcakes(num_invitees):\n  return (num_invitees-1)*8 \n\nprint(num_cupcakes(8))\n#prints 56",
          "\n\nAnswer = 8 x A"
        ],
        [
          "\n\ndef num_cupcakes(attendees):\n  return attendees * 8\n\nprint(num_cupcakes(A))",
          "\n\nAnswer = 8 x (A + 1)"
        ],
        [
          "\n\ndef cupcakes(numFriends):\n    return numFriends * 8;\n\nprint(cupcakes(A))",
          "\n\nAnswer = 8 x (A + 1)"
        ],
        [
          " \n\ndef cupcakes_needed(num_invited):\n  return num_invited * 8\n\nprint(cupcakes_needed(A))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef calculate_number_of_cupcakes(num_attendees):\n  return num_attendees * 8\n\n# Invited A, so num_attendees = 1\nprint(calculate_number_of_cupcakes(1)) # prints 8",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef cupcakes(num):\n  return num * 8\n\nprint(cupcakes(A))",
          "\n\nAnswer = 8 \u00d7 A"
        ],
        [
          "\n\ndef cupcakes_needed(num_invites): \n  return num_invites * 8 \n\nprint(cupcakes_needed(A))",
          "\n\nAnswer = 8 x A"
        ],
        [
          "\n\ndef cupcakes_needed(number_of_friends):\n  return (number_of_friends - 1) * 8\n\n# In this example, Will invited A friends, so the total number of friends is A+1.\n\nanswer = cupcakes_needed(A+1)",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef cupcakes(friends):\n  return 8 * friends\n\nprint(cupcakes(A Friends))",
          "\n\nAnswer = 8 x (A + 1)"
        ],
        [
          "\n\ndef cupcakes(num_friends):\n  return num_friends * 8\n\n# Invited 5 friends, but one couldn't come\nprint(cupcakes(4))\n\n# Outputs 32",
          "\n\nAnswer = 8 x (A + 1)"
        ],
        [
          "\n\ndef cupcakesNeeded(invitees):\n  return invitees * 8\n\nprint(cupcakesNeeded(A))",
          "\n\nAnswer = 8 x A"
        ],
        [
          "\n\ndef cupcakes (A):\n  return A*8\n\nprint(cupcakes(A))",
          "\n\nAnswer = 8 x (A+1)"
        ],
        [
          "\n\ndef cupcakes(guestA, guestB):\n  return 8 * (guestA - guestB)",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef cupcakes(number):\n  return number * 8 \n\nprint(cupcakes(A))",
          "\n\nAnswer = 8 x A"
        ],
        [
          "\n\ndef num_cupcakes(people):\n  return people * 8\n\nprint(num_cupcakes(A))",
          "\n\nAnswer = 8 x A"
        ],
        [
          "\n\ndef buy_cupcakes(A, B):\n  return (A + B) * 8\nprint(buy_cupcakes(A, B))",
          "\n\nAnswer = (8 x A) + 8"
        ],
        [
          "\n\ndef calculate_cupcakes(num_people):\n    return num_people * 8\n\nprint(calculate_cupcakes(A + 1)) # A + 1, because A can't come and we still need to count them.",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef get_cupcakes_num(invited_friends):\n  return invited_friends * 8\n\nprint(get_cupcakes_num(A))",
          "\n\nAnswer = 8 x (A + 1)"
        ],
        [
          "\n\ndef cupcakes(num_guests): \n  return num_guests * 8\n\nprint(cupcakes(A))",
          "\n\nAnswer = 8 * (A + 1)"
        ],
        [
          "\n\ndef cupcake_count(num_of_attendees):\n  return num_of_attendees * 8\n\nprint(cupcake_count(5)) # 40",
          "\nAnswer = 8 \u00d7 A"
        ],
        [
          "\n\ndef invitation_cupcake(attendees):\n  return attendees * 8\n  \ninvitation_cupcake(A)",
          "\n\nAnswer = 8 x (A+1)"
        ],
        [
          "\n\ndef cupcakes_required(attendees):\n  return attendees * 8\n\nInvitees = A + 1\nprint(cupcakes_required(Invitees)) \n#Prints out 80 cupcakes",
          "\nAnswer = 8 x (A+1)"
        ],
        [
          "\n\ndef cupcakes(num_invited):\n  return num_invited * 8",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef cupcakes(A):\n  return 8 * (A + 1) # Add one to A to account for B not being able to come.",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef calculate_cupcakes(a, b):\n  return (a + b) * 8\n\n# Example: Invited 5 friends, but 1 couldn't come\nprint(calculate_cupcakes(5, 1)) # Output: 48",
          "\n\nAnswer = 8 * A"
        ]
      ]
    },
    "source": {
      "question": " Will invited 9 friends to a birthday party, but 4 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 8, how many should he buy? ",
      "final_answer": 40.0,
      "index": 438
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 32,
      "duration": 24.764477252960205,
      "templates": [
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a Python function that returns the answer.",
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef magic_card_earnings(A, B, C):\n  return (B - C) * A",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef magicianProfit(A, B, C):\n  return (B - C) * A\n\nprint(magicianProfit(2, 10, 3))\n# Output: 16",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return (B-C)*A",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef moneyEarned(A,B,C):\n  return (B-C)*A",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef magic_cards(a, b, c):\n    return (b-c)*a",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef magic_profits(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef magic_card_deck_earnings(A, B, C):\n  return (B-C) * A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef magician_earnings(a, b, c):\n  return (b-c) * a",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef magic_cards(A, B, C):\n  return (B-C) * A",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef magicians_earnings(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef magic_card_profit(A, B, C):\n  return (B - C) * A\n\nprofit = magic_card_profit(5, 10, 3)\n\nprint(profit) # Output: 70",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef calculateMoneyEarned(A,B,C):\n  moneyEarned = (B-C)*A\n  return moneyEarned",
          "\nAnswer = A*(B - C)"
        ],
        [
          "\n\ndef revenue(A, B, C):\n  return (B - C) * A\n\nprint(revenue(5, 10, 7))\n# Answer: $15",
          "\nAnswer = (A \u00d7 B) - (A \u00d7 C)"
        ],
        [
          "\n\ndef earning(A, B, C):\n  return (B-C)*A",
          " \n\nAnswer = (B - C)A"
        ],
        [
          " \n\ndef magictotal (A, B, C):\n  total = (B-C)*A\n  return total",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calc_profits(A, B, C):\n    return (B-C)*A\n\nprint(calc_profits(A, B, C))",
          "\n\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " A magician was selling magic card decks for 9 dollars each. If he started with 12 decks and by the end of the day he had 7 left, how much money did he earn? ",
      "final_answer": 45.0,
      "index": 439
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 12,
      "duration": 9.871374130249023,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\ndef cooking_time(A, B, C):\n  return (A - B) * C\n\n# Example \ncooking_time(10, 5, 5) # 25",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef time_to_cook(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef time_to_cook_potatoes(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef remainingTime(A, B, C):\n  return (A - B) * C\n\nprint(remainingTime(A, B, C))",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cookingTime(A, B, C):\n  return (A - B) * C\n\ncookingTime(A, B, C)",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cook_rest(A,B,C):\n    rest = A - B\n    time = rest * C\n    return time",
          "\nAnswer = (A - B) x C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 9 potatoes. He has already cooked 7. If each potato takes 3 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 6.0,
      "index": 440
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 12,
      "duration": 11.415793895721436,
      "templates": [
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a Python function that returns the answer.",
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef magic_cards(A, B, C):\n  return (B - C) * A\n\nprint(magic_cards(10, 20, 10))\n# Output: 100",
          "\nAnswer = A*(B-C)"
        ],
        [
          " \n\ndef magic_card_earnings(A, B, C):\n  return (B-C)*A\n\nanswer = magic_card_earnings(A, B, C)",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef magic_cards(A, B, C):\n  return (B-C)*A",
          "\nAnswer = (A*B) - (A*C)"
        ],
        [
          "\n\ndef earnings(A, B, C):\n  return (B-C)*A\n\nprint(earnings(A, B, C))",
          "\n\nAnswer = (A * B) - (A * C)"
        ],
        [
          "\n\ndef calculate_income(A, B, C):\n  return (B - C) * A\n\nprint(calculate_income(5, 20, 10))\n# Output: 50",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateEarnings(A,B,C):\n  earnings = (B - C) * A\n  return earnings",
          "\n\nAnswer = (B - C) x A"
        ]
      ]
    },
    "source": {
      "question": " A magician was selling magic card decks for 5 dollars each. If he started with 14 decks and by the end of the day he had 5 left, how much money did he earn? ",
      "final_answer": 45.0,
      "index": 441
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 34.44036674499512,
      "templates": [
        "Each chocolate bar in a box cost $3. If a box had A bars total and Wendy sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $3. If a box had A bars total and Wendy sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef sellChocolate(A,B): \n  return (A-B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef calculate_profits(A, B): \n  return (A-B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef calculatePrice(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef choco_profit(A, B):\n  return (A - B) * 3\n\nprint(choco_profit(A, B))",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef chocolateBarSales(A, B):\n  return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A-B)*3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          " \n\ndef get_profit(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef saleCost(A, B):\n  return (A-B)*3",
          "\nAnswer = $3A - $3B"
        ],
        [
          "\n\ndef moneyMade(A,B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef profit (A, B):\n  return (A-B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 3",
          "\nAnswer = $3A - $3B"
        ],
        [
          "\n\ndef choco_bar_revenue(A,B):\n  return (A - B) * 3",
          "\nAnswer = 3A-3B"
        ],
        [
          " \n\ndef total_money(A, B): \n  return (A - B) * 3",
          " \nAnswer = 3A - 3B"
        ],
        [
          " \n\ndef money_made(A, B): \n    return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef chocolate_bars(A, B):\n  return (A - B) * 3",
          " :\nAnswer = 3A - 3B"
        ],
        [
          " \n\ndef box_money(A, B):\n    total_cost = A * 3\n    revenue = total_cost - (B * 3)\n    return revenue",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef chocolate_bar_sale(A, B):\n    return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\n\ndef sale_profit(A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef sellBox(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 3",
          "\nAnswer = 3A - 3B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A-B)*3",
          "\nAnswer = 3A - 3B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $3. If a box had 9 bars total and Wendy sold all but 3 bars, how much money would she have made? ",
      "final_answer": 18.0,
      "index": 442
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 18,
      "duration": 15.94762396812439,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          "\n\ndef time_remaining(A, B, C):\n  return (A - C) * B\n  \nThis should return the number of additional hours needed to complete the task.",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_rooms(A, B, C):\n    return (A - C) * B\n\nprint(paint_rooms(10, 5, 3)) # 15 hours",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef paint_time(A, B, C):\n  return (A-C)*B",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef remaining_time(A, B, C):\n    return (A - C) * B\n    \nprint(remaining_time(10, 2, 5))\n# Output: 10 hours",
          "\nAnswer = (A - C) * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef paint_time(A, B, C):\n  return (A - C) * B\n\nprint(paint_time(10, 5, 3))\n# 40 hours",
          "\nAnswer = (A-C)*B hours"
        ],
        [
          "\n\ndef paint_time(a, b, c):\n  return (a-c)*b\n\nprint(paint_time(7,5,2))\n# Result: 25 hours",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n  return (A - C) * B # returns time in hours",
          "\n\nAnswer = (A - C) * B hours"
        ],
        [
          "\n\ndef paint_time(a,b,c):\n  return ((a-c)*b)\n  \npaint_time(10, 3, 5)  # Answer: 15 hours",
          "\nAnswer = (A - C) * B"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 12 rooms in a building. Each room takes 3 hours to paint. If he already painted 4 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 24.0,
      "index": 443
    }
  },
  {
    "result": 71.0,
    "meta": {
      "n_calls": 16,
      "duration": 13.140959024429321,
      "templates": [
        "Adam bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Adam still have?\nWrite a Python function that returns the answer.",
        "Adam bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Adam still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        71.0,
        71.0,
        71.0,
        71.0,
        71.0
      ],
      "completions": [
        [
          "\n\ndef calculate_pieces(A, B, C):\n    return A * C - B\n\nanswer = calculate_pieces(A, B, C)\nprint(answer)",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef chocolate_pieces(A, B, C):\n  return (A * C) - B\n\nAnswer = chocolate_pieces(A, B, C)",
          "\nAnswer = (A*C)-B"
        ],
        [
          "\n\ndef candy(A,B,C):\n  return A*C - B\n  \n# answer = candy(A,B,C)",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_left(A, B, C): \n  return A*C - B\n\nprint(pieces_left(2, 4, 8))\n# 24",
          "\n\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef amountLeft(A, B, C):\n  return (A*C)-B\n\namountLeft(A, B, C)",
          "\nAnswer = A*C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candyBox(A, B, C):\n  return (A - B) * C \n\nprint(candyBox(5,2,7)) \n\nThis will print out 28.",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_pieces (A, B, C): \n    return (A - B) * C\n\nprint(candy_pieces(3, 1, 10))\n# Prints 20",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef num_pieces_left(A, B, C):\n  return (A - B) * C\n\nprint(num_pieces_left(3, 1, 10))\n# Output: 20",
          "\n\nAnswer = (A * C) - B"
        ]
      ]
    },
    "source": {
      "question": " Adam bought 13 boxes of chocolate candy and gave 7 to his little brother. If each box has 6 pieces inside it, how many pieces did Adam still have? ",
      "final_answer": 36.0,
      "index": 444
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.17293906211853,
      "templates": [
        "At a restaurant each adult meal costs $7 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $7 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef totalCost(A, B):\n    return A*7\n\nprint(totalCost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef dinner_price(A, B):\n  cost = A * 7\n  return cost\n  \nprint(dinner_price(A,B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef determineCost(A, B):\n  total_cost = A * 7\n  return total_cost\n\nprint(determineCost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          " \n\ndef restaurant_cost(a, b):\n  return a * 7\n\nprint(restaurant_cost(a, b))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_meal(A, B): \n  total = A * 7 \n  return total\nprint(restaurant_meal(A, B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_cost(a, b):\n  if b == 0:\n    cost = a * 7\n  else: \n    cost = a * 7 + b\n  return cost\n  \nrestaurant_cost(a, b)",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_cost(A, B): \n  return A * 7 \n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  total_cost = A * 7\n  return total_cost\n\ntotal_cost = restaurant_cost(A, B)\nprint(total_cost)",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef total_cost(a, b):\n  cost = a * 7\n  return cost\n\ntotal_cost(a, b)",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_cost(A, B): \n  return A * 7\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef meal_cost(a,b):\n  return (a*7)\n\nprint(meal_cost(A,B))",
          "\nAnswer = 7A"
        ],
        [
          " \n\ndef totalMealCost(adults, kids):\n  return (adults*7)\n\nprint(totalMealCost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n    total = A * 7\n    return total\n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 7A"
        ],
        [
          " \n\ndef meal_cost(a, b):\n  return a * 7 \n\nprint(meal_cost(a, b))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef get_cost(A, B):\n    return A * 7\n\nprint(get_cost(A, B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_bill(A,B):\n  return A*7\n\nprint(restaurant_bill(A,B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef mealCost(A, B):\n    return A * 7\n\nprint(mealCost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef meal_cost(a, b):\n  return a * 7\n\ncost = meal_cost(a, b)\nprint(\"The cost for the meals is: $\" + str(cost))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef cost_of_dinner(A, B):\n  cost = A * 7\n  return cost\n\nprint(cost_of_dinner(A, B))",
          "\nAnswer = 7A"
        ],
        [
          " \n\ndef restaurant_cost(A, B):\n  return A * 7\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 7A"
        ],
        [
          "\n\ndef cost_of_meal(A, B):\n  return A * 7\n\nprint(cost_of_meal(A, B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n    return A * 7\n\nprint(meal_cost(A, B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_total(A, B): \n    return A * 7\n\nprint(restaurant_total(A, B))",
          "\nAnswer = 7A"
        ],
        [
          "\n\ndef restaurant_bill(A,B):\n  return A*7\n\nprint(restaurant_bill(A,B))",
          "\n\nAnswer = 7A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $7 and kids eat free. If a group of 13 people came in and 9 were kids, how much would it cost for the group to eat? ",
      "final_answer": 28.0,
      "index": 445
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.782225131988525,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef get_total_score (a, b, c):\n  return (a-b)*c\n\nprint(get_total_score(a,b,c))",
          "\nAnswer = A(C - B)"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n\ntotalPoints(A, B, C)",
          "\n\nAnswer = AC points"
        ],
        [
          "\n\ndef calcPoints(A, B, C):\n  return (A - B) * C\n\n#Example\ncalcPoints(10, 2, 10) \n# returns 80",
          "\n\nAnswer = A*C - (A - B)*C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n  \ntotal_points(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef pointsScored(A, B, C):\n  return (A - B) * C\n\nprint(pointsScored(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          " \n\ndef total_points(A, B, C):\n  return (A - B) * C\n\nprint(total_points(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A,B,C):\n  return (A - B) * C\n\ntotal_points(A,B,C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef score_total(a, b, c):\n  return (a-b)*c\n\nprint(score_total(A, B, C))",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef total_points(a,b,c): \n    total_points = (a - b) * c\n    return total_points\n  \nprint(total_points(A, B, C))",
          "\n\nAnswer = AC"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n\nprint(total_points(10, 2, 3))\n# Prints 24",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef team_score(A,B,C):\n  return (A-B)*C\n  \nAnswer: \nteam_score(A,B,C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculate_score(A,B,C):\n  return (A-B)*C\n \nprint(calculate_score(A,B,C))",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n    return (A - B) * C\n    \ntotal_points(10, 2, 5) # 40",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef total_points(A, B, C): \n  return (A - B) * C\n\ntotal_points(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points_scored(A, B, C):\n  return (A - B) * C\n\ntotal_points_scored(10, 2, 10)\n# 80",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C): \n    return (A - B) * C\n  \ntotal_points(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPointsScored(A,B,C):\n    return (A-B)*C\n    \ntotalPointsScored(A,B,C)",
          " \n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calc_points(A,B,C):\n    return (A-B)*C\n\nprint(calc_points(A,B,C))",
          "\n\nAnswer = A x C - (A - B) x C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n  \ntotalPoints(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          " \n\ndef total_points(A, B, C):\n    points = (A-B)*C\n    return points",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef get_total_score(A, B, C): \n  return (A - B) * C",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n  \ntotal_points(5, 2, 10)\nAnswer: 30",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\nprint(points_scored(10, 4, 6))\n# prints 48",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef point_total(a, b, c):\n    return (a - b) * c\n\nprint(point_total(10, 4, 5))\n# Output: 20",
          "\nAnswer = A*C-B*C"
        ],
        [
          "\n\ndef totalScore(A,B,C):\n  return (A-B)*C\n  \ntotalScore(A,B,C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 7 members total, but during a game 2 members didn't show up. If each member that did show up scored 4 points, how many points were scored total? ",
      "final_answer": 20.0,
      "index": 446
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 39.973105907440186,
      "templates": [
        "Kaleb had A video games but B of them weren't working. If he wanted to sell the working games for $6 each, how much money could he earn?\nWrite a Python function that returns the answer.",
        "Kaleb had A video games but B of them weren't working. If he wanted to sell the working games for $6 each, how much money could he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculateProfit(workingGames):\n  profit = 6 * workingGames\n  return profit\n\nprofit = calculateProfit(A-B)\nprint(\"Kaleb could earn $\" + str(profit) + \" from selling the working games.\")",
          "\n\nAnswer = 6 * (A - B)"
        ],
        [
          "\n\ndef total_earnings(working_games):\n  return working_games * 6\n\nprint(total_earnings(A - B))",
          "\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef moneyMade(workingGames):\n  return 6 * workingGames\n\n# Usage example\nmoneyMade(3) # Returns 18",
          "\nAnswer = 6xA-B"
        ],
        [
          "\n\ndef video_game_earnings(num_of_working_games):\n  return num_of_working_games * 6",
          "\nAnswer = 6 x (A- B)"
        ],
        [
          "\n\ndef calculate_sales(number_of_working_games):\n    return number_of_working_games * 6",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef calculate_sale_income(num_working_games):\n  return num_working_games * 6",
          "\n\nAnswer = 6 x A = 6A"
        ],
        [
          "\n\ndef get_earnings(A, B):\n  return (A - B)* 6",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          " \n\ndef money_earned(games):\n  return games * 6",
          "\nAnswer = 6 x A - 6 x B"
        ],
        [
          " \n\ndef getProfit(games):\n  return games * 6;\n\nprint(getProfit(A - B))",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef moneyEarned(A, B): \n  return (A - B) * 6\n\nprint(moneyEarned(A, B))",
          "\nAnswer = 6 \u00d7 A - 6 \u00d7 B"
        ],
        [
          "\n\ndef kalebEarnings (working_games):\n  return working_games * 6\n\ntotal_earnings= kalebEarnings(A - B)\nprint(\"Kaleb could earn $\" + str(total_earnings) + \" from selling the working video games.\")",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef calc_profit(working_games):\n    return working_games * 6\n\nprofit = calc_profit(A - B)\nprint(\"Kaleb could earn $\" + str(profit) + \" from selling his games.\")",
          "\nAnswer = 6 x A"
        ],
        [
          "\n\ndef sell_video_games(working_games):\n  result = working_games * 6\n  return result\n\nprint(sell_video_games(A - B))       # A - B = number of working games",
          "\nAnswer = 6xA"
        ],
        [
          "\n\ndef kaleb_earnings(working_games): \n  earnings = working_games * 6 \n  return earnings \n\nkaleb_earnings(A - B)",
          "\n\nAnswer = $12 (6 x 2)"
        ],
        [
          "\n\ndef money_earned(A, B): \n return (A-B) * 6 \n\nmoney_earned(A,B)   # Replace A and B with numbers",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef money_earned(A, B):\n     return (A - B) * 6  # A - B is the number of working games, so A - B multiplied by $6 gives the money Kaleb can earn from selling the working games.",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef sellGames(workingGames):\n  return workingGames * 6\n\nsellGames(A - B)",
          "\n\nAnswer = 6 x A-B"
        ],
        [
          "\n\ndef make_money(working_games):\n    return working_games * 6",
          "\nAnswer = 6xA-6xB"
        ],
        [
          "\n\ndef total_earnings(working_games):\n  return 6 * working_games\n\n#Example\nprint(total_earnings(2))\n#Output: 12",
          "\n\nAnswer = 6 * A - 6 * B"
        ],
        [
          "\n\ndef total_sales(working_games):\n  total_earnings = working_games * 6\n  return total_earnings\n\nprint(total_sales(A-B))",
          "\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef total_profit(A, B):\n  return (A-B) * 6\n\nprint(total_profit(A, B))",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef earn_money(A, B):\n  return (A - B) * 6  # returns money kept from the sale of the working video games",
          "\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef calculate_earnings(working_games):\n  return working_games * 6",
          "\n\nAnswer = 6 x A - 6 x B"
        ],
        [
          "\n\ndef sell_games(num):\n  return num * 6\n\ntotal = sell_games(A-B)\nprint(total)",
          "\nAnswer = 6 \u00d7 A \u2212 6 \u00d7 B"
        ],
        [
          "\n\ndef sell_video_games(games_working, game_price):\n    return games_working * game_price\n    \nsell_video_games(A, 6) # returns the amount of money Kaleb could make",
          "\n\nAnswer = 6 x A - 6 x B"
        ]
      ]
    },
    "source": {
      "question": " Kaleb had 10 video games but 8 of them weren't working. If he wanted to sell the working games for $6 each, how much money could he earn? ",
      "final_answer": 12.0,
      "index": 447
    }
  },
  {
    "result": 35.0,
    "meta": {
      "n_calls": 20,
      "duration": 15.334256887435913,
      "templates": [
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        35.0,
        35.0,
        35.0,
        35.0,
        35.0
      ],
      "completions": [
        [
          "\n\ndef earnings(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef aprils_sales(A, B, C): \n  return (B-C) * A\n\naprils_sales(A, B, C)",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef flower_sale(A, B, C):\n  return (B-C)*A",
          "\nAnswer = (B-C)*A"
        ],
        [
          "\n\ndef earnings(A,B,C): \n    return (B - C) * A\n    \nearnings(A, B, C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef discountFlowers(A,B,C):\n  return (B-C)*A",
          "\n\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\nLet P be the amount of money that April earned\n\ndef sale(A, B, C):\n  P = (B - C) * A\n  return P",
          "\nAnswer = (B-C) x A"
        ],
        [
          "\n\ndef aprilsRevenue(A, B, C):\n  revenue = (B - C) * A\n  return revenue",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef money_earned(a, b, c):\n  return (b - c) * a\n\nmoney_earned(2, 10, 5)  # returns 10",
          "\n\nAnswer = (B-C)*A"
        ],
        [
          "\n\ndef aprils_sale(a, b, c):\n  return (b-c)*a\n\nanswer = aprils_sale(a, b, c)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef aprils_revenue(a, b, c):\n    return (b - c) * a\n\n# Example usage:\n# aprils_revenue(2, 10, 7) # Returns 12",
          "\n\nAnswer = A * (B - C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each rose was 7 dollars. If April started with 9 roses and had 4 roses left, how much money did she earn? ",
      "final_answer": 35.0,
      "index": 448
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 44,
      "duration": 33.94638419151306,
      "templates": [
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $8 each from the ones who did tip, how much money did he earn?\nWrite a Python function that returns the answer.",
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $8 each from the ones who did tip, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0
      ],
      "completions": [
        [
          "\n\ndef tip_calc(A, B):\n  return (A - B) * 8\n\nanswer = tip_calc(A, B)",
          "\nAnswer = 8 * (A-B)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef lunchTip(A, B): \n    return (A - B) * 8 \n\nlunchTip(A, B)",
          "\n\nAnswer = 8A - B"
        ],
        [
          "\n\ndef calculate_tip(A,B):\n  return A*8 - B*0\n\nprint(calculate_tip(A,B))",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef waiter_tip(A,B):\n  return 8*(A-B)",
          "\n\nAnswer = 8 * A - B"
        ],
        [
          "\n\ndef waiter_lunch(x, y):\n  return 8 * (x - y)",
          "\n\nAnswer = 8A - 8B"
        ],
        [
          "\n\ndef calculate_tip(customers, no_tip):\n  return (customers - no_tip) * 8\n\nprint(calculate_tip(A, B))",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef tip(a, b):\n  return a - b * 8\n\nprint(tip(a, b))",
          "\nAnswer = 8A - B"
        ],
        [
          "\n\ndef calculate_tip(num_customers, num_no_tip):\n  return (num_customers - num_no_tip) * 8\n\nresult = calculate_tip(A, B)\nprint(result)",
          "\n\nAnswer = 8A - 8B"
        ],
        [
          "\n\ndef tip_earnings(A, B):\n  return (A - B) * 8\n  \n#Example\ntip_earnings(8, 4) will return 32.",
          "\n\nAnswer = 8 x A - 8 x B"
        ],
        [
          "\n\ndef tip_amount (a, b):\n   return 8*(a-b)\n \nprint(tip_amount(A, B))",
          "\n\nAnswer = 8A - B"
        ],
        [
          "\n\ndef calculate_tip(A,B):\n  return (A-B)*8\n\nprint(\"The waiter earned $\" + str(calculate_tip(A,B)) + \".\")",
          "\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef tip_calculator(A, B):\n    return (A - B) * 8 \n\nprint(tip_calculator(A, B))",
          "\n\nAnswer = 8xA-B"
        ],
        [
          "\n\ndef tip_amount(A, B):\n  return (A - B) * 8\n  \nprint(tip_amount(A, B))",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef tip_calculator(A, B):\n  return (A - B)*8\n  \nprint(tip_calculator(A, B))",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef calculateTip(A, B):\n  return 8 * (A-B)",
          "\n\nAnswer = 8A - B"
        ],
        [
          "\n\ndef calculateTips(A, B):\n  return (A - B) * 8\n\nprint(calculateTips(A, B))",
          "\nAnswer = 8 x A - 0 x B"
        ],
        [
          "\n\ndef waiterTip(A, B):\n  return 8 * (A - B)",
          "\n\nAnswer = 8A - B"
        ],
        [
          "\n\ndef calculateTip (numA,numB):\n  return numA * 8 - numB * 0.00\n\nprint(calculateTip(A,B))",
          "\n\nAnswer = 8(A-B)"
        ],
        [
          "\n\ndef tip_earned(A, B):\n  return 8 * (A-B)",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef tip_earnings(A, B):\n  return (A - B)*8\n  \nprint(tip_earnings(A, B))",
          "\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef waiter_tip(A, B):\n  return (A - B) * 8\n  \n# Example\nwaiter_tip(10, 2)  # Returns 80",
          "\n\nAnswer = 8A - 0B"
        ],
        [
          "\n\ndef tip_earned(A, B):\n  return (A - B) * 8\n\nprint(tip_earned(A, B))",
          "\n\nAnswer = 8A - 8B"
        ]
      ]
    },
    "source": {
      "question": " At lunch a waiter had 9 customers and 5 of them didn't leave a tip. If he got $8 each from the ones who did tip, how much money did he earn? ",
      "final_answer": 32.0,
      "index": 449
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 50,
      "duration": 47.336190938949585,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0
      ],
      "completions": [
        [
          "\n\ndef totalHours(A,B,C):\n  return (A-B)*C\n\ntotalHours(A,B,C)",
          "\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef window_time(A, B, C):\n  return (A - B) * C\n\nprint(window_time(50, 10, 3)) #returns 120",
          "\n\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef install_windows(a,b,c):\n  return (a-b)*c\n\nprint(install_windows(A,B,C))",
          "\n\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef install_windows(a,b,c):\n  return (a-b)*c\n\nanswer = install_windows(A, B, C)",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_to_install_windows(A, B, C): \n    return (A - B) * C\n\nAnswer: (A - B) * C",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(a, b, c):\n  return (a - b) * c\n\n# For example, if a = 10, b = 4, and c = 2\nprint(install_windows(10, 4, 2))\n# Output: 8",
          "\nAnswer = (A - B) x C"
        ],
        [
          "\n\ndef installationHours(A, B, C): \n  return (A - B) * C\n\nprint(installationHours(10, 4, 2)) \n# 12",
          "\nAnswer = (A-B) \u00d7 C hours"
        ],
        [
          "\n\ndef window_time(a, b, c):\n  return (a-b)*c\n\nAnswer = window_time(A, B, C)",
          "\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef new_windows(a, b, c):\n  return (a - b) * c\n\nprint(new_windows(A,B,C))",
          "\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef install_time(num_of_windows_remaining, hours_per_window):\n    return num_of_windows_remaining * hours_per_window\n\nanswer = install_time(B, C)",
          "\nAnswer = (A-B) * C hours"
        ],
        [
          "\n\ndef time_for_extra_windows(total_windows, installed_windows, installation_hours):\n    return (total_windows - installed_windows) * installation_hours\n\nprint(time_for_extra_windows(A, B, C))",
          " \nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef installWindows(A, B, C):\n    return (A - B) * C\n\nprint(installWindows(100, 10, 3))\n# 90 hours",
          "\nAnswer = B \u00d7 C hours"
        ],
        [
          "\n\ndef window_install(windows, hours):\n  return (B - A) * C hours\n  \nanswer = window_install(A, B, C)",
          "\n\nAnswer = (A-B) * C hours"
        ],
        [
          "\n\ndef install_windows(a, b, c):\n  return (a-b)*c\n\nprint(install_windows(10, 3, 5))\n# Output: \n \n50",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_for_windows(a, b, c):\n  return (a - b) * c\n  \nprint(time_for_windows(A, B, C))",
          "\nAnswer = (A-B) * C hours"
        ],
        [
          "\n\ndef calculate_total_window_installation_time(windows_installed, windows_needed, installation_time):\n  return (windows_needed - windows_installed) * installation_time\n\nprint(calculate_total_window_installation_time(B, A, C))",
          "\n\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef install_windows(A, B, C):\n  return (A - B) * C\n  \nprint(install_windows(50, 10, 2))\n# This will return 80 hours",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef calculateTime(windowsNeeded, windowsInstalled, timePerWindow):\n    return (windowsNeeded - windowsInstalled) * timePerWindow\n\nprint(calculateTime(A, B, C))",
          "\nAnswer = (A-B) \u00d7 C hours"
        ],
        [
          "\n\ndef num_hours_to_install(a,b,c):\n  return (a - b) * c\n\nprint(num_hours_to_install(A,B,C))",
          "\nAnswer = B + (A - B)*C"
        ],
        [
          "\n\ndef install_windows(A, B, C):\n    return (A-B)*C\nprint(install_windows(A, B, C))",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef installWindows(A, B, C):\n  return (A - B) * C\n\nprint(installWindows(30, 10, 3)) # Output: 90",
          "\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef rest_window_time(num_windows_installed, num_additional_windows, hours_per_window):\n    return (num_additional_windows * hours_per_window)\n\n#Assuming A = 30, B = 10, and C = 1\ntotal_time_needed = rest_window_time(10, 20, 1)\nprint(total_time_needed)\n#Outputs 20",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          " \n\n# Define function \ndef installWindows(A, B, C):\n  # Calculate \n  totalTime = (A - B) * C \n  # Return result \n  return totalTime \n\n# Call function \ninstallWindows(A, B, C)",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef timeToInstallWindows(A, B, C):\n  return (A-B)*C\n\nprint(timeToInstallWindows(50, 10, 5))\n#Output: 200",
          "\n\nAnswer = (A-B) * C Hours"
        ],
        [
          "\n\ndef windowInstallTime(a, b, c):\n    return (a - b) * c\n\nprint(windowInstallTime(20, 10, 3)) # Output: 30",
          "\nAnswer = (A - B) x C hours"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 14 windows. The builder had already installed 8 of them. If it takes 8 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 48.0,
      "index": 450
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 18,
      "duration": 13.029985904693604,
      "templates": [
        "Bianca earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a Python function that returns the answer.",
        "Bianca earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0,
        45.0,
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef recyclable_points(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A * (B-C)"
        ],
        [
          "\n\ndef canRecycling(A,B,C):\n    return A * (B - C)",
          "\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef can_recycler(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = (A * B) - (A * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef recycle_points(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef recycling_points(A,B,C):\n  return A*(B-C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef earned_points(A, B, C):\n  return A * (B-C)",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef recycling_points(a, b, c):\n  return a * (b - c)",
          "\n\nAnswer = A * (B - C)"
        ]
      ]
    },
    "source": {
      "question": " Bianca earned 5 points for each bag of cans she recycled. If she had 17 bags, but didn't recycle 8 of them, how many points would she have earned? ",
      "final_answer": 45.0,
      "index": 451
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 24,
      "duration": 19.397758960723877,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef cook_potatoes(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef potato_cooking_time(A, B, C):\n  return (A - B) * C\n\nprint(potato_cooking_time(10, 5, 3))\n# Output: 15",
          "\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef cook_potatoes(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef cookPotatoes(A, B, C):\n  return (A-B) * C",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cookPotatoes(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = (A - B) * C minutes"
        ],
        [
          "\n\ndef potatoes_time(A, B, C): \n  potatoes_left = A - B\n  total_time = potatoes_left * C \n  return total_time",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef potato_cook_time(a,b,c):\n    return (a - b) * c\n\nprint(potato_cook_time(a,b,c))",
          "\nAnswer = (A - B) \u00d7 C"
        ],
        [
          "\n\ndef cookPotatoes(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = (A-B) x C"
        ],
        [
          "\n\ndef cook_potatoes(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C minutes"
        ],
        [
          "\n\ndef time_for_potatoes(a,b,c):\n    return (a-b)*c",
          "\nAnswer = (A-B)*C minutes"
        ],
        [
          "\n\ndef time_to_cook_potatoes(A, B, C):\n  total_time = (A-B) * C\n  return total_time\n\nprint(time_to_cook_potatoes(10, 5, 10))\n#Output: 50 minutes",
          "\n\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef cook_time(a,b,c):\n  '''Returns how long it will take to cook A potatoes, given the \n  chef has already cooked B potatoes and each potato takes C minutes to cook'''\n  \n  return (a - b) * c",
          "\n\nAnswer = (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 15 potatoes. He has already cooked 6. If each potato takes 8 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 72.0,
      "index": 452
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.81722283363342,
      "templates": [
        "Henry had A action figures, but needed B total for a complete collection. If each one costs $6, how much money would he need to finish his collection?\nWrite a Python function that returns the answer.",
        "Henry had A action figures, but needed B total for a complete collection. If each one costs $6, how much money would he need to finish his collection?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef finishCollection(actionFigures, total):\n  return actionFigures * 6 + total * 6",
          " \nAnswer = $6B"
        ],
        [
          "\n\ndef collection_costs(action_figures_total, completed_collection_total):\n  return (completed_collection_total - action_figures_total) * 6\n  \nprint(collection_costs(A, B))",
          "\n\nAnswer = $(6 \u00d7 B)"
        ],
        [
          "\ndef complete_collection(A, B):\n  return (B - A) * 6",
          "\nAnswer = $(6B)"
        ],
        [
          "\n\ndef finish_collection(A, B):\n  return (B - A) * 6 \n\nprint(finish_collection(A, B))",
          "\n\nAnswer = 6 x B"
        ],
        [
          "\n\ndef complete_collection(A,B):\n  return (B - A) * 6\n  \ncomplete_collection(A,B)",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndefamingCost(A, B): \n  cost = (B - A) *6\n  return cost\n\nprint(defamingCost(A, B))",
          "\n\nAnswer = $(6 * B)"
        ],
        [
          "\n\ndef totalCost(A, B):\n    return (B - A) * 6\n\n# Example value:\ntotalCost(45, 55)\n# Output: \n# 90",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n\nprint(complete_collection(A, B))",
          "\nAnswer =  6B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n  \ncomplete_collection(A, B)",
          "\nAnswer = $(6B)"
        ],
        [
          "\n\ndef complete_collection (A, B):\n  return (B-A)*6",
          "\n\nAnswer = $(6 * B)"
        ],
        [
          "\n\ndef finishCollection(A, B):\n  return (B-A)*6",
          "\nAnswer = (6*B)"
        ],
        [
          "\n\ndef total_cost(action_figures, needed):\n  return action_figures * 6 + needed * 6",
          "\nAnswer = (B - A) \u00d7 6"
        ],
        [
          "\n\ndef collection_cost(a, b):\n  cost = (b-a)*6\n  return cost\n\nprint(collection_cost(A, B))",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef collection_cost(needed):\n  return needed * 6\n\nprint(collection_cost(B))",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef finishCollection(A, B):\n  return (B - A) * 6",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef get_price_to_complete_collection(action_figure_quantity, total_needed):\n  return (total_needed - action_figure_quantity) * 6\n\nprint(get_price_to_complete_collection(A, B))",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef collection_cost(A, B):\n  total_cost = (B - A) * 6\n  return total_cost\n\nprint(collection_cost(A, B))",
          "\n\nAnswer = $(6B - 6A)"
        ],
        [
          "\n\ndef money_needed(action_figures, total_needed): \n  return 6 * (total_needed - action_figures)\n\nmoney_needed(A, B)",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n\ncomplete_collection(A, B)",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef total_cost(A, B):\n  cost = (B - A) * 6\n  return cost\n\ntotal_cost(A, B)",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\n def complete_collection(A, B):\n  return (B - A) * 6",
          "\n\nAnswer = 6 x B"
        ],
        [
          "\n\ndef finish_collection(A, B):\n  return (B - A) * 6",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef collection(A, B):\n  return (B-A)*6\n\nanswer = collection(A,B)",
          "\nAnswer = 6 \u00d7 B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n\ncomplete_collection(A, B)",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef collectionPrice(A, B):\n  return (B-A) * 6\n\nprint(collectionPrice(A, B))",
          "\n\nAnswer = $6B"
        ]
      ]
    },
    "source": {
      "question": " Henry had 3 action figures, but needed 8 total for a complete collection. If each one costs $6, how much money would he need to finish his collection? ",
      "final_answer": 30.0,
      "index": 453
    }
  },
  {
    "result": 64.0,
    "meta": {
      "n_calls": 10,
      "duration": 8.701887130737305,
      "templates": [
        "John earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "John earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        64.0,
        64.0,
        64.0,
        64.0,
        64.0
      ],
      "completions": [
        [
          "\n\ndef money_earned(A, B, C):\n  return (B-C)*A",
          "\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef mowed_lawns(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C):\n  return A * (B - C)\n\n#Example\ncalculate_earnings(5, 10, 5)\n25",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef AmountEarned(A, B, C):\n   return (B - C) * A\n\nprint(AmountEarned(A, B, C))",
          "\nAnswer = (A*(B-C))"
        ],
        [
          "\n\ndef money_earner (A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " John earned 8 dollars for each lawn he mowed. If he had 15 lawns to mow, but forgot to mow 7 of them, how much money did he actually earn? ",
      "final_answer": 64.0,
      "index": 454
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 34.966455936431885,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef remaining_lives(a,b,c):\n  return (a*c)-b\n\nprint(remaining_lives(A, B, C))",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n  \ntotal_lives(5, 2, 3) # Output: 9",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return (A - B) * C",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef lives_total(a, b, c):\n    return (a - b) * c\n\nprint(lives_total(A, B, C))",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef compute_lives(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return A*C - B*C \n\ntotal_lives(A, B, C)",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef totalLives(A, B, C): \n  return (A-B)*C",
          "\nAnswer = A\u00d7C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * C - B * C",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef find_lives_total(A, B, C): \n  return (A - B) * C\n\n# For example, if there were 5 friends, 3 players quit, and each player had 3 lives, the answer would be 12\nprint(find_lives_total(5, 3, 3)) # 12",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return (A - B) * C\n \ntotal_lives(7, 3, 5)    # returns 20",
          " \nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n    return (a - b) * c\n\ntotal_lives( 5, 2, 3 )  # returns 9",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef num_lives(A, B, C):\n    return A*C - B*C\n\n#Example\nnum_lives(4,2,3)\n\nOutput:\n12",
          "  \n\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives (A, B, C):\n    return (A - B) * C\n\ntotalLives(10, 2, 3)\n# Returns 24",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives_lost(A, B, C):\n    return A*C - B*C\n\nprint(lives_lost(A, B, C))",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A*C - B*C\n\ntotal_lives(3, 2, 5)  # Should return 15",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A - B) * C\n\nlives_left(5, 2, 3)\n\n# Output\n15",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n    return (A - B) * C",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * B * C",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives(a, b, c):\n  return (a*c) - b\n\ntotalLives(A, B, C)",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n    return (A - B) * C\n\nprint(totalLives(10, 5, 3))  # Output: 45",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A - B) * C\n\ntotal_lives(8, 4, 3)\n# Output: 24",
          "\nAnswer = (A x C) + B"
        ]
      ]
    },
    "source": {
      "question": " There were 10 friends playing a video game online when 7 players quit. If each player left had 8 lives, how many lives did they have total? ",
      "final_answer": 24.0,
      "index": 455
    }
  },
  {
    "result": 40.0,
    "meta": {
      "n_calls": 32,
      "duration": 27.34008288383484,
      "templates": [
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a Python function that returns the answer.",
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        40.0,
        40.0,
        40.0,
        40.0
      ],
      "completions": [
        [
          "\n\ndef defeated_points(A,B,C):\n  return (B - C) * A\n  \npoints_earned = defeated_points(A,B,C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_points(A,B,C):\n  return (B-C) * A\n  \nprint(calculate_points(10,50,20))\n\nAnswer = 300",
          "\n\nAnswer = A*(B - C)"
        ],
        [
          "\n\ndef defeated(A, B, C):\n  return (B-C) * A \n\nprint(defeated(A, B, C))",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_earned (A, B, C): \n  return (A * (B - C))",
          "\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef enemyPoints(A, B, C):\n    return (A*(B-C))\n    \nprint(enemyPoints(5, 10, 3))\n\nThis would print out \"25\".",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef enemyPoints(A,B,C):\n  return (B - C) * A\n\nprint(enemyPoints(100, 15, 5))\n\nThis will return 500.",
          "\n\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (B-C)*A\n\nprint(calculatePoints(10, 40, 8))\n# 320",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef enemy_defeated_points(A, B, C):\n  return A*(B-C)",
          "\n\nAnswer = A(B - C)"
        ],
        [
          " \n\ndef points_earned(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A x (B - C)"
        ],
        [
          " \n\ndef enemy_points(A, B, C):\n  return (B - C) * A\n  \nprint(enemy_points(25, 10, 7))\nThis will print 125.",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef enemyPoints(A, B, C):\n  earnedPoints = (B - C) * A\n  return earnedPoints",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef enemyPoints(A, B, C):\n  return (B - C) * A\n\npoints = enemyPoints(10, 20, 5)\nprint(points) \n# prints 100",
          "\n\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef getPoints(A, B, C):\nresult = (B - C)*A\nreturn result\n  \nprint(getPoints(3, 15, 10))\n# Output: 45",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_points(a, b, c):\n  return (b-c)*a\n  \nprint(calculate_points(2, 10, 4))\n# This will return 12 points.",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef enemy_points(a,b,c):\n  return (a * (b - c)) \n  \n# For example\nenemy_points(2,7,3) \n# should return 8 (2 x (7 - 3))",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A * (B-C)",
          "\n\nAnswer = A(B-C)"
        ]
      ]
    },
    "source": {
      "question": " In a video game, each enemy defeated gives you 8 points. If a level has 7 enemies total and you destroy all but 2 of them, how many points would you earn? ",
      "final_answer": 40.0,
      "index": 456
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 20,
      "duration": 19.16558599472046,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef painting_time(A, B, C): \n  return (A - C) * B",
          "\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef time_to_paint(A,B,C):\n  return (A-C)*B\n\nprint(time_to_paint(8,3,4))\n# 12 hours",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef time_to_paint(A, B, C):\n    return (A - C) * B\n\nprint(time_to_paint(5, 3, 2)) # 9",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef paint_room(A,B,C):\n\treturn (A-C)*B\n\nanswer = paint_room(A,B,C)",
          "\n\nAnswer = (A-C) * B"
        ],
        [
          "\n\ndef paint(A, B, C):\n  return (A-C)*B",
          "\n\nAnswer = (A - C) * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef time_to_paint(a, b, c):\n    return (a-c)*b\n\n#example: time_to_paint(8, 4, 2) \n#returns: 16",
          "\n\nAnswer = (A - C) x B hours"
        ],
        [
          "\n\ndef calculate_time(A,B,C):\n  remaining_rooms = A-C\n  total_time = remaining_rooms * B\n  return total_time",
          "\nAnswer = (A-C) * B"
        ],
        [
          "\n\ndef time_to_paint(a, b, c):\n  return (a - c) * b\n\n# Call the function:\ntime_to_paint(a=5, b=2, c=3)\n# Output: 4 hours",
          "\nAnswer = (A - C) * B hours"
        ],
        [
          "\n\ndef calculate_time(a, b, c):\n  return (a-c)*b\n  \nprint(calculate_time(10, 3, 5))  # 15",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\n\ndef time_to_paint(a, b, c):\n    return (a - c) * b\n\nprint(time_to_paint(5, 3, 2)) # 9 hours",
          "\nAnswer = (A-C)*B hours"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 11 rooms in a building. Each room takes 7 hours to paint. If he already painted 2 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 63.0,
      "index": 457
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.21403908729553,
      "templates": [
        "Dave had A video games but B of them weren't working. If he wanted to sell the working games for $4 each, how much money could he earn?\nWrite a Python function that returns the answer.",
        "Dave had A video games but B of them weren't working. If he wanted to sell the working games for $4 each, how much money could he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef total_earnings(not_working, working): \n  return 4 * working \n\ntotal_earnings(A, B)",
          "\nAnswer = 4 \u00d7 A - B"
        ],
        [
          "\n\ndef daves_money(A, B):\n  return (A - B) * 4\nprint(daves_money(A, B))",
          "\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef money_earned(working_games):\n    return working_games * 4",
          "\n\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef get_money_earned(working_games):\n  money_earned = working_games * 4\n  return money_earned\n\n#Example\nmoney_earned = get_money_earned(5)\nprint(money_earned)\n\n# Output\n20",
          "\nAnswer = 4xA-B"
        ],
        [
          "\n\ndef moneyEarned(A, B):\n  return (A - B) * 4\n\nprint(moneyEarned(A, B))",
          "\n\nAnswer = 8 x 4 = 32"
        ],
        [
          "\n\ndef calculate_earnings(num_working_games):\n  return num_working_games * 4\n\nprint(calculate_earnings(A-B))",
          "\n\nAnswer = 4 * A - 4 * B"
        ],
        [
          "\n\n\ndef working_game_profit(games, price):\n    return (games - games * 0.2) * price\n\nprint(working_game_profit(A, 4))",
          "\n\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef sell_games(A, B):\n  return (A - B) * 4\n\nprint(sell_games(A, B))",
          "\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef sell_working_games(working_games):\n    return working_games * 4",
          "\nAnswer = $4 * A - $4 * B"
        ],
        [
          "\n\ndef calc_earnings(A, B):\n  return (A-B) * 4\n\nprint(calc_earnings(A, B))",
          "\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef total_earnings(A,B):\n  earnings = (A - B) * 4\n  return earnings\n\nprint(total_earnings(A,B))",
          "\nAnswer = 4 * A - B"
        ],
        [
          "\n\ndef calc_profit(working_games):\n  return working_games * 4\n\nprint(calc_profit(A - B))",
          "\nAnswer = $12"
        ],
        [
          "\n\ndef get_sale_amount(working_games):\n  return working_games * 4",
          "\n\nAnswer = 4 * A - 4 * B"
        ],
        [
          "\n\ndef total_earning(a, b):\n  return (a - b) * 4\n\nprint(total_earning(a, b))",
          "\n\nAnswer = 4 * A - B"
        ],
        [
          "\n\ndef calc_earnings(games):\n  return 4 * games\n\nprint(calc_earnings(A - B))",
          "\n\nAnswer = 4 * A - 4 * B"
        ],
        [
          "\n\ndef sell_videogames(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = 4 x A - B"
        ],
        [
          " \n\ndef calculate_earnings(working_games):\n  return 4 * working_games\n\n\nearnings = calculate_earnings(A - B)",
          "\n\nAnswer = 4 * A - B"
        ],
        [
          "\n\ndef sum_of_games(a, b):\n    return (a - b) * 4\n\nprint(sum_of_games(a, b))",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef how_much_money(workingGames):\n  return workingGames * 4\n\nprint(how_much_money(A-B))",
          "\nAnswer = 4 \u00d7 (A - B)"
        ],
        [
          "\n\ndef earnings(A,B): \n    return (A - B) * 4 \n\nearnings(A,B)",
          "\n\nAnswer = 4 x A - B"
        ],
        [
          "\n\ndef get_sell_value():\n  working_games = int(input(\"How many games are working? \"))\n  return working_games * 4\n\nprint(get_sell_value())",
          " \n\nAnswer = 4 * A - B"
        ],
        [
          "\n\ndef calculate_earnings(games):\n  return games * 4",
          "\n\nAnswer = 12 x 4 = 48"
        ],
        [
          "\n\ndef calculate_earnings(games):\n  working_games = sum(1 for game in games if game[1] == 'working')\n  return working_games * 4\n\nprint(calculate_earnings(A))",
          "\n\nAnswer = $4 x A"
        ],
        [
          "\n\ndef calc_earnings(working_games):\n  return working_games * 4",
          "\nAnswer = 4 x A - 4 x B"
        ],
        [
          "\n\ndef money_earned(A, B):\n  return (A - B) * 4\n\n# For example, let's say Dave has 10 video games and 2 of them are not working. That means he can sell 8 games for $4 each.\n\nprint(money_earned(10, 2)) # Prints 32",
          "\nAnswer = $12"
        ]
      ]
    },
    "source": {
      "question": " Dave had 10 video games but 2 of them weren't working. If he wanted to sell the working games for $4 each, how much money could he earn? ",
      "final_answer": 32.0,
      "index": 458
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 30,
      "duration": 24.561510801315308,
      "templates": [
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a Python function that returns the answer.",
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        56.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef grade_remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef num_problems_to_grade(A, B, C):\n  return (A*(B-C))",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef problemsToGrade(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef problemsToGrade(A, B, C):\n  return (A*B)-C",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef getNumberOfProblemsToGrade(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_problems(A,B,C):\n    return (A * B) - C",
          "\n\nAnswer = (A * B * (C + 1)) - (A * B * C)"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return (A * (B - C))\n\nprint(total_problems(A, B, C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef unfinished_problems(A, B, C):\n    return (A * (B - C))\n\nprint(unfinished_problems(10, 5, 3))\n# Output: 50",
          "\nAnswer = B x A - C"
        ],
        [
          "\n\ndef num_of_problems_ungraded(num_of_worksheets, num_of_graded_worksheets):\n  return (num_of_worksheets - num_of_graded_worksheets) * A\n\nAnswer = num_of_problems_ungraded(B, C)",
          "\nAnswer = B \u00d7 A - C"
        ],
        [
          "\n\ndef problems_remaining(a, b, c):\n  return (a * b) - (a * c)\n\nprint(problems_remaining(A, B, C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems_to_grade(a, b, c):\n  return (a * (b - c))",
          "\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef worksheet_grading(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef num_more_problems (A, B, C): \n  return (A * (B - C))",
          "\nAnswer = (A*B) - C"
        ],
        [
          "\n\ndef more_problems(A, B, C):\n  return (A * (B - C)) \n\nprint(more_problems(A, B, C))",
          "\nAnswer = (A * B) - C"
        ]
      ]
    },
    "source": {
      "question": " A worksheet had 4 problems on it. If a teacher had 16 worksheets to grade and had already graded 8 of them, how many more problems does she have to grade? ",
      "final_answer": 32.0,
      "index": 459
    }
  },
  {
    "result": 14.0,
    "meta": {
      "n_calls": 30,
      "duration": 26.93616533279419,
      "templates": [
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a Python function that returns the answer.",
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        14.0,
        14.0,
        14.0,
        14.0
      ],
      "completions": [
        [
          "\n\ndef remaining_problems(A, B, C):\n    return A * (B - C)\n\n# call the function\nremaining_problems(100, 15, 10) # returns 500",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef problems_to_grade(A, B, C):\n    return (A * (B - C))",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef num_problems (A, B, C):\n    return (A * B) - (A * C)\n\nprint(num_problems(A, B, C))",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef grade_problem (A, B, C):\n  return (A * (B - C))",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_remaining_problems(A, B, C):\n  return A * (B - C)\n\nans = calculate_remaining_problems(A, B, C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef grading_problems(A, B, C):\n    return (A * (B - C))",
          "\n\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))\n\nprint(remaining_problems(A, B, C))",
          "\n\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * B) - (A * C)\n\nanswer = remaining_problems(A, B, C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef worksheet_problems(A,B,C):\n  return (A * B) - (A * C)\n\nanswer = worksheet_problems(A,B,C)",
          "\n\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef num_problems_to_grade(a, b, c):\n    return a*(b-c)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef num_problems_left_to_grade(A, B, C):\n  return (A*B)-C",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef gradeProblems(A, B, C):\n  return (A*(B-C))",
          "\n\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef GradingProblems(A, B, C):\n    return (A * (B - C))",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef number_of_problems(A,B,C):\n    return (A*(B-C))\n\nprint(number_of_problems(A, B, C))",
          "\n\nAnswer = (A x B) - C"
        ]
      ]
    },
    "source": {
      "question": " A worksheet had 2 problems on it. If a teacher had 14 worksheets to grade and had already graded 7 of them, how many more problems does she have to grade? ",
      "final_answer": 14.0,
      "index": 460
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 22,
      "duration": 19.604200839996338,
      "templates": [
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef aprilSale(A, B, C):\n  return (B - C) * A \n\n# Example\nprint(aprilSale(2, 8, 5)) # returns 12",
          "\n\nAnswer = (B - C)*A"
        ],
        [
          "\n\ndef earnings(A, B, C):\n  return (B - C) * A\n\n#Example:\nearnings(4, 10, 8)\n# Returns 32",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef aprils_discount_flowers_sale(A, B, C):\n    return (B-C)*A",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef calculate_earnings(A, B, C):\n  return (B-C)*A\n\nprint(calculate_earnings(A, B, C))",
          "\nAnswer = (B-C)*A"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef flowerSale(a, b, c):\n  return (b-c)*a\n\nanswer = flowerSale(A, B, C)",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef earn(A, B, C): \n  return (B - C) * A",
          "\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef calculate_earnings(price_rose, start_roses, end_roses):\n  earnings = (start_roses - end_roses) * price_rose\n\n  return earnings",
          "\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef earnMoney(A, B, C): \n    return (B - C) * A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef april_earnings(A,B,C):\n  return (B-C)*A\n  \nanswer = april_earnings(A,B,C)",
          "\nAnswer = A * (B \u2013 C)"
        ],
        [
          "\n\ndef profit_from_roses(A, B, C):\n    return (B-C)*A\n\nprint(profit_from_roses(3, 10, 5)) # 45",
          "\n\nAnswer = (B-C)A"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each rose was 4 dollars. If April started with 13 roses and had 4 roses left, how much money did she earn? ",
      "final_answer": 36.0,
      "index": 461
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.3091721534729,
      "templates": [
        "At a restaurant each adult meal costs $5 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $5 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef restaurant_cost(A, B):\n  return 5 * A\n\nrestaurant_cost(A, B)",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(a,b):\n  return a * 5\n\nprint(meal_cost(a,b))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(adults, kids):\n  return adults * 5\n\nprint(restaurant_cost(adults, kids))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(a, b):\n  return a*5\n\nprint(restaurant_cost(a, b))",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef totalCost(A, B):\n  return A*5\n\nprint(totalCost(A, B))",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A * 5\n  \nrestaurant_cost(A, B)",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  return A * 5\n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return (A*5)\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef cost_of_meal(A, B):\n  return A * 5\n\nprint(cost_of_meal(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n    return A * 5\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_price(A, B):\n  return A*5\n\nprint(restaurant_price(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(A,B):\n  return A*5\nprint(meal_cost(A,B))",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(A,B):\n  return A*5\n\nprint(meal_cost(A,B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef calculate_cost(num_adults, num_kids):\n  cost = num_adults * 5\n  return cost\n  \nprint(calculate_cost(A, B))",
          "\nAnswer = $5A"
        ],
        [
          "\n\ndef restaurant_costs(A, B):\n    cost = A * 5\n    return cost\n\nprint(restaurant_costs(A, B))",
          " \nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  return A * 5\n\nprint(restaurant_bill(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n    total_cost = A * 5\n    return total_cost\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef calculate_meal_cost(adult_meals, kids_meals):\n  total_cost = adult_meals * 5\n  return total_cost\n\nprint(calculate_meal_cost(A, B))",
          "\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(a, b):\n  return a * 5\n\nprint(meal_cost(a, b))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 5\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\nAssume A and B are integer values\n\ndef restaurantCost (A, B): \n  return A * 5\n\nprint(restaurantCost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 5 \nprint(meal_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  cost = A * 5\n  return cost\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef group_meal_cost(A, B):\n    cost = A * 5\n    return cost\n\nprint(f\"The cost for the group to eat is ${group_meal_cost(A, B)}.\")",
          "\n\nAnswer = 5A"
        ],
        [
          "\n\ndef restaurant_meal_cost(adults, children):\n  return adults * 5 \n \nprint(restaurant_meal_cost(A, B))",
          "\nAnswer = 5A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $5 and kids eat free. If a group of 15 people came in and 8 were kids, how much would it cost for the group to eat? ",
      "final_answer": 35.0,
      "index": 462
    }
  },
  {
    "result": 42.0,
    "meta": {
      "n_calls": 44,
      "duration": 42.65040993690491,
      "templates": [
        "Zoe baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a Python function that returns the answer.",
        "Zoe baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        42.0
      ],
      "completions": [
        [
          "\n\ndef brownies_needed(A, B, C):\n   return (B-A)*C\n\nprint(brownies_needed(A, B, C))",
          "\nAnswer = (B-A) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_flour(brownies_needed, flour_per_brownie):\n  total_flour_needed = brownies_needed * flour_per_brownie\n  return total_flour_needed\n\nprint(calculate_flour(B, C))",
          "\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef remainingFlour (A, B, C):\n  return (B - A) * C\n\nprint (remainingFlour(A, B, C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef needed_flour(a, b, c):\n  return (b * c) - (a * c)",
          "\nAnswer = B-C"
        ],
        [
          "\n\ndef total_flour_needed(a,b,c):\n  return (b-a)*c\n\nprint(total_flour_needed(25,50,3))\n\n45",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef brownies(B, C):\n  return (B*C) - C",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef flour_needed(total, used):\n  return (total * used) - used\n\nprint(flour_needed(B, C))",
          "\nAnswer = B - (C \u00d7 A)"
        ],
        [
          "\n\ndef totalFlourNeeded(a, b, c):\n  return (b - a) * c\n\nprint(totalFlourNeeded(x, y, z))",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef totalFlour(A, B, C):\n  return (B - A) * C",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef remaining_flour(A, B, C):\n    return (B - A) * C\n\nprint(remaining_flour(5, 20, 1.5))\n# 22.5",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef brownieTotal(brownies, total, flour):\n  return total*flour - brownies*flour\n\nprint(brownieTotal(A, B, C))",
          "\nAnswer = (B-A)*C"
        ],
        [
          "\n\ndef needed_flour(brownies, total, flour):\n  return (total - brownies) * flour\n\nneeded_flour(A, B, C)",
          "\nAnswer = A x C - B"
        ],
        [
          "\n\ndef get_total_flour(A, B, C):\n  total = (A * C) - B\n  return total\n\nprint(get_total_flour(A, B, C))",
          "\n\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef brownies(A,B,C):\n  return (B-A)*C\n\nprint(brownies(A,B,C))",
          "\nAnswer = (B - C) * 1"
        ],
        [
          "\n\ndef total_flour_needed(brownies_needed, cups_per_brownie):\n  return (brownies_needed * cups_per_brownie)\n\nprint(total_flour_needed(A, C))",
          "\n\nAnswer = (B-A) * C"
        ],
        [
          "\n\ndef remaining_flour(A, B, C):\n return (B-A)*C\n \n#For example, if Zoe baked 20 brownies, needed 25 total for her party, and used 2 cups of flour on each one:\nremaining_flour(20, 25, 2) #returns 5",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef brownie_supply(a, b, c):\n  return (b - a) * c\n\nprint(brownie_supply(a, b, c))",
          "\nAnswer = B - (C \u00d7 A)"
        ],
        [
          "\n\ndef calculateFlour(num_needed, num_made, cups_each):\n    return (num_needed - num_made) * cups_each",
          "\nAnswer = (B - C) cups of flour"
        ],
        [
          "\n\ndef flour_needed(A, B, C):\n  return (B - A) * C\n\n# Example\nflour_needed(15, 30, 1.5) # 22.5",
          "\nAnswer = B - (C \u00d7 A)"
        ],
        [
          "\n\ndef baking_flour(a, b, c):\n  return (b - a) * c\n\nprint(baking_flour(3, 12, 0.5)) # should return 6.0",
          "\n\nA + B - C = D\nAnswer = D"
        ],
        [
          "\n\ndef calculateFlour(A, B, C): \n  return (B - A)*C\n\nprint(calculateFlour(A, B, C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef total_flour(A, B, C):\n  return (B-A) * C\n\nprint(total_flour(A, B, C))",
          "\nA x B = C\nAnswer = (C \u00d7 B) / A"
        ]
      ]
    },
    "source": {
      "question": " Zoe baked 5 brownies, but needed 11 total for her party. If she used 7 cups of flour on each one, how much cups of flour does she still need? ",
      "final_answer": 42.0,
      "index": 463
    }
  },
  {
    "result": 20.0,
    "meta": {
      "n_calls": 12,
      "duration": 11.425234317779541,
      "templates": [
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a Python function that returns the answer.",
        "A painter needed to paint A rooms in a building. Each room takes B hours to paint. If he already painted C rooms, how much longer will he take to paint the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        20.0,
        20.0,
        20.0,
        20.0,
        20.0
      ],
      "completions": [
        [
          "\n\ndef paint_rooms(A, B, C):\n  return (A-C) * B\n\nAnswer = paint_rooms(A, B, C)",
          "\n\nAnswer = (A-C) * B"
        ],
        [
          "\n\ndef painting_time(A, B, C): \n    return (A-C)*B",
          "\n\nAnswer = (A - C) * B"
        ],
        [
          "\n\ndef calculate_time(A, B, C):\n  return (A - C) * B\n  \nprint(calculate_time(A, B, C))",
          "\nAnswer = (A-C)*B"
        ],
        [
          "\n\ndef timeRemaining(A, B, C):\n  return (A-C)*B",
          "\nAnswer = (A-C) * B"
        ],
        [
          "\n\ndef paint_hours(A, B, C): \n  return (A - C) * B",
          "\n\nAnswer = (A-C) * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef time_required_to_paint_rooms(A, B, C):\n    return (A - C) * B\n    \n#A = number of rooms\n#B = hours to paint one room\n#C = number of rooms already painted",
          "\nAnswer = B * (Ab - C) hours"
        ]
      ]
    },
    "source": {
      "question": " A painter needed to paint 6 rooms in a building. Each room takes 5 hours to paint. If he already painted 2 rooms, how much longer will he take to paint the rest? ",
      "final_answer": 20.0,
      "index": 464
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 34.85640597343445,
      "templates": [
        "Each chocolate bar in a box cost $4. If a box had A bars total and Vanessa sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $4. If a box had A bars total and Vanessa sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef moneyMade(A,B):\n  return (A-B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_profit(A, B): \n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 4\n\nmoney_made(A, B)",
          "\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef money_made(A, B):\n  return (A-B)*4",
          "\nAnswer = $4A - $4B"
        ],
        [
          "\n\ndef total_profit(A, B):\n    return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef calculate_profit(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef profit(A,B):\n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_bar_earnings(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_bars_money(A, B):\n  return \"$\" + str(A * 4 - B * 4)",
          "\n\nAnswer = $4A - $4B"
        ],
        [
          "\n\ndef moneyMade(A,B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A,B):\n return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolateProfit(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef money_made(A, B):\n  return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef bars_sold_money (A, B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef moneyFromBarSold(A, B):\n    return 4 * (A-B)",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A, B):\n    return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef moneyMade(a, b):\n  return 4 * (a-b)",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef calculate_revenue(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made(A,B):\n    return (A-B)*4",
          "\nAnswer = 4A - 4B"
        ],
        [
          " \n\ndef total_money(A,B):\n  return (A - B)*4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef calculate_cost(A, B):\n  return (A - B) * 4",
          "\n\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef chocolate_box(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A-4B"
        ],
        [
          "\n\ndef sellChocolate(A, B):\n  return (A - B) * 4",
          "\nAnswer = 4A - 4B"
        ],
        [
          "\n\ndef money_made (A,B):\n  return (A-B)*4",
          "\n\nAnswer = 4A - 4B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $4. If a box had 11 bars total and Vanessa sold all but 7 bars, how much money would she have made? ",
      "final_answer": 16.0,
      "index": 465
    }
  },
  {
    "result": 16.0,
    "meta": {
      "n_calls": 10,
      "duration": 7.596186876296997,
      "templates": [
        "Gwen earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a Python function that returns the answer.",
        "Gwen earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        16.0,
        16.0,
        16.0,
        16.0
      ],
      "completions": [
        [
          "\n\ndef calcPoints(A, B, C):\n  return (B-C)*A",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef recycle_points(A, B, C):\n  return (A*B)-(A*C)",
          "\nAnswer = (A * B) - (A * C)"
        ],
        [
          "\n\ndef num_points(A,B,C): \n  return (A*(B-C))\n\nprint(num_points(4,10,2))  ----> 32",
          "\n\nAnswer = A*(B-C)"
        ],
        [
          " \n\ndef recyclePoints(A,B,C): \n  return A*(B-C)",
          "\n\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": []
    },
    "source": {
      "question": " Gwen earned 8 points for each bag of cans she recycled. If she had 4 bags, but didn't recycle 2 of them, how many points would she have earned? ",
      "final_answer": 16.0,
      "index": 466
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 44,
      "duration": 45.37004280090332,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef time_to_install(A, B, C):\n    return (A - B) * C\n\ntime_to_install(A, B, C)",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef timeToInstallWidows(numWindowsNeeded, numWindowsInstalled, hoursPerWindow):\n    remainingWindows = numWindowsNeeded - numWindowsInstalled\n    return remainingWindows * hoursPerWindow\n\nprint(timeToInstallWidows(20, 10, 1.5))\n# Prints 15 (hours needed to install the remaining 10 windows)",
          "\nAnswer = (A - B) \u00d7 C hours"
        ],
        [
          "\n\ndef timeToInstall(A, B, C): \n  total_time = (A - B) * C\n  return total_time\n\nAnswer = timeToInstall(A, B, C)",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef time_for_windows(A, B, C): \n  return (A-B)*C",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(A,B,C): \n  windows_to_install = A-B\n  total_time = windows_to_install*C\n  return total_time",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef install_windows(num_windows, windows_installed, hours_to_install):\n  return (num_windows - windows_installed) * hours_to_install",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef calculateWindowInstallationTime(windowsNeeded, windowsInstalled, hoursPerWindow):\n    windowsDifference = windowsNeeded - windowsInstalled\n    totalInstallationTime = windowsDifference * hoursPerWindow\n    return totalInstallationTime",
          "\nAnswer = (A-B) * C hours"
        ],
        [
          " \n\ndef install_windows(a,b,c):\n    remaining = a - b\n    return remaining * c\nanswer = install_windows(A,B,C)",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef timeForWindows(A, B, C):\n    totalTime = (A - B) * C \n    return totalTime",
          "\nAnswer = (B - A) x C hours"
        ],
        [
          "\n\ndef InstallationTime(A, B, C):\n  return (A-B)*C\n\nInstallationTime(10, 5, 2) # returns 10",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef time_for_windows(B, C, rest):\n  time = rest * C\n  return (f'It will take the builder {time} hours to install the rest {rest} windows.')\n\nprint(time_for_windows(30, 2, 10))\n\nOutput: It will take the builder 20 hours to install the rest 10 windows.",
          "\n\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef timeInstallWindows(B, C):\n  return (C * (10 - B)) \n\nanswer = timeInstallWindows(B, C)",
          "\n\nAnswer = B + (A - B) * C"
        ],
        [
          "\n\ndef install_rest(a,b,c):\n  return (a-b)*c\n\nprint(install_rest(A, B, C))",
          "\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef installWindows(b, c):\n  return (b * c)\n\nprint(installWindows(B, C))",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef timeToInstallWindows(a,b,c):\n  return (a-b)*c \n\nprint(timeToInstallWindows(A,B,C))",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef total_installation_time(A, B, C):\n  return (A-B)*C\n\nprint(total_installation_time(10, 5, 2))  # 10 - 5 = 5, 5 * 2 = 10, so it will take 10 hours",
          "\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef remaining_windows(A, B, C):\n    return (A-B)*C\n\nprint(remaining_windows(150, 50, 4))\n# Output: 800",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef calculateTime(A, B, C):\n  return (A - B) * C\n\nprint(calculateTime(21, 10, 2.5))  # Returns 47.5",
          "\nAnswer = (A - B) x C hours"
        ],
        [
          "\n\ndef findTimeToInstallWindows(B, C):\n  return (B + 1) * C\n\nanswer = findTimeToInstallWindows(B,C)\nprint(answer)",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef time_to_install_rest(A, B, C):\n  return (A - B) * C\n\nprint(time_to_install_rest(50, 10, 2))  # Output: 80",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef calc_time(a, b, c):\n  return (a - b) * c\n\nprint(calc_time(a, b, c))",
          "\nAnswer = ( B \u00d7 C ) + ( (A - B) \u00d7 C )"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 12 windows. The builder had already installed 6 of them. If it takes 4 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 24.0,
      "index": 467
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 22,
      "duration": 19.4117591381073,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef cook_potatoes(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef potato_cooking_time(A, B, C):\n\treturn (A - B) * C\n\nprint(potato_cooking_time(A, B, C))",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef calculate_cooking_time(A, B, C):\n  return (A - B)*C\n\nanswer = calculate_cooking_time(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef remaining_cooking_time(A, B, C):\n    return (A - B)*C",
          "\n\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef cook_time(A, B, C): \n   return (A - B)*C",
          "\n\nAnswer = A*C - B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cook_potatoes(a, b, c):\n  return (a - b) * c",
          "\n\nAnswer = A * C - B * C"
        ],
        [
          "\n\ndef cookingTime(A, B, C):\n  totalTime = (A-B)*C\n  return totalTime\n  \nprint(cookingTime(A, B, C))",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cookTime(A, B, C):\n    time = (A-B) * C\n    return time",
          "\n\nAnswer = C * (A - B)"
        ],
        [
          "\n\ndef potatoTime(A,B,C):\n  time = (A-B)*C\n  return time",
          "\n\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef cook_time(A, B, C):\n    total_time = (A - B) * C\n    return total_time",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef potato_cook_time(A, B, C):\n  return (A-B) * C",
          "\nAnswer = (A - B) x C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 15 potatoes. He has already cooked 8. If each potato takes 9 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 63.0,
      "index": 468
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 48.87132406234741,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n  \ntotalPoints(10, 5, 3) \n# Output: 15",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n  \npoints_scored(A, B, C)",
          "\nAnswer = A x C - (A - B) x C"
        ],
        [
          "\n\ndef compute_points(A, B, C): \n    return (A - B) * C\n\nanswer = compute_points(A, B, C)",
          " \n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n\nprint(total_points(10, 3, 5))\n# Result: 35",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef scored_points(A, B, C):\n  total_points = (A - B) * C\n  return total_points\n\nscored_points(A, B, C)",
          "\nAnswer = A*C-B*C"
        ],
        [
          "\n\ndef computeScore(A, B, C):\n  return (A - B) * C\n\nprint(computeScore(A, B, C))",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\npoints_scored(A, B, C)",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef calculate_points(A, B, C):\n  return (A - B) * C\n\n# Call the function\ncalculate_points(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef computeTriviaScore(a, b, c):\n    return (a-b)*c\n\ntriviaTotal = computeTriviaScore(a, b, c)\nprint(triviaTotal)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n    return (A - B) * C\n  \ntotalPoints(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef score_total(A, B, C):\n  return (A-B)*C\n\nprint(score_total(A, B, C))",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef trivia_score(A, B, C):\n  return (A - B) * C\n\nprint(trivia_score(A, B, C))",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (A-B)*C\n  \n#Test case\ncalculatePoints(6, 3, 5)\nOutput:\n15",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C): \n  return (A - B) * C\n\nprint(totalPoints(10, 3, 5))\n\n25",
          "\nAnswer = A * C - (A-B) * C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A - B) * C\n#Example\ntotal_score(10, 4, 5)\n#returns 30",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef calculate_trivia_points(a, b, c):\n  return (a - b) * c\n\nprint(calculate_trivia_points(7, 2, 5))\n\nAnswer: 25",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n\ntotalPoints(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B)*C\n\ntotal_points(A, B, C)",
          "\n\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          " \n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n\nprint(totalPoints(A, B, C))",
          "\n\nAnswer = A*C - (A-B)C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A-B)*C\n\ntotal_points(A, B, C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef scored_points(A, B, C):\n  return (A - B) * C\n\n# calling the function\nanswer = scored_points(A, B, C)\nprint(answer)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\npoints_scored(A,B,C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n    return (A - B) * C\n\nprint(total_points(4, 2, 10))\n# Output: 20",
          "\n\nAnswer = A x C - (A - B) x C"
        ],
        [
          " \n\ndef totalPointsScored(A, B, C):\n  return (A - B) * C\n\ntotalPointsScored(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n  return (A - B) * C\n  \ntotal_score(A,B,C)",
          "\n\nAnswer = A*C - (A-B)*C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 14 members total, but during a game 7 members didn't show up. If each member that did show up scored 5 points, how many points were scored total? ",
      "final_answer": 35.0,
      "index": 469
    }
  },
  {
    "result": 48.0,
    "meta": {
      "n_calls": 18,
      "duration": 16.178192853927612,
      "templates": [
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a Python function that returns the answer.",
        "A chef needs to cook A potatoes. He has already cooked B. If each potato takes C minutes to cook, how long will it take him to cook the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        48.0,
        48.0,
        48.0,
        48.0
      ],
      "completions": [
        [
          "\n\ndef time_to_cook(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cook_potatoes(A, B, C):\n    return (A - B) * C \n\nprint(cook_potatoes(10, 5, 15)) #75",
          "\n\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef potato_cooking_time(A, B, C):\n  return (A - B) * C\n\nprint(potato_cooking_time(10, 5, 20)) # 200",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef cook_potatoes(A, B, C):\n    return (A-B) * C",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cookTime(A, B, C):\n  return (A-B)*C\n\nprint(cookTime(A, B, C))",
          "\n\nAnswer = (A - B) x C"
        ],
        [
          "\n\ndef time_to_cook_all_potatoes(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A-B x C"
        ],
        [
          "\n\ndef potato_cooking_time(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) x C min"
        ],
        [
          "\n\ndef potatoes(a,b,c):\n    return (a - b) * c\n\ncooking_time = potatoes(A, B, C)\nprint(cooking_time)",
          "\n\nAnswer = (A - B) \u00d7 C minutes"
        ],
        [
          "\n\ndef potato_cooking_time(a, b, c):\n  return (a - b) * c\n\nprint('It will take', potato_cooking_time(a, b, c), 'minutes to cook the rest.')",
          "\nAnswer = (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A chef needs to cook 13 potatoes. He has already cooked 5. If each potato takes 6 minutes to cook, how long will it take him to cook the rest? ",
      "final_answer": 48.0,
      "index": 470
    }
  },
  {
    "result": 45.0,
    "meta": {
      "n_calls": 40,
      "duration": 37.420565128326416,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        45.0,
        45.0
      ],
      "completions": [
        [
          "\n\ndef totalPointsScored(A, B, C):\n  return (A - B) * C\n\ntotalPointsScored(10, 2, 5)\n# returns 40",
          "\n\nAnswer = A*C-B*C"
        ],
        [
          " \n\ndef totalScore(A, B, C):\n  return (A - B) * C\n  \ntotalScore(A, B, C)",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (A - B) * C\n\nprint(calculatePoints(A, B, C))",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef calculateTotalPoints(A, B, C):\n  return (A - B) * C\n\nprint(calculateTotalPoints(A, B, C))",
          "\nAnswer = AC"
        ],
        [
          "\n\ndef scored_total(A, B, C):\n  return (A - B) * C\n\n# Example\nscored_total(6, 2, 5) # returns 20",
          "\nAnswer = A \u00d7 C - (A-B) \u00d7 C"
        ],
        [
          "\n\ndef total_score(A, B, C):\n    return (A - B) * C\n\nprint(total_score(10, 2, 5))  # 40",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef points_scored(a, b, c):\n  return (a - b) * c \n\npoints_scored(a, b, c)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalScore(a, b, c):\n  return (a-b)*c\n\ntotalScore(A,B,C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef teamTrivaScore(A, B, C):\n  return (A-B)*C\n  \nprint(teamTrivaScore(7, 2, 10))  # Output: 50",
          " \nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef points_scored(a, b, c):\n  return (a - b) * c\n  \npoints_scored(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef get_total_points(A, B, C):\n  return (A - B) * C\n  \nget_total_points(A, B, C)",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(a,b,c):\n    return (a-b)*c\n    \ntotalPoints(A,B,C)",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return (A - B) * C\n  \ntotalScore(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef trivia_team(A, B, C):\n  return (A - B) * C\n\nprint(trivia_team(A, B, C))",
          "\nAnswer = A \u00d7 C - (A - B) \u00d7 C"
        ],
        [
          "\n\ndef total_points(A,B,C):\n    return (A-B)*C\n\nanswer = total_points(A,B,C)",
          "\n\nAnswer = A(C) - (A - B)(C)"
        ],
        [
          "\n\ndef trivia_total(A, B, C):\n  return (A - B) * C\n  \nprint(trivia_total(A, B, C))",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\nInput: (A, B, C)\n\ndef calculateTotalPoints(A, B, C):\n  return (A - B) * C\n\nAnswer: (A - B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (A-B)*C\n  \nExample:\ncalculatePoints(7, 2, 3)\n\nAnswer: 15",
          "\n\nAnswer = AC"
        ],
        [
          "\n\ndef totalPoints(a,b,c):\n  points = (a-b)*c\n  return points\n\nAnswer = totalPoints(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef points_scored(a, b, c): \n  return (a-b)*c\n\npoints_scored(A, B, C)",
          "\n\nAnswer = A*C - (A-B)C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 11 members total, but during a game 6 members didn't show up. If each member that did show up scored 9 points, how many points were scored total? ",
      "final_answer": 45.0,
      "index": 471
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 36.97317290306091,
      "templates": [
        "Each chocolate bar in a box cost $2. If a box had A bars total and Rachel sold all but B bars, how much money would she have made?\nWrite a Python function that returns the answer.",
        "Each chocolate bar in a box cost $2. If a box had A bars total and Rachel sold all but B bars, how much money would she have made?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef profit(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef bars_sold(A, B):\n  return (A - B) * 2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef makeMoney(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef moneyMade(A, B):\n  return (A - B) * 2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef chocolate_sales(A,B):\n  return (A-B)*2",
          " \n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef chocolate_sales(A, B):\n  return (A - B) * 2",
          "\n\nAnswer = $2A - $2B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2(A-B)"
        ],
        [
          "\n\ndef choc_bar_sales(A,B):\n  return (A - B)*2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef chocolate_bar_sales(A,B):\n    return (A-B)*2",
          "\n\nAnswer = A x 2 - B x 2"
        ],
        [
          " \n\ndef moneyMade(A,B):\n  return (A - B) * 2",
          "\nAnswer = 2A - 2B"
        ],
        [
          " \n\ndef money_made(A, B):\n    return (A-B) * 2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef make_money(a,b):\n  return (a-b)*2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\ndef calculateRevenue(A,B):\n  return (A-B)*2",
          "\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef chocolate_profit(A,B):\n  return (A - B) * 2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef make_money(A, B):\n  money = (A-B)*2\n  return money",
          "\n\nAnswer = $2A - $2B"
        ],
        [
          "\n\ndef choc_cost(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2A-2B"
        ],
        [
          "\n\ndef totalMoneyEarned(A, B):\n  return (A - B)*2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef bars_sold(A,B):\n  return (A-B)*2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef money_made (A, B):\n  return (A-B) * 2",
          "\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef number_of_bars_sold(A, B):\n  return (A - B) * 2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef money_made(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2A - 2B"
        ],
        [
          " \n\ndef chocolate_revenue(A, B):\n  return (A - B) * 2",
          "\nAnswer = 2A-2B"
        ],
        [
          "\n\ndef money_made (A,B):\n  return (A-B)*2",
          "\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef moneyMade(A,B):\n    return (A-B)*2",
          "\n\nAnswer = 2A - 2B"
        ],
        [
          "\n\ndef sell_choc(A, B):\n    return (A - B) * 2",
          "\n\nAnswer = 2A - 2B"
        ]
      ]
    },
    "source": {
      "question": " Each chocolate bar in a box cost $2. If a box had 13 bars total and Rachel sold all but 4 bars, how much money would she have made? ",
      "final_answer": 18.0,
      "index": 472
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 43.592658281326294,
      "templates": [
        "Isabel baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a Python function that returns the answer.",
        "Isabel baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef needed_flour(total_brownies, cups_per_brownie):\n  return total_brownies * cups_per_brownie;",
          " \nAnswer = (B - C) x C"
        ],
        [
          "\n\ndef flour_left(brownies, total, cups):\n  return (total - brownies) * cups\n\nprint(flour_left(A, B, C))",
          "\n\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef calculate_flour(brownies, total, cups):\n  return (total - brownies) * cups\n  \nanswer = calculate_flour(A, B, C)",
          "\nAnswer = (B - C) cups"
        ],
        [
          "\n\ndef totalFlour(a,b,c):\n  total = (b-a) * c\n  return total \n\nprint(totalFlour(10, 20, 3)) # total = 30",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef remaining_flour (total_brownies, cups_per_brownie):\n  return (total_brownies * cups_per_brownie)\n\nprint(remaining_flour(B, C))",
          "\n\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef remaining_flour(total, brownies):\n    return (total * cups_of_flour) - (brownies * cups_of_flour)\n\nremaining_flour(B, A)",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef calculateFlourNeeded(brownies,total,cups):\n  return (total-brownies)*cups\n\nprint(calculateFlourNeeded(A,B,C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          " \n\ndef calculateFlour(brownies, total, each):\n  needed = (total - brownies) * each\n  return needed",
          "\nAnswer = (B-A)*C"
        ],
        [
          "\n\ndef get_amount(A,B,C):\n  return (B - A) * C\n\nprint(get_amount(2, 20, 0.75))\n# Answer: 11.25",
          "\nAnswer =  (B - C) * C"
        ],
        [
          "\n\ndef baking_brownies (A, B, C):\n  return (B - A)*C\n\nanswer = baking_brownies(A, B, C)",
          "\nAnswer = B - (C * A)"
        ],
        [
          " \n\ndef flourNeeded(total, existing):\n  return (total - existing) * cups\n\nprint(flourNeeded(B, C))",
          "\n\nAnswer = (C)(B - A)"
        ],
        [
          "\n\ndef flour_needed(total, cups):\n  return (total * cups) - cups\n\nprint(flour_needed(B, C))",
          "\n\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef extra_flour(num_guests, num_brownies, cups_per_brownie):\n    return (num_guests - num_brownies) * cups_per_brownie\n\nprint(extra_flour(B, A, C))",
          "\n\nAnswer = (B-A) * C"
        ],
        [
          "\n\ndef flour_needed(brownies, total, cups):\n  return (total - brownies) * cups\n\nprint(flour_needed(A,B,C))",
          "\nAnswer = (B-A)*C"
        ],
        [
          "\n\ndef cups_needed(total, current):\n  return (total - current) * 2\n\nprint (cups_needed(B, C))",
          "\n\nAnswer = B - (A * C)"
        ],
        [
          "\n\ndef flour_needed(total_brownies, cups_per_brownie):\n  return total_brownies * cups_per_brownie\n\nflour_needed(B, C)",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef brownie_ingredient(total, used):\n  return (total - used) * cups",
          "\n\nAnswer = (B - (C*A)) cups of flour"
        ],
        [
          "\n\ndef remaining_flour(brownies, total, used):\n  return (total - brownies) * used\n\nremaining_flour(A, B, C)",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef brownies(A, B, C):\n  return (B - A) * C\n  \nprint(brownies(A, B, C))",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef calculateFlour(a,b,c):\n  return (b-a) * c\n\nprint(calculateFlour(brownies, total, cups))",
          "\n\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef needed_flour(num_started, num_needed):\n  return (num_needed - num_started) * C cups",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef browniesNeeded(A,B,C):\n  return (B-A)*C",
          "\nAnswer = B - (4C)"
        ],
        [
          "\n\ndef calculateFlour(noOfBrownies, totalNeeded):\n  return (totalNeeded - noOfBrownies) * 3\n\nprint(calculateFlour(A, B))",
          "\nAnswer = B - (C * A)"
        ],
        [
          " \n\ndef flourNeeded(existing, total, cupPerBrownie):\n  remaining = (total - existing) * cupPerBrownie\n  return remaining",
          "\n\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef flour_needed(total, cups):\n  return (total - cups) * cups\n\nprint(flour_needed(B, C))",
          "\n\nAnswer = (B - A) * C"
        ]
      ]
    },
    "source": {
      "question": " Isabel baked 3 brownies, but needed 5 total for her party. If she used 5 cups of flour on each one, how much cups of flour does she still need? ",
      "final_answer": 10.0,
      "index": 473
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 42,
      "duration": 37.34608602523804,
      "templates": [
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a Python function that returns the answer.",
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0,
        24.0,
        24.0
      ],
      "completions": [
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * B) - (A * C)\n\nremaining_problems(A, B, C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef remaining_problems (A, B, C):\n  return (A * (B - C)) \n \n print(remaining_problems(A,B,C))",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef grade_problems(A, B, C):\n  return A * (B - C)",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_problems_left(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C): \n  return (A * (B-C))\n\nprint(remaining_problems(A, B, C))",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * B) - (A * C)\n\nprint(remaining_problems(A, B, C))",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef num_of_problems(A, B, C):\n  return (A * (B - C))\n\nprint(num_of_problems(A, B, C))",
          "\n\nAnswer = (A*B) - C"
        ],
        [
          " \n\ndef num_problems(a, b, c):\n  return (a * (b - c))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_worksheets(A, B, C):\n    return (A*B) - C",
          " \nAnswer = (A x B x C) - A"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * B) - (A * C)\n\nremaining_problems(A, B, C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef more_problems(A, B, C):\n    return A * (B - C)",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef problem_grading(A, B, C):\n    return (A * (B - C))\n\nanswer = problem_grading(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A \u00d7 B) - C"
        ],
        [
          "\n\ndef worksheetGrading(A, B, C):\n    return (A * (B-C))",
          "\n\nAnswer = (A*B)-C"
        ],
        [
          "\n\ndef problemsToGrade(A, B, C): \n    return (A * (B-C))",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = AB - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))\n\nprint(remaining_problems(A, B, C))",
          "\nAnswer = A \u00d7 (B-C)"
        ],
        [
          "\n\ndef number_of_problems_left_to_grade(A, B, C):\n  return (A * (B - C))\n\nprint(number_of_problems_left_to_grade(A, B, C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C): \n  return (A * (B - C))\n\nprint(remaining_problems(A, B, C))",
          "\n\nAnswer = (A*B) - C"
        ],
        [
          "\n\ndef problemsLeftToGrade(A, B, C):\n  remainingWorksheets = B - C\n  totalProblems = A * remainingWorksheets\n  return totalProblems\n\nprint(problemsLeftToGrade(A, B, C))",
          "\nAnswer = (A \u00d7 B) - C"
        ],
        [
          " \n\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef grade_more_problems(A, B, C):\n  return (A * B) - C",
          "\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " A worksheet had 3 problems on it. If a teacher had 15 worksheets to grade and had already graded 7 of them, how many more problems does she have to grade? ",
      "final_answer": 24.0,
      "index": 474
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 44,
      "duration": 35.97841715812683,
      "templates": [
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $9 each from the ones who did tip, how much money did he earn?\nWrite a Python function that returns the answer.",
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $9 each from the ones who did tip, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0
      ],
      "completions": [
        [
          "\n\n\ndef waiter_earnings(A, B):\n    return (A-B)*9",
          "\n\nAnswer = 9 * A - 9 * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef waiter_earnings(A, B):\n  earnings = 9 * (A - B)\n  return earnings",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef get_tips(a,b):\n  return (a-b)*9\n\nprint(get_tips(a,b))",
          "\n\nAnswer = 9A \u2212 B"
        ],
        [
          "\n\ndef waiter_tips(a, b):\n  return (a - b)*9",
          "\n\nAnswer = 9A - 9B"
        ],
        [
          "\n\ndef earn_tips(A, B):\n  return (A - B) * 9 \n\nprint(earn_tips(A, B))",
          "\n\nAnswer = 9(A - B)"
        ],
        [
          "\n\ndef tipTotal(numA, numB):\n  return (numA-numB)*9\n\nprint(tipTotal(A, B))",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef waiter_tip(A, B):\n  return (A-B)*9",
          "\nAnswer = 9A - 0B"
        ],
        [
          "\n\ndef tipEarned(A, B):\n  return (A-B) * 9\n\nprint(tipEarned(A, B))",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef calculate_tip(customers, no_tip):\n  return (customers - no_tip) * 9\n\nprint(calculate_tip(A,B))",
          "\nAnswer = 9A - B"
        ],
        [
          "\n\ndef tip_calc(a, b):\n  return (a - b) * 9\n\nprint(tip_calc(a, b))",
          "\n\nAnswer = 9A - (B x 0) = 9A"
        ],
        [
          "\n\ndef get_tips(a,b):\n  return (a-b)*9\n\nprint(get_tips(A, B))",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef lunch_tip(A, B):\n  return (A-B) * 9\n\nprint(lunch_tip(A,B))",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef no_tip(A, B):\n    return (A - B)*9",
          "\n\nAnswer = 9xA - B"
        ],
        [
          "\n\ndef calculate_tips(a, b):\n  return a * 9 - b * 0 \n\nprint(calculate_tips(a, b))",
          "\nAnswer = 9A - B"
        ],
        [
          " \n\ndef waiter_tip(A, B):\n  return (A-B) * 9 \n\nprint(waiter_tip(A, B))",
          "\nAnswer = 9A - B"
        ],
        [
          "\n\ndef tipCalc(a,b):\n    return (a-b)*9\n\nprint(tipCalc(A,B))",
          "\n\nAnswer = 9*A - 9*B"
        ],
        [
          "\n\ndef tip_total(a,b):\n  return (a - b) * 9 \n\nprint(tip_total(a,b))",
          "\nAnswer = 9A - 0B"
        ],
        [
          "\n\ndef tip_amount(A, B):\n  return (A - B) * 9",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef tip_calculator(a, b):\n  return (a - b) * 9\n\nprint(tip_calculator(A, B))",
          "\nAnswer = 9A - 0B"
        ],
        [
          "\n\ndef lunch_tips(A, B):\n  return (A-B) * 9",
          "\n\nAnswer = 9A - B"
        ],
        [
          "\n\ndef tip_calculator(A, B):\n  return (A - B) * 9\n\nprint(tip_calculator(A, B))",
          "\nAnswer = 9A - B"
        ],
        [
          "\n\ndef calculate_tips():\n  return 9 * (A - B)",
          "\n\nAnswer = 9A - 0B"
        ]
      ]
    },
    "source": {
      "question": " At lunch a waiter had 7 customers and 4 of them didn't leave a tip. If he got $9 each from the ones who did tip, how much money did he earn? ",
      "final_answer": 27.0,
      "index": 475
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 16,
      "duration": 15.727679014205933,
      "templates": [
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a Python function that returns the answer.",
        "April's discount flowers was having a sale where each rose was A dollars. If April started with B roses and had C roses left, how much money did she earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0,
        27.0,
        27.0,
        27.0,
        27.0
      ],
      "completions": [
        [
          "\n\ndef calculate_earnings(A, B, C):\n  return (B - C)*A\n\nprint(calculate_earnings(A, B, C))",
          "\nAnswer = (B-C)*A"
        ],
        [
          "\n\ndef april_profit(A, B, C):\n   return (B - C) * A",
          "\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef april_earnings(A, B, C):\n    return (B - C) * A\n    \n#E.g. April's earnings when each rose was $1, she had 20 roses to start with and had 18 left = 2 * 1 = $2\nprint(april_earnings(1, 20, 18)) # Outputs:2",
          "\n\nAnswer = (B-C)*A"
        ],
        [
          "\n\ndef aprilEarnings (A, B, C):\n  return (B-C)*A",
          "\n\nAnswer = (B - C)*A"
        ],
        [
          "\n\ndef calculate_earned_money(A,B,C):\n  return (B-C)*A\n\nanswer = calculate_earned_money(A,B,C)",
          "\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef april_flowers_sale(a, b, c):\n  return (b-c)*a\n\nprint(april_flowers_sale(a, b, c))",
          "\n\nAnswer = (B - C) *A"
        ],
        [
          "\n\ndef money_from_sale(A,B,C):\n  return (B-C)*A",
          "\n\nAnswer = (B - C)A"
        ],
        [
          "\n\ndef discount_roses(a, b, c):\n  return (b-c) * a\n\n# If A=3, B=10, and C=5\ndiscount_roses(3, 10, 5) # returns 15",
          "\n\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " April's discount flowers was having a sale where each rose was 9 dollars. If April started with 11 roses and had 8 roses left, how much money did she earn? ",
      "final_answer": 27.0,
      "index": 476
    }
  },
  {
    "result": 34.0,
    "meta": {
      "n_calls": 40,
      "duration": 34.44623684883118,
      "templates": [
        "Tom bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Tom still have?\nWrite a Python function that returns the answer.",
        "Tom bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Tom still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        34.0,
        34.0
      ],
      "completions": [
        [
          "\n\ndef candy_amount(A, B, C):\n  return (A * C) - B\n\nprint(candy_amount(3, 5, 10))\n# 25",
          "\nAnswer = (A*C) - B"
        ],
        [
          "\n\ndef piecesLeft(A, B, C):\n  return (A*C - B)",
          "\nAnswer = A*C - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\n\ndef remaining_candy(A, B, C):\n    return (A - B) * C\n\nanswer = remaining_candy(5, 2, 10)\nprint answer # Returns 30",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_candy_left(A, B, C):\n  return (A - B) * C\n\nprint(pieces_candy_left(3, 1, 10)) # Expected output: 20",
          "\nAnswer = (A x C) - B"
        ],
        [
          "\n\ndef CandyPieces(A, B, C):\n  return (A - B) * C\n  \nAnswer = CandyPieces(A, B, C)",
          "\n\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return (A-B)*C",
          "\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef remaining_pieces(A, B, C): \n  return (A - B) * C",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef pieces_bought(A,B,C):\n  return (A - B) * C",
          "\n\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return A * C - B * C",
          "\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n  return A * C - B * C",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef num_pieces_left(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef remaining_candy(A, B, C):\n    return (A - B) * C\n\nprint(remaining_candy(2, 1, 10)) #returns 10",
          "\n\nAnswer = (A*C)-B"
        ],
        [
          " \n\ndef candy_pieces(A, B, C):\n  return (A - B) * C\n\nprint(candy_pieces(3, 1, 8))\n# Result: 16",
          "\nAnswer = (A - B) x C"
        ],
        [
          "\n\ndef calPiece(A, B, C):\n  return (A - B) * C\n\nanswer = calPiece(A, B, C)",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef chocolate_candy(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy(a, b, c): \n  answer = (a*c) - b\n  return answer\n  \nprint(candy(A, B, C))",
          "\nAnswer = (A \u00d7 C) - B"
        ],
        [
          "\n\ndef chocolate_candy(A,B,C):\n    return (A-B)*C\n\nanswer = chocolate_candy(A,B,C)",
          "\nAnswer = A*C-B"
        ],
        [
          "\n\ndef pieces_of_candy(A, B, C):\n  return A*C - B*C",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candyPieces(a, b, c):\n  return (a * c) - b",
          "\nAnswer = (A x C) - B"
        ],
        [
          "\n\ndef candy_for_tom(a, b, c): \n  return (a - b) * c",
          "\nAnswer = A*C - B"
        ]
      ]
    },
    "source": {
      "question": " Tom bought 14 boxes of chocolate candy and gave 8 to his little brother. If each box has 3 pieces inside it, how many pieces did Tom still have? ",
      "final_answer": 18.0,
      "index": 477
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 41.12015986442566,
      "templates": [
        "At a restaurant each adult meal costs $2 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $2 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef restaurant_cost(A, B):\n  return A * 2\n  \nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef group_meal_costs(A, B):\n  return A * 2\n\nprint(group_meal_costs(A, B))",
          "\nAnswer = 2A"
        ],
        [
          " \n\ndef restaurant_cost(adult, child):\n  total_cost = adult*2 \n  return total_cost\n\n# Call the function \nrestaurant_cost(A, B)",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  cost = A * 2\n  return cost\n  \nprint(restaurant_bill(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_bill(A,B):\n  return A*2\n\nprint(restaurant_bill(A,B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(a, b):\n  return a*2\n\nprint(meal_cost(a, b))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(adults, kids):\n  return adults * 2\n  \nprint(restaurant_cost(A, B))",
          "\nAnswer = $2A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A*2 + B*0\n  \nmeal_cost(A, B)",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef RestaurantCharge(A, B):\n    return A * 2\n\nprint(RestaurantCharge(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef adult_kids_meal(A, B):\n  return A * 2 \n\nprint(adult_kids_meal(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(adults, kids):\n  return adults * 2\n  \nprint(restaurant_cost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_meal_cost(adult_people, kid_people):\n  return adult_people*2\n\nprint(restaurant_meal_cost(A,B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(adults, kids):\n  #Return meal cost for the group\n  return adults * 2    # Adults pay for each meal\n  \nprint(meal_cost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef calculate_cost(A, B):\n  return A * 2\n\ncost = calculate_cost(A, B)\nprint(\"The total cost for the group to eat is ${}.\".format(cost))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  total_cost = A * 2\n  return total_cost\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_tab(A, B):\n    cost = A * 2\n    return cost\n\nprint(restaurant_tab(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          " \n\ndef mealCost(a,b): \n  return a * 2\n\nprint(mealCost(a,b))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 2\n\nmeal_cost(A,B)",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(a,b):\n    cost=a*2\n    return cost\n\ntotal_cost=meal_cost(a,b)\nprint(total_cost)",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A * 2 \n  \nprint(restaurant_cost(A,B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurantCost(adults, kids):\n  return adults * 2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurantcost(A, B):\n    return A*2 + B*0\n\nrestaurantcost(A, B)",
          "\nAnswer = $2A"
        ],
        [
          "\n\ndef group_meal_cost(A, B): \n  return 2*A; \n  \nprint(group_meal_cost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  cost = A * 2\n  return cost\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant(A,B): \n  return A*2\n\nprint(restaurant(A,B))",
          "\nAnswer = 2A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $2 and kids eat free. If a group of 15 people came in and 9 were kids, how much would it cost for the group to eat? ",
      "final_answer": 12.0,
      "index": 478
    }
  },
  {
    "result": 32.0,
    "meta": {
      "n_calls": 16,
      "duration": 12.341541767120361,
      "templates": [
        "Edward earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "Edward earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        32.0,
        32.0,
        32.0,
        32.0,
        32.0
      ],
      "completions": [
        [
          "\n\ndef money_earned (A, B, C):\n    return (B - C) * A\n\nmoney_earned (5, 10, 3)\n\nIt returns the answer of 35.",
          "\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef earn_money(A, B, C):\n    return A*(B-C)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef lawns_earned(A, B, C):\n  return (B - C) * A\n\nlawns_earned(A, B, C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          " \n\ndef calculate_earnings(A,B,C):\n    return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef answer(A,B,C):\n  return A * (B - C)",
          "\nAnswer = A*(B-C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef moneyEarned(A, B, C):\n    return (B - C) * A\n\nprint(moneyEarned(10, 20, 5)) # Output: 150",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef lawn_money(A, B, C):\n  return A * (B-C)",
          "\nAnswer = A(B - C)"
        ],
        [
          " \n\ndef mowLawns(a,b,c):\n return (b-c)*a\n\nAnswer: mowLawns(A,B,C)",
          "\nAnswer = A \u00d7 (B-C)"
        ]
      ]
    },
    "source": {
      "question": " Edward earned 4 dollars for each lawn he mowed. If he had 17 lawns to mow, but forgot to mow 9 of them, how much money did he actually earn? ",
      "final_answer": 32.0,
      "index": 479
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 36,
      "duration": 37.12328386306763,
      "templates": [
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a Python function that returns the answer.",
        "A new building needed A windows. The builder had already installed B of them. If it takes C hours to install each window, how long will it take him to install the rest?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef calculateTimeNeeded(B, C):\n    return (A - B) * C\n\n#A = number of windows needed, B = number of windows already installed, C = hours per window\nanswer = calculateTimeNeeded(B, C)",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef add_windows(A, B, C):\n    return (A - B) * C\n\nprint(add_windows(10, 5, 2))\n# 10",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef installer(A, B, C):\n  return (A - B) * C\n\nprint(installer(25, 10, 2))\n#This will print 40, as it will take 40 hours to install the remaining 15 windows.",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef windowInstall(A, B, C): \n  return (A - B) * C\n  \nprint(windowInstall(A, B, C))",
          "\nAnswer = (A - B)*C hours"
        ],
        [
          "\n\ndef time_to_install (A,B,C):\n  return (A-B)*C\n  \ntime_to_install(A,B,C)",
          "\nAnswer = (A-B) \u00d7 C hours"
        ],
        [
          "\n\ndef calculateWindows(A,B,C):\n\treturn (A - B)*C\n\nanswer = calculateWindows(A,B,C)",
          "\nAnswer = (24 - B) * C"
        ],
        [
          "\n\ndef calc_time_for_windows(A, B, C):\n  time_for_rest = (A - B) * C\n  return time_for_rest\n\nprint(calc_time_for_windows(A, B, C))",
          "\n\nAnswer = (A - B) \u00d7 C"
        ],
        [
          "\n\ndef calculate_time(a, b, c):\n  return (a-b)*c\n  \ncalculate_time(A, B, C)",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_to_install(a,b,c):\n  installation_time = (a-b)*c\n  return installation_time\n  \nanswer = time_to_install(A,B,C)",
          "\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef number_of_hours(a, b, c):\n  return (a - b) * c\n  \nprint(number_of_hours(A, B, C))",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef calcWindowTime(numWindows, numAlreadyInstalled, hoursPerWindow):\n  remainingWindows = numWindows - numAlreadyInstalled\n  totalTimeHours = remainingWindows * hoursPerWindow\n  return totalTimeHours  \n\ncalcWindowTime(A, B, C)",
          "\nAnswer = (A-B) \u00d7 C"
        ],
        [
          "\n\ndef total_install_time(windows_installed,windows_needed,hours_per_window):\n  total_windows = windows_needed - windows_installed\n  total_hours = total_windows * hours_per_window\n  return total_hours\n\nprint(total_install_time(10,20,2)) # outputs 20",
          "\nAnswer = (A-B) * C"
        ],
        [
          "\n\ndef time_to_install(windows_installed, hours_per_window):\n  total_windows = windows_installed + B\n  total_hours = total_windows * hours_per_window\n  return total_hours\n\nanswer = time_to_install(A, C)",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef time_to_install(A, B, C):\n  return (A-B) * C\n\nprint(time_to_install(10, 5, 2))\n# 10 hours",
          "\n\nAnswer = (A - B) * C hours"
        ],
        [
          "\n\ndef window_installation_time(A, B, C): \n    return (A - B) * C\n    \n Answer: window_installation_time(A,B,C)",
          " \nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef installWindows(A, B, C): \n  return (A - B) * C\n\nprint(installWindows(20, 10, 4))\n\nThis will return an answer of 40 hours.",
          "\nAnswer = (A-B)*C hours"
        ],
        [
          "\n\ndef windowsTime(A, B, C):\n  return (A-B)*C\n  \n# This will return the number of hours for the rest of the windows to be installed.",
          "\nAnswer = (A - B) * C Hours"
        ],
        [
          "\n\ndef total_hours(A,B,C):\n  return (A - B) * C\n\nprint(total_hours(A,B,C))",
          "\n\nAnswer = (A-B) * C hours"
        ]
      ]
    },
    "source": {
      "question": " A new building needed 11 windows. The builder had already installed 4 of them. If it takes 8 hours to install each window, how long will it take him to install the rest? ",
      "final_answer": 56.0,
      "index": 480
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 40,
      "duration": 34.71150183677673,
      "templates": [
        "Tom bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Tom still have?\nWrite a Python function that returns the answer.",
        "Tom bought A boxes of chocolate candy and gave B to his little brother. If each box has C pieces inside it, how many pieces did Tom still have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0,
        65.0,
        65.0
      ],
      "completions": [
        [
          "\n\ndef chocolate_candy(A, B, C):\n  return (A*C)-B",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef chocolate_calc(A, B, C): \n    return (A * C) - B",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C):\n  return (A - B) * C\n\nprint(candy_pieces(5, 2, 10)) # returns 30",
          "\n\nAnswer = (A * C) - B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef find_pieces(A, B, C):\n    return (A - B) * C\n\nprint(find_pieces(3, 2, 5))\nThis should print out 15.",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_left(A,B,C):\n  return (A-B)*C\n  \npieces_left(3,2,5) # 15",
          "\n\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef candy_calculator(A, B, C):\n    return (A - B) * C\n\nprint(candy_calculator(3, 2, 10))\n# Output: 20",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef totalCandy(A, B, C):\n  return (A - B) * C\n\nanswer = totalCandy(A, B, C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_pieces(A, B, C): \n  return (A - B) * C",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef pieces_of_chocolate(A, B, C):\n  return A * C - B * C",
          "\n\nAnswer = (A*C) - B"
        ],
        [
          "\n\ndef candy(A,B,C): \n  return A*C - B*C",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candydivision(A,B,C):\n  return (A-B)*C\n\nAnswer: Tom still has (A-B)*C pieces of candy.",
          "\n\nAnswer = A*C - B"
        ],
        [
          "\n\ndef candy_remaining(A, B, C):\n  return (A-B)*C\n\nprint(candy_remaining(10, 5, 20)) \n\n# Output: 100",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef pieces_of_candy(A, B, C):\n  return (A - B) * C\n\nanswer = pieces_of_candy(5, 2, 10)\nprint(answer) # Output: 30",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candy_left(A, B, C):\n  return (A - B) * C\n\nprint(candy_left(4, 2, 10)) # Output: 20",
          "\n\nAnswer = A x C - B"
        ],
        [
          "\n\ndef num_candy(A, B, C):\n  return (A - B) * C",
          "\nAnswer = (A*C) - B"
        ],
        [
          "\n\ndef pieces_of_candy(A, B, C):\n  return (A-B)*C",
          "\nAnswer = A * C - B"
        ],
        [
          "\n\ndef candyCount(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = (A*C) - B"
        ],
        [
          "\n\ndef pieces_of_candy(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = (A * C) - B"
        ],
        [
          "\n\ndef candyPieces(A,B,C):\n  return (A - B) * C\n\nprint(candyPieces(5, 2, 10))\n\nResult: 40",
          "\nAnswer = A*C - B"
        ],
        [
          "\n\ndef num_candies(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C - B"
        ]
      ]
    },
    "source": {
      "question": " Tom bought 12 boxes of chocolate candy and gave 7 to his little brother. If each box has 6 pieces inside it, how many pieces did Tom still have? ",
      "final_answer": 30.0,
      "index": 481
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.34761595726013,
      "templates": [
        "John had A action figures, but needed B total for a complete collection. If each one costs $6, how much money would he need to finish his collection?\nWrite a Python function that returns the answer.",
        "John had A action figures, but needed B total for a complete collection. If each one costs $6, how much money would he need to finish his collection?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef finish_collection (action_figures, collection_needed):\n  return 6 * (collection_needed - action_figures)\n\nanswer = finish_collection(A, B)",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n\nprint(complete_collection(A, B))",
          "\nAnswer = $(6 * B)"
        ],
        [
          "\n\ndef completeCollection(A, B):\n    return (B-A)*6",
          "\n\nAnswer = $(6 x B)"
        ],
        [
          "\n\ndef total_cost(A, B):\n  return (B - A) * 6\n\nprint(total_cost(A, B))",
          "\nAnswer = $(6*B)"
        ],
        [
          "\n\ndef totalCost(A, B): \n  return (B - A) * 6\n\ntotalCost(A, B)",
          "\n\nAnswer = ($6 * B)"
        ],
        [
          "\n\ndef collection(A, B):\n  return (B - A) * 6\n  \n# This function takes two parameters, A and B. A is the amount of action figures John currently has, and B is the total amount of action figures needed for a complete collection. This function returns the amount of money needed to finish the collection, with each action figures costing six dollars.",
          "\n\nAnswer = $(6 \\times B)"
        ],
        [
          "\n\ndef total_cost(A, B): \n    return (B - A) * 6\n\nprint(total_cost(A, B))",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef completeCollection(a, b):\n\treturn (b - a) * 6",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef moneyForCollection(A, B):\n    return (B-A) * 6\n\nmoneyForCollection(A, B)",
          "\n\nAnswer = 6 x B"
        ],
        [
          "\n\ndef totalCollection(A, B): \n  return (B - A) * 6\n\n# For example, if John has 7 action figures and needs 12 total, he would need $36 to complete his collection.\ntotalCollection(7, 12) = 36 \n\n",
          "\n\nAnswer = (B - A) x $6"
        ],
        [
          "\n\ndef CollectionCost(actionFigures, totalNeeded):\n  return actionFigures * 6 + totalNeeded * 6\n\nprint(CollectionCost(A, B))",
          "\n\nAnswer = $(6 * B)"
        ],
        [
          " \n\ndef completeCollection(A, B): \n  return (B-A) * 6",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef complete_collection(A, B):\n  return (B - A) * 6\n  \nprint(complete_collection(A, B))",
          "\n\nAnswer = $(6 * B)"
        ],
        [
          "\n\ndef collection_cost(A, B):\n    cost = (B - A) * 6\n    return cost\n\nprint(collection_cost(A, B))",
          "\n\nAnswer = 6($B - $A)"
        ],
        [
          "\n\ndef collection_total(A, B):\n  return (B-A)*6\n\nprint(collection_total(A, B))",
          "\n\nAnswer = $6 x B"
        ],
        [
          "\n\ndef complete_collection(a, b):\n  return 6*(b-a)",
          "\nAnswer = $6B"
        ],
        [
          " \n\ndef collectionCost(A,B):\n  return (B - A) * 6\n\nprint(collectionCost(A,B))",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef calculate_collection_cost(A, B):\n  return (B - A) * 6\n\ncost = calculate_collection_cost(A,B)\nprint('John needs $' + str(cost) +  ' to complete his collection.')",
          "\n\nAnswer = $6 \u00d7 B"
        ],
        [
          "\n\ndef totalCost(A, B):\n  return (B - A) * 6\n\nprint(totalCost(A, B))",
          "\nAnswer = $(6) \\times (B) = $(6B)"
        ],
        [
          "\n\ndef moneyForCollection(A, B):\n  return 6 * (B - A)\n\n#returns 6 * (B - A)",
          "\n\nAnswer = $36"
        ],
        [
          "\n\ndef calculate_collection_cost(action_figures, total):\n  return action_figures*6 + total*6\n\nanswer = calculate_collection_cost(A, B)",
          "\n\nAnswer = $(6 \\times B)"
        ],
        [
          "\n\ndef collection(A, B):\n  return (B-A)*6\n  \nexample: \ncollection(20, 60)\nAnswer: 180",
          "\n\nAnswer = $6B"
        ],
        [
          "\n\ndef collection_cost(A, B):\n  return (B - A) * 6\n\ncollection_cost(A, B)",
          "\nAnswer = $6B"
        ],
        [
          "\n\ndef complete_collection(A, B): \n  return (B - A) * 6",
          "\n\nAnswer = $(6 * B)"
        ],
        [
          "\n\ndef johns_fun(A, B):\n  return (B-A)*6\n\njohns_fun(A,B)",
          "\n\nAnswer = $6B"
        ]
      ]
    },
    "source": {
      "question": " John had 6 action figures, but needed 11 total for a complete collection. If each one costs $6, how much money would he need to finish his collection? ",
      "final_answer": 30.0,
      "index": 482
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 40.265931129455566,
      "templates": [
        "At a restaurant each adult meal costs $8 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $8 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef restaurant_cost(A,B):\n    return A * 8\n\nprint(restaurant_cost(A,B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 8\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurantCost(A, B):\n  return 8 * A\n\n# Sample Usage\nprint(restaurantCost(4, 2))\n# Output: 32",
          " \nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_meal_cost(A, B):\n  return A *8\n\nprint(restaurant_meal_cost(A, B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_payment(A, B):\n  return A*8\n\nprint(restaurant_payment(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_total(A, B): \n    return A*8\n\nprint(restaurant_total(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          " \n\ndef restaurant_cost(adult_group,kids_group):\n  return adult_group*8\n\nprint(restaurant_cost(A,B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef meal_cost(a, b):\n  total_cost = a * 8\n  return total_cost\n\ncost = meal_cost(a, b)\nprint (cost)",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n    cost = 8 * A\n    return cost\n\nprint(restaurant_cost(A, B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef total_cost(adults, children):\n  total = adults * 8\n  return total\n\nprint(total_cost(A, B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef cost_of_meal(A, B):\n  return A*8;",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef total_cost(adults, kids):\n  cost = adults*8\n  return cost\n\nprint(total_cost(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_cost(A,B):\n    return A*8\n\nprint(restaurant_cost(A,B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  total_cost = A * 8\n  return total_cost\n \nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant(A, B):\n  return A * 8\n\nprint(restaurant(A,B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  return A * 8\n  \nprint(restaurant_bill(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          " \n\ndef restaurant_bill(A, B):\n  bill = A*8\n  return bill\n\nprint(restaurant_bill(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n    return A * 8\n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef DinnerCost(A,B):\n  return A * 8\n\nprint(DinnerCost(A,B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef calculate_meal_cost(a, b):\n  return (a * 8)\n\ntotal_cost = calculate_meal_cost(a, b)\nprint(total_cost)",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 8\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n    return 8 * A\n\nprint(restaurant_bill(A, B))",
          "\nAnswer = 8A"
        ],
        [
          "\n\ndef total_cost(A, B):\n  return A * 8\n\ntotal_cost(A, B)",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef meal_cost(A,B):\n  return A * 8\n\nprint(meal_cost(A,B))",
          "\n\nAnswer = 8A"
        ],
        [
          "\n\ndef restaurant_bill(A,B):\n    return A * 8\n\nprint(restaurant_bill(A,B))",
          "\nAnswer = 8A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $8 and kids eat free. If a group of 11 people came in and 2 were kids, how much would it cost for the group to eat? ",
      "final_answer": 72.0,
      "index": 483
    }
  },
  {
    "result": 27.0,
    "meta": {
      "n_calls": 46,
      "duration": 36.69730591773987,
      "templates": [
        "At the fair Kaleb bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Kaleb spend riding the ferris wheel?\nWrite a Python function that returns the answer.",
        "At the fair Kaleb bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Kaleb spend riding the ferris wheel?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        27.0,
        27.0
      ],
      "completions": [
        [
          "\n\ndef ferris_wheel(A, B, C):\n    return (A - B)*C",
          "\n\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef money_spent(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef ferrisWheelSpend(A, B, C): \n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef spend_money(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef tickets_spent(A, B, C):\n    tickets_spent = (A - B) * C\n    return tickets_spent",
          "\nAnswer = (A-B)*C"
        ],
        [
          "\n\ndef kaleb_cost(A,B,C):\n    return (A-B)*C\n\nkaleb_cost(10,6,2) \n# Kaleb spent 8 dollars",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferris_wheel_expense (A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef kaleb_spent(A, B, C):\n  return (A - B) * C",
          " \nAnswer = A - B * C"
        ],
        [
          "\n\ndef spent_ferris_wheel(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef money_spent_riding_ferris_wheel(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\n\ndef calculateAmountSpent (A, B, C):\n  return (A - B)*C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef spend_ferris_wheel(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef money_spent(A, B, C): \n  return (A - B) * C \n\nmoney_spent(A, B, C)",
          "\nAnswer = A - B \u00d7 C"
        ],
        [
          "\n\ndef kaleb_spent(A, B, C):\n  return (A-B)*C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ride_ferris_wheel(a,b,c):\n  return (a-b)*c",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef kaleb_spent(a, b, c):\n  return (a - b) * c\n\nprint(kaleb_spent(a, b, c))",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calc_expense(A,B,C):\n  return (A-B)*C",
          "\nAnswer = A - B \u00d7 C"
        ],
        [
          "\n\ndef money_spent(A, B, C):\n    return (A - B) * C",
          "\nAnswer = A-B*C"
        ],
        [
          "\n\ndef CalculateExpense(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferrisWheelCost(A, B, C):\n  return (A - B) * C",
          " \nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculate(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculate_amount(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferris_wheel_spent(A, B, C):\n return (A-B)*C",
          "\nAnswer =A-B*C"
        ]
      ]
    },
    "source": {
      "question": " At the fair Kaleb bought 6 tickets. After riding the ferris wheel he had 3 tickets left. If each ticket cost 9 dollars, how much money did Kaleb spend riding the ferris wheel? ",
      "final_answer": 27.0,
      "index": 484
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 26,
      "duration": 26.19104504585266,
      "templates": [
        "Tiffany baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a Python function that returns the answer.",
        "Tiffany baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef needed_flour(A, B, C): \n  return (B - A) * C\n  \nprint(needed_flour(A, B, C))",
          "\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef needed_flour(A,B,C):\n  return (B-A)*C\n\nprint(needed_flour(A,B,C))",
          "\n\nAnswer = (B-A) * C"
        ],
        [
          "\n\ndef remaining_flour(A, B, C):\n  return (B - A) * C\n\nprint(remaining_flour(A,B,C))",
          "\nAnswer = (B - A) * C"
        ],
        [
          "\n\ndef browniesF(A, B, C):\n    return (B-A)*C\n\nprint (browniesF(A, B, C))",
          "\nAnswer = B - (C*A)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remaining_flour(a, b, c):\n    return (b - a) * c\n\nprint(remaining_flour(A, B, C))",
          "\nAnswer = (B/A) \u00d7 C"
        ],
        [
          "\n\ndef flourNeeded(A, B, C):\n  return (B - A) * C\n\nprint(flourNeeded(A, B, C))",
          "\nAnswer = (B - C) x C"
        ],
        [
          "\n\ndef additional_flour(brownies_needed, flour_per_brownie):\n  return (brownies_needed * flour_per_brownie)\n  \nanswer = additional_flour(B, C)",
          "\nAnswer = (B - A)  \u00d7 C"
        ],
        [
          "\n\ndef calculateFlour(A, B, C):\n  return (B - A) * C\n\nprint(calculateFlour(A, B, C))",
          "\nAnswer = B - (A * C)"
        ],
        [
          "\n\ndef brownieFlour(A,B,C):\n  totalFlourNeeded = (A * C) - B  \n  return totalFlourNeeded\n  \nprint(brownieFlour(15, 20, 3)) #returns 15",
          "\nAnswer = B-C"
        ],
        [
          "\n\ndef calculate_flour(brownies,total,cups):\n  return (total * cups) - (brownies * cups)\n  \nprint(calculate_flour(A,B,C))",
          "\nAnswer = (B - (A * C)) cups of flour"
        ],
        [
          "\n\ndef calculateFlour(A, B, C):\n  return (B*C)-(A*C)\n\nprint(calculateFlour(A, B, C))",
          "\n\nA*C-B=Answer \nAnswer = 0"
        ],
        [
          "\n\ndef calculateFlour(A, B, C):\n    neededFlour = (B - A) * C\n    return neededFlour\n\nprint(calculateFlour(A, B, C))",
          "\n\nAnswer = (B - (A * C)) Cups"
        ],
        [
          "\n\ndef remaining_flour_amount(A, B, C):\n  return (B - A) * C\n  \n# Call the function\nremaining_flour_amount(A, B, C)",
          "\nAnswer = (B - (A*C)) cups"
        ]
      ]
    },
    "source": {
      "question": " Tiffany baked 8 brownies, but needed 17 total for her party. If she used 8 cups of flour on each one, how much cups of flour does she still need? ",
      "final_answer": 72.0,
      "index": 485
    }
  },
  {
    "result": 21.0,
    "meta": {
      "n_calls": 22,
      "duration": 19.471787929534912,
      "templates": [
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a Python function that returns the answer.",
        "In a video game, each enemy defeated gives you A points. If a level has B enemies total and you destroy all but C of them, how many points would you earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        21.0,
        21.0,
        21.0,
        21.0,
        21.0
      ],
      "completions": [
        [
          "\n\ndef pointsEarned(A, B, C):\n  return (B-C)*A\n  \npointsEarned(10,12,2)  # returns 100",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef PointsEarned (A, B, C):\n  return A*(B-C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef point_calculation(A, B, C):\n    return (B-C)*A",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (B - C) * A\n  \nprint(calculatePoints(5, 10, 2))\n# 40",
          "\n\nAnswer = A*(B-C)"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points_earned(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef PointCalc(A, B, C):\n  return (B - C) * A\n\nprint(PointCalc(10, 20, 5))\n# Output: 150",
          "\n\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef pointsEarned(A, B, C):\n  return (B - C) * A\n\nprint(pointsEarned(10, 20, 15)) # Output: 50",
          "\n\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return (B - C) * A\n\npoints_earned(10, 20, 15) # 50",
          "\n\nAnswer = A(B - C)"
        ],
        [
          "\n\ndef points(a,b,c): \n  return (a*(b-c))\n  \npoints(A,B,C)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef enemy_points(a, b, c):\n  return (b-c)*a\n\nprint(enemy_points(2, 10, 8)) # 16",
          "\nAnswer = A(B-C)"
        ]
      ]
    },
    "source": {
      "question": " In a video game, each enemy defeated gives you 7 points. If a level has 11 enemies total and you destroy all but 8 of them, how many points would you earn? ",
      "final_answer": 21.0,
      "index": 486
    }
  },
  {
    "result": 56.0,
    "meta": {
      "n_calls": 12,
      "duration": 10.262662887573242,
      "templates": [
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a Python function that returns the answer.",
        "A magician was selling magic card decks for A dollars each. If he started with B decks and by the end of the day he had C left, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        56.0,
        56.0,
        56.0,
        56.0,
        56.0
      ],
      "completions": [
        [
          "\n\ndef total_earn_magician(A, B, C):\n    return (B - C) * A \n\nprint(total_earn_magician(5, 10, 2))\n# 40",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef magic_card_sale(A, B, C):\n  return (B - C) * A\n  \nprint(magic_card_sale(3, 10, 5))  # returns 45",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef earned_money(A, B, C):\n  return (B-C)*A\n\nprint(earned_money(2, 10, 6))\n# Output: 8",
          "\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef moneyEarned(A,B,C):\n  return (B - C) * A\nmoneyEarned(5, 10, 2)\n# returns 40",
          "\n\nAnswer = (B - C) * A"
        ],
        [
          "\n\ndef money_earned(A, B, C):\n  return (B - C) * A",
          "\n\nAnswer = (A * B) - (A * C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef earn_money(a,b,c):\n  return (b - c) * a\n\n#example\n\nearn_money(5, 10, 5) = 25",
          "\nAnswer = A(B - C)"
        ]
      ]
    },
    "source": {
      "question": " A magician was selling magic card decks for 7 dollars each. If he started with 16 decks and by the end of the day he had 8 left, how much money did he earn? ",
      "final_answer": 56.0,
      "index": 487
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 43.65693402290344,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef totalLives(A, B, C):\n  return (A-B)*C\n\nprint(totalLives(5,2,3))\n\nThis would return 9.",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A-B)*C\n\nprint(total_lives(5, 2, 3))\n# Output: 9",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return A * C - B * C\n  \nprint(total_lives(A, B, C))",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(a, b, c):\n  return (a-b)*c\n\ntotal_lives(A, B, C)",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\ntotal_lives(5, 3, 3) # Answer: 12",
          "\nAnswer = A\u00d7C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n  return (A - B) * C\n\nlives = calculate_lives(A, B, C)\nprint(lives)",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return (A - B) * C\n\ntotal_lives(4, 2, 3) # Output: 12",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef findTotalLives(A, B, C):\n  return (A - B) * C\n\nprint(findTotalLives(10, 5, 3)) # 45",
          "\n\nAnswer = A \u00d7 C Lives"
        ],
        [
          "\n\ndef total_lives(A, B, C): \n  return (A - B) * C\n\n#Example\ntotal_lives(6,3,2)\n#returns 6",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef lives_remaining(A, B, C):\n  return (A - B) * C\n\nanswer = lives_remaining(A, B, C)",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n    return (A-B)*C\n\ntotal_lives(5,2,3)\n\nThis returns 15.",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(a, b, c): \n  return (a * c) - b \n  \ntotal_lives(A, B, C)",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * C - B * C\n\nprint(total_lives(A, B, C))",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n    return (A - B) * C\n\nprint(total_lives(8, 2, 5))  # Output: 30",
          "\n\nAnswer = A*C"
        ],
        [
          "\n\ndef remaining_lives(A, B, C): \n  return (A-B) * C\n\nprint(remaining_lives(3, 1, 3))  # returns 6",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\n# call the function \nprint(total_lives(10, 2, 3)) # Prints 24",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  total_lives = (A - B) * C\n  return total_lives\n\nprint(total_lives(5, 2, 3))\n# Output: 15",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef num_lives(A, B, C):\n    return A*B*C\n\nprint(num_lives(A, B, C))",
          "\nAnswer = A*C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A - B) * C\n\n# Call the function\nlives_left(4, 2, 3)\n\n# returns 18",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n    return A * C - B * C",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef get_total_lives(A, B, C):\n  return (A - B) * C\n\n# example\nprint(get_total_lives(5, 2, 3)) # prints 15",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef calc_lives(A, B, C):\n  return (A - B) * C\n\nprint(calc_lives(5, 2, 3)) # Returns 9",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef video_game_lives(players, lives):\n  return players * lives",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A-B)*C\n\nprint(total_lives(10,2,3))\nOutput: 24",
          "\n\nAnswer = A x C Lives"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A-B)*C",
          "\n\nAnswer = A * C"
        ]
      ]
    },
    "source": {
      "question": " There were 13 friends playing a video game online when 8 players quit. If each player left had 6 lives, how many lives did they have total? ",
      "final_answer": 30.0,
      "index": 488
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 42,
      "duration": 32.1342670917511,
      "templates": [
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn?\nWrite a Python function that returns the answer.",
        "At lunch a waiter had A customers and B of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef tips_earned(A, B):\n  return (A-B) * 3",
          "\nAnswer = 3*A - 3*B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_earnings(num_customers, no_tip):\n    return (num_customers - no_tip) * 3\n\nprint(calculate_earnings(A, B))",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip(A, B):\n  return 3 * (A - B)",
          "\n\nAnswer = 3 \u00d7 (A - B)"
        ],
        [
          "\n\ndef get_tip(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          " \n\ndef tip_amount(n):\n  return n*3 \n\nprint(tip_amount(A-B))",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef get_total_tip(a, b):\n  return (a - b) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef earnedTip(A, B):\n    return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_total_tips(A,B):\n  return (A-B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tips(A,B):\n  return 3 * (A-B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_calc(a, b):\n    return (a - b) * 3\n\nprint(tip_calc(A, B))",
          "\nAnswer = 3(A-B)"
        ],
        [
          "\n\ndef tip_earnings(a,b):\n  return (a-b)*3",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tip(num_customers, no_tip):\n  tip_each = 3\n  return num_customers * tip_each - no_tip * tip_each\n\nprint(calculate_tip(A, B))",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tips(A, B):\n  return A - B * 3",
          "\n\nAnswer = 3(A - B)"
        ],
        [
          "\n\ndef calculate_tip(A, B):\n  return 3*(A-B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_calc(A, B): \n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_calculator(A, B):\n  return (A - B) * 3",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip_earnings(a,b): \n    return (a - b) * 3",
          "\n\nAnswer = $3A - $0(B) = $3A"
        ],
        [
          "\n\ndef total_tips(A, B): \n  return 3*(A-B)",
          "\nAnswer = $3A - $3B"
        ],
        [
          "\n\ndef tip_earnings(num_customers, num_no_tip):\n    return 3 * (num_customers - num_no_tip)",
          "\nAnswer = 3A - B"
        ],
        [
          "\n\ndef tip(A, B):\n    return 3*(A-B)",
          "\n\nAnswer = 3A - B"
        ],
        [
          "\n\ndef calculate_tips(A, B):\n  tips = (A - B) * 3\n  return tips\n\ncalculate_tips(A, B)",
          "\nAnswer = 3A - 3B"
        ]
      ]
    },
    "source": {
      "question": " At lunch a waiter had 7 customers and 5 of them didn't leave a tip. If he got $3 each from the ones who did tip, how much money did he earn? ",
      "final_answer": 6.0,
      "index": 489
    }
  },
  {
    "result": 63.0,
    "meta": {
      "n_calls": 36,
      "duration": 27.0890212059021,
      "templates": [
        "At the fair Adam bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Adam spend riding the ferris wheel?\nWrite a Python function that returns the answer.",
        "At the fair Adam bought A tickets. After riding the ferris wheel he had B tickets left. If each ticket cost C dollars, how much money did Adam spend riding the ferris wheel?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        63.0,
        63.0,
        63.0
      ],
      "completions": [
        [
          "\n\ndef money_spent(A, B, C):\n  return (A - B) * C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef money_spent(A, B, C):\n  return (A - B) * C",
          "\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef ticketCost(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = (A - B) * C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef spend_money_ferris_wheel(A, B, C):\n  return (A-B)*C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferris_wheel_cost(A, B, C):\n  cost = (A - B) * C\n  return cost",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          " \n\ndef money_spent(A, B, C): \n    return (A - B)*C",
          "\nAnswer = A - B \u00d7 C"
        ],
        [
          "\n\ndef spend_on_ferris_wheel(A,B,C):\n  return (A-B)*C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef cost_of_ferris_wheel(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferris_wheel_spend(A, B, C):\n  return (A-B)*C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculate_ferris_wheel_spending(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferrisWheel(A,B,C):\n  return (A-B)*C",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef calculateCost(a, b, c):\n  return (a-b)*c",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef ferrisWheel(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ],
        [
          " \n\ndef ferris_wheel_cost(A, B, C):\n  return (A-B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          "\n\ndef money_spent(A,B,C):\n  return (A-B)*C",
          "\nAnswer = A - B \u00d7 C"
        ],
        [
          "\n\ndef calculate_spending(A, B, C):\n    return (A - B) * C",
          "\nAnswer = A - B * C"
        ],
        [
          " \n\ndef ride_ferris_wheel(a, b, c):\n  return (a - b) * c",
          "\n\nAnswer = A - B * C"
        ],
        [
          "\n\ndef money_spent(A, B, C):\n    return (A - B) * C",
          "\n\nAnswer = A - B * C"
        ]
      ]
    },
    "source": {
      "question": " At the fair Adam bought 10 tickets. After riding the ferris wheel he had 3 tickets left. If each ticket cost 9 dollars, how much money did Adam spend riding the ferris wheel? ",
      "final_answer": 63.0,
      "index": 490
    }
  },
  {
    "result": 111.0,
    "meta": {
      "n_calls": 48,
      "duration": 41.75607514381409,
      "templates": [
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a Python function that returns the answer.",
        "A worksheet had A problems on it. If a teacher had B worksheets to grade and had already graded C of them, how many more problems does she have to grade?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        111.0
      ],
      "completions": [
        [
          "\n\ndef more_problems(A, B, C):\n    return (A * B) - C\n\nprint(more_problems(A, B, C))",
          "\n\nAnswer = (A * B) - C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef remainingProblems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef numProblemsLeft(A, B, C):\n  return A * (B - C);",
          "\nAnswer = (A*B) - C"
        ],
        [
          "\n\ndef num_problems(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A x B) - C"
        ],
        [
          " \n\ndef grade_problems(A, B, C):\n    return (A * (B - C))\n\nprint(grade_problems(A, B, C))",
          "\n\nAnswer = (A*B) - C"
        ],
        [
          "\n\ndef worksheet_problems(A, B, C):\n  return (A * B) - (A * C)",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef problems_to_grade(a, b, c):\n    return (a * b) - c\n\nprint(problems_to_grade(A, B, C))",
          " \nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef more_problems(A, B, C):\n    return (A * B) - (A * C)\n\n# example\nmore_problems(10, 5, 2) \n# returns 40",
          "\nAnswer = (A x B) - C"
        ],
        [
          " \n\ndef find_remaining_problems(A, B, C):\n  return (A * B) - C",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef num_problems(A, B, C):\n    return (A * B) - (C * A)\n\nprint(num_problems(A, B, C))",
          " \nAnswer = (A x B) - C"
        ],
        [
          " \n\ndef problem_grade(A, B, C):\n  return (B-C)*A\n  \nhigher_grade = problem_grade(A, B, C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef num_questions(A, B, C):\n  return (A*(B-C))\n  \nanswer = num_questions(A, B, C)",
          "\n\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef num_of_problems_left(A, B, C):\n    return (A * B) - (A * C)\n\nprint(num_of_problems_left(A, B, C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          " \n\ndef grade_problems(A, B, C):\n    return A * (B - C)",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  remaining_problems = (A * B) - (A * C)\n  return remaining_problems\n\nprint(remaining_problems(A, B, C))",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n    return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef remaining_worksheets(A, B, C):\n  return (A * B) - C\n\nremaining_worksheets(A, B, C)",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef grade_problems(A, B, C):\n  return (A * B) - (A * C)\n\ngrade_problems(A, B, C)",
          "\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A * (B - C))\n\nremaining_problems(A, B, C)",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef total_problems(A, B, C):\n  return (A * (B - C))",
          "\n\nAnswer = (A * B) - C"
        ],
        [
          "\n\ndef total_problems(A,B,C):\n  return (A * (B - C))\n\nprint(total_problems(A,B,C))",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = (A x B) - C"
        ],
        [
          "\n\ndef getNumberOfProblemsLeft(A, B, C):\n  return (A * (B - C))",
          "\nAnswer = (A * B) - C"
        ],
        [
          " \nFunction definition:\n\ndef totalGrade(A, B, C):\n  return (A*(B-C))\n\nCall function:\n\ntotalGrade(A, B, C)",
          "\nAnswer = (A * B) - C"
        ]
      ]
    },
    "source": {
      "question": " A worksheet had 7 problems on it. If a teacher had 17 worksheets to grade and had already graded 8 of them, how many more problems does she have to grade? ",
      "final_answer": 63.0,
      "index": 491
    }
  },
  {
    "result": 12.0,
    "meta": {
      "n_calls": 42,
      "duration": 38.63544511795044,
      "templates": [
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a Python function that returns the answer.",
        "A trivia team had A members total, but during a game B members didn't show up. If each member that did show up scored C points, how many points were scored total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        12.0
      ],
      "completions": [
        [
          "\n\ndef pointsScored(A, B, C):\n  return (A - B) * C\n  \npointsScored(A, B, C)",
          "\n\nAnswer = A*C-B*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points_scored (A, B, C):\n  return (A-B)*C\n\nprint(points_scored(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(a, b, c):\n  return (a - b) * c\n  \ntotal_points(A, B, C)",
          "\n\nAnswer = (A - B) * C"
        ],
        [
          "\n\ndef calcScore(A, B, C):\n  return (A - B) * C\n\nAnswer:\n(A - B) * C",
          "\n\nAnswer = A*C - (A-B)*C"
        ],
        [
          "\n\ndef FindTotalScore(A, B, C): \n  return (A - B) * C\n\nprint(FindTotalScore(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef calculatePoints(A, B, C):\n  return (A - B) * C\n  \nprint(calculatePoints(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points_scored(A, B, C):\n  return (A-B)*C\n\nprint(total_points_scored(A, B, C))",
          "\n\nAnswer = A * C - (A-B) * C"
        ],
        [
          "\n\ndef total_points(a,b,c):\n  return (a-b)*c\n\nprint(total_points(A,B,C))",
          "\nAnswer = (A-B) * C"
        ],
        [
          " \n\ndef calculateScore(A, B, C):\n  return (A - B) * C\n\ncalculateScore(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  return (A - B) * C\n  \ntotalPoints(10, 2, 5) \n# returns 40",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A, B, C):\n  total = (A - B) * C\n  return total",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalScore(A, B, C):\n  return (A-B)*C\n  \ntotalScore(A, B, C)",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef get_total_points(A, B, C):\n  return (A - B) * C\n\n# Example usage\nprint(get_total_points(10, 2, 5))\n# Output: 40",
          "\nAnswer = A x C - (A - B) x C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n\ntotal_points(8, 2, 10) # returns 60",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef points_scored(A, B, C):\n  return (A - B) * C\n\npoints_scored(10, 2, 30)\n# Returns 360",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          " \n\ndef points_scored(A, B, C):\n  return (A-B) * C\n  \nprint(points_scored(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points(A, B, C):\n  return (A - B) * C\n\ntotal_points(A, B, C)",
          "\n\nAnswer = A*C - (A-B)C"
        ],
        [
          "\n\ndef total_points_scored(a, b, c):\n  return (a - b) * c\n\nprint(total_points_scored(10, 3, 5)) //output: 35",
          "\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef totalPoints(A,B,C):\n  return (A - B) * C\n\nprint(totalPoints(A,B,C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ],
        [
          "\n\ndef total_points_scored(a, b, c):\n  return (a - b) * c\n\ntotal_points_scored(A, B, C)",
          "\n\nAnswer = A * C - B"
        ],
        [
          "\n\ndef count_score(A, B, C):\n  return (A-B)*C\n\nprint(count_score(A, B, C))",
          "\n\nAnswer = A * C - (A - B) * C"
        ]
      ]
    },
    "source": {
      "question": " A trivia team had 9 members total, but during a game 3 members didn't show up. If each member that did show up scored 2 points, how many points were scored total? ",
      "final_answer": 12.0,
      "index": 492
    }
  },
  {
    "result": 30.0,
    "meta": {
      "n_calls": 42,
      "duration": 34.917709827423096,
      "templates": [
        "Mike had A video games but B of them weren't working. If he wanted to sell the working games for $5 each, how much money could he earn?\nWrite a Python function that returns the answer.",
        "Mike had A video games but B of them weren't working. If he wanted to sell the working games for $5 each, how much money could he earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        30.0
      ],
      "completions": [
        [
          "\n\ndef working_games(A, B):\n  return (A - B) * 5\n\nprint(working_games(A, B))",
          "\n\nAnswer = 5 * A - 5 * B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef total_earnings(num_working, price):\n    return num_working * price\n\ntotal_earnings(A,5)",
          "\n\nAnswer = 5 x A - 5 x B"
        ],
        [
          "\n\ndef get_profits(A, B):\n    return (A - B) * 5\n\nprint(get_profits(A, B))",
          "\n\nAnswer = 5 x A - B"
        ],
        [
          "\n\ndef sellGames(numWorking):\n\treturn numWorking * 5\n\n# Answer\nMike could earn $50.",
          "\n\nAnswer = 5(A-B)"
        ],
        [
          "\n\ndef sell_games(working_games,price):\n    return working_games * price\n\nprint(sell_games(A-B,5))",
          "\n\nAnswer = 5 x (A - B)"
        ],
        [
          "\n\ndef calculate_earnings(A, B):\n  earnings = (A - B) * 5\n  return earnings\n\nprint(calculate_earnings(A, B))",
          "\n\nAnswer = 5 x A"
        ],
        [
          "\n\ndef moneyEarned(workingGames):\n  return workingGames * 5\n\nmoneyEarned(A - B)",
          "\n\nAnswer = 5 \u00d7 A - 5 \u00d7 B"
        ],
        [
          "\n\ndef calculate_earnings(games_working):\n  return games_working * 5\n\nprint(calculate_earnings(A-B))",
          "\n\nAnswer = (A - B) * 5"
        ],
        [
          "\n\ndef calculate_earnings(number_of_working_games):\n\tearnings = number_of_working_games * 5\n\treturn earnings\n\n#Example\ncalculate_earnings(A - B)",
          "\n\nAnswer = 5 \u00d7 A - 5 \u00d7 B"
        ],
        [
          "\n\ndef calculate_amount(A,B):\n  return (A-B)*5\n\nprint(calculate_amount(A,B))",
          "\n\nAnswer = $5 x A - $5 x B"
        ],
        [
          " \n\ndef calc_earnings(working_games):\n  return working_games * 5",
          "\n\nAnswer = 10 x 5 = $50"
        ],
        [
          "\n\ndef calculate_earnings(num_working_games):\n  return num_working_games * 5",
          "\nAnswer = 5 \u00d7 A - 5 \u00d7 B"
        ],
        [
          "\n\ndef videoGamesEarnings(A, B):\n  return (A-B) * 5\n  \nprint(videoGamesEarnings(A, B))",
          "\n\nAnswer = 5 x A - 5 x B"
        ],
        [
          "\n\ndef money_earned(A, B):\n  return (A - B) * 5\n\nprint(money_earned(A, B))",
          "\nAnswer = 5 x A - 5 x B"
        ],
        [
          "\n\ndef earn_money(games):\n  working_games = 0\n  for game in games:\n    if game[\"is_working\"]:\n      working_games += 1\n  \n  return working_games * 5",
          "\n\nAnswer = 5 x A"
        ],
        [
          "\n\ndef calculate_earnings(A, B):\n    return (A - B) * 5\n\nprint(calculate_earnings(A,B))",
          "\n\nAnswer = 5 x A"
        ],
        [
          "\n\ndef money_earned(num_working_games):\n  return num_working_games * 5",
          "\n\nAnswer = 5 x A - 5 x B"
        ],
        [
          "\n\ndef sell_games(working_games):\n  return working_games * 5",
          "\n\nAnswer = $20"
        ],
        [
          "\n\ndef sell_video_games(working_games):\n    return 5 * working_games\n\nprint(sell_video_games(A - B))",
          "\n\nAnswer = (A - B) * 5"
        ],
        [
          "\n\ndef earn_money(A, B):\n\u00a0\u00a0\u00a0\u00a0return (A - B) * 5\n\nearn_money(A, B)",
          "\n\nAnswer = 5 x A - B"
        ],
        [
          "\n\ndef monEarned(x, y):\n    return x*y\n\nprint(monEarned(A-B,5))",
          "\nAnswer = 5 x A"
        ]
      ]
    },
    "source": {
      "question": " Mike had 15 video games but 9 of them weren't working. If he wanted to sell the working games for $5 each, how much money could he earn? ",
      "final_answer": 30.0,
      "index": 493
    }
  },
  {
    "result": 36.0,
    "meta": {
      "n_calls": 16,
      "duration": 11.65334701538086,
      "templates": [
        "Edward earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a Python function that returns the answer.",
        "Edward earned A dollars for each lawn he mowed. If he had B lawns to mow, but forgot to mow C of them, how much money did he actually earn?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        36.0,
        36.0,
        36.0,
        36.0,
        36.0
      ],
      "completions": [
        [
          "\n\ndef lawnMowing(A, B, C):\n  return A * (B-C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef moneyEarned(A, B, C):\n  return (B - C) * A\n\nprint(moneyEarned(5, 10, 1)) # output: 45",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef edward_earns(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef calculateEarnings(A, B, C):\n  return A * (B - C)",
          "\nAnswer = (A * (B-C))"
        ],
        [
          "\n\ndefEarned(A, B, C):\n  return A*(B-C)",
          "\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef lawn_mowing_payout(A, B, C):\n    return A * (B - C)",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef edsMowing(a,b,c):\n  return a * (b-c)",
          "\nAnswer = A * (B-C)"
        ],
        [
          "\n\ndef moneyEarned(A, B, C):\n  return (B-C)*A\n\nmoneyEarned(A, B, C)",
          "\nAnswer = A(B-C)"
        ]
      ]
    },
    "source": {
      "question": " Edward earned 9 dollars for each lawn he mowed. If he had 6 lawns to mow, but forgot to mow 2 of them, how much money did he actually earn? ",
      "final_answer": 36.0,
      "index": 494
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 46,
      "duration": 36.81036305427551,
      "templates": [
        "At a restaurant each adult meal costs $2 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a Python function that returns the answer.",
        "At a restaurant each adult meal costs $2 and kids eat free. If a group of A people came in and B were kids, how much would it cost for the group to eat?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef totalCost(a, b): \n    adultCost = a*2 \n    totalCost = adultCost + 0 \n    return totalCost \n\ntotalCost(a, b)",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A * 2 + B * 0\n  \n#Example\nrestaurant_cost(2, 3) # returns 4",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef adult_munches(A,B):\n  return A*2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef meal_cost(A, B):\n  return A * 2\n\nprint(meal_cost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef adultMealCost(A, B):\n  return A * 2\n\nprint(adultMealCost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_meal_cost (A, B):\n    return (2 * A)\n    \nprint(restaurant_meal_cost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(adult, kids):\n    totalcost = adult * 2\n    return totalcost\n\nprint(restaurant_cost(A,B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef adult_meal_cost(A, B):\n    return 2*A\n\nprint(\"The total cost for the group to eat is: $\" + str(adult_meal_cost(A, B)))",
          "\n\nAnswer = 2A"
        ],
        [
          " \n\ndef restaurantCost(A, B):\n    return A * 2 \nprint(restaurantCost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  return (2 * A)\n  \nprint(restaurant_bill(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef adult_meal(a,b):\n  return a*2\n\nprint(adult_meal(a,b))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_meal_cost(A, B):\n  return A*2\n\ncost = restaurant_meal_cost(A, B)\nprint('The total cost is: $', cost)",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef mealCost(A, B):\n  return A*2\n\nprint(mealCost(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef group_meal_cost(a,b):\n  return a*2 + b*0\n  \n#Example \ngroup_meal_cost(5,2) \nreturns 10",
          "  \nAnswer = 2A"
        ],
        [
          "\n\ndef mealCost(A, B):\n  return A * 2\n  \nprint(mealCost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef mealCost(A, B):\n  return 2 * A\n  \nprint(mealCost(A, B))",
          " \nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_bill(A, B):\n  return A * 2\n\nprint(restaurant_bill(A, B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef total_cost(A, B):\n    return A * 2\n\ntotal_cost(A, B)",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef lunch_cost(A, B):\n  return A*2\n\ntotal_cost = lunch_cost(A, B)\nprint(f\"The total cost for the group to eat is ${total_cost}.\")",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef mealCost(A, B):\n  cost = A * 2\n  return cost\n  \nprint(mealCost(A, B))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(A,B):\n  return A*2 + B*0\n  \nprint(restaurant_cost(A,B))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef restaurant_cost(A, B):\n  return A * 2\n\nprint(restaurant_cost(A, B))",
          "\n\nAnswer = 2A"
        ]
      ]
    },
    "source": {
      "question": " At a restaurant each adult meal costs $2 and kids eat free. If a group of 9 people came in and 2 were kids, how much would it cost for the group to eat? ",
      "final_answer": 14.0,
      "index": 495
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 44.739742279052734,
      "templates": [
        "Chloe baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a Python function that returns the answer.",
        "Chloe baked A brownies, but needed B total for her party. If she used C cups of flour on each one, how much cups of flour does she still need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef remaining_flour(A, B, C):\n    remaining_flour = (B - A) * C\n    return remaining_flour\n\nprint(remaining_flour(A, B, C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef total_flour(A, B, C):\n  return (B - A) * C\n\nprint(total_flour(5, 15, 0.5))\n7.5",
          "\nAnswer = B - (C \u00d7 A)"
        ],
        [
          "\n\ndef brownie_ingredients(A, B, C):\n    ingredient_amount = (B * C) - (A * C)\n    return ingredient_amount\n\nprint(brownie_ingredients(A, B, C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef bake_brownies(a, b, c):\n  return (b-a) * c\n\nprint(bake_brownies(a, b, c))",
          "\nAnswer = (B - (C * A)) cups"
        ],
        [
          "\n\ndef needed_flour(total, used):\n  return (total * used) - used\n\nprint(needed_flour(B, C))",
          "\nAnswer = B - (C*A)"
        ],
        [
          "\n\ndef NeededFlour(a, b, c):\n  return (b * c) - (a * c)",
          "\n\nAnswer = (B - C) cups"
        ],
        [
          "\n\ndef brownies(A, B, C):\n  return (B - A) * C",
          "\nAnswer = (B - A) x C"
        ],
        [
          "\n\ndef remaining_flour(brownies_baked, total_needed, cups_per_brownie):\n  return (total_needed -brownies_baked) * cups_per_brownie\n\nremaining_flour(A,B,C)",
          "\nAnswer = (B - C) x cups of flour"
        ],
        [
          "\n\ndef get_needed_flour(a, b, c):\n  return (b - a) * c\n\nneeded_flour = get_needed_flour(a, b, c)\nprint(\"Chloe still needs \" + str(needed_flour) + \" cups of flour.\")",
          "\n\nAnswer = B-C"
        ],
        [
          "\n\ndef total_flour_needed(A, B, C):\n  return (B - A) * C",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef how_much_flour (brownies, total, cups):\n  return (total - brownies) * cups \n\nprint (how_much_flour(A, B, C))",
          "\n\nAnswer = (B/A) * C"
        ],
        [
          "\n\ndef brownie_calc(A, B, C):\n  return (B - A) * C\n\nanswer = brownie_calc(A, B, C)",
          "\nAnswer = B - (C x A)"
        ],
        [
          "\n\ndef how_many_cups(A, B, C):\n  return (B - A) * C\n  \n# Calling the function \nprint(how_many_cups(6, 30, 1)) \n\n# Output \n24",
          "\nAnswer = (B - C) cups"
        ],
        [
          "\n\ndef brownieCups(A, B, C):\n  return (B-A)*C\n\nprint(brownieCups(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef cupsOfFlourNeeded (Brownies, Total, C):\n  return (Total - Brownies) * C\n  \nprint(cupsOfFlourNeeded(A, B, C))",
          "\nAnswer = B/C - A"
        ],
        [
          "\n\ndef calculateFlourNeeded(browniesNeeded, cupsPerBrownie):\n  return (browniesNeeded * cupsPerBrownie)\n\nanswer = calculateFlourNeeded(B, C)",
          "\n\nAnswer = (B - (C * A)) cups"
        ],
        [
          "\n\ndef flour_cups(A, B, C):\n    return (B - A) * C\n\nprint(flour_cups(A, B, C))",
          "\nAnswer = B- (C x A)"
        ],
        [
          "\n\ndef needFlour(A,B,C): \n  return (B * C) - (A * C)",
          "\nAnswer = (B - A) x C"
        ],
        [
          "\n\ndef get_flour_total(a, b, c):\n  return (b * c) - (a * c)",
          "\nAnswer = (B - C) cups"
        ],
        [
          "\n\ndef flourNeeded(A, B, C):\n  return (B - A) * C\n\n#Example\nflourNeeded(4, 12, 2)\n# returns 16",
          "\nAnswer = B- (C*A)"
        ],
        [
          "  \n\ndef flour_needed(a, b, c):\n  return (b - a) * c\n\nprint(flour_needed(brownies, total, cups))",
          "\nAnswer = B/C - A"
        ],
        [
          "\n\ndef flour_needed(A, B, C):\n    return (B - A) * C\n\nprint(flour_needed(A, B, C))",
          "\nAnswer = B - (C * A)"
        ],
        [
          "\n\ndef flour_needs(a,b,c):\n  return (b - a) * c\n\nprint(flour_needs(A, B, C))",
          "\nAnswer = (B - C) \\times 1"
        ],
        [
          "\n\ndef brownieBake(A, B, C):\n  return (B-A) * C\n  \nprint(brownieBake(A,B,C))",
          "\nAnswer = (B - C) cups"
        ],
        [
          "\n\ndef FlourNeeded(Brownies,Total,Cups):\n  return (Total-Brownies)*Cups\n\nprint(FlourNeeded(A,B,C))",
          "\n\nAnswer = (B - C) cups of flour"
        ]
      ]
    },
    "source": {
      "question": " Chloe baked 7 brownies, but needed 16 total for her party. If she used 6 cups of flour on each one, how much cups of flour does she still need? ",
      "final_answer": 54.0,
      "index": 496
    }
  },
  {
    "result": 24.0,
    "meta": {
      "n_calls": 46,
      "duration": 40.08294320106506,
      "templates": [
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a Python function that returns the answer.",
        "There were A friends playing a video game online when B players quit. If each player left had C lives, how many lives did they have total?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        24.0
      ],
      "completions": [
        [
          "\n\ndef lives():\n  return A * C\n  \nprint(lives())",
          "\nAnswer = A*C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_lives(A, B, C):\n    return (A * C) - B\n\ntotal_lives = calculate_lives(A, B, C)",
          "\nAnswer = A * C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A - B) * C\n\nprint(lives_total(5, 2, 3))\n# Output: 15",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\ntotal_lives(10, 3, 5) # returns 75",
          "\nAnswer = A*C"
        ],
        [
          "\n\ndef calculate_lives(A, B, C):\n  return (A-B) * C \n  \nanswer = calculate_lives(A, B, C)",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A - B) * C\n\nprint(total_lives(3, 2, 5)) \n# This will print out 15, since 3 players had 5 lives each to begin with and 2 players quit.",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * B * C\n\nprint(total_lives(4, 2, 3))  # Output: 24",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A-B)*C\n\nlives_left(5, 2, 3)\n# returns 12",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef remainingLives(A, B, C):\n  return (A - B) * C",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef totalLives(A, B, C):\n  return (A - B) * C\n\nprint(totalLives(10, 2, 3))  # Answer = 24",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef lives_total(A, B, C):\n  return (A - B) * C\n\nprint(lives_total(5, 2, 3)) # output: 12",
          "\n\nAnswer = (A \u00d7 C) + B"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return (A-B)*C\n\nprint(total_lives(6,2,3))\n# Output: 12",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef calculateLives(A, B, C):\n  return (A - B) * C \n  \nprint(calculateLives(5, 2, 3)) # Output: 12",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef totalLives(a, b, c):\n    return (a * c) - b\n\n#Example\ntotalLives(4, 2, 3) --> 10",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef lives_left(A, B, C):\n  return (A - B) * C\n\nlives_left(10, 5, 3)\n# 45",
          "\n\nAnswer = A * C"
        ],
        [
          "\n\ndef total_lives(a,b,c):\n  return (a * c) - (b * c)\nprint(total_lives(A,B,C))",
          "\nAnswer = A*C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return (A-B)*C\n  \ntotal_lives(5, 2, 3)\n\n# Result:\n15",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef get_lives_total(A, B, C):\n  return (A - B) * C",
          "\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef get_lives(A, B, C):\n  return (A - B) * C\n\nprint(get_lives(5, 3, 3))  # expected output: 12",
          "\n\nAnswer = A x C"
        ],
        [
          "\n\ndef num_lives_left(A,B,C): \n  total_lives = (A-B) * C\n  return total_lives\n\nprint(num_lives_left(10,2,3)) \n# Output: 24",
          "\n\nAnswer = A x C lives"
        ],
        [
          "\n\ndef online_game(a, b, c):\n  return (a - b) * c\n\nprint(online_game(10, 2, 5)) # 40",
          "\nAnswer = A x C"
        ],
        [
          "\n\ndef total_lives(A, B, C):\n  return A * B * C",
          "\n\nAnswer = A \u00d7 C"
        ],
        [
          "\n\ndef total_lives(A,B,C):\n  return (A-B)*C\n\nprint(total_lives(7,3,4)) #This prints 24",
          "\n\nAnswer = A x C"
        ]
      ]
    },
    "source": {
      "question": " There were 8 friends playing a video game online when 3 players quit. If each player left had 3 lives, how many lives did they have total? ",
      "final_answer": 15.0,
      "index": 497
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 38.807122230529785,
      "templates": [
        "Sam invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 2, how many should he buy?\nWrite a Python function that returns the answer.",
        "Sam invited A friends to a birthday party, but B couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 2, how many should he buy?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef number_of_cupcakes(num_guests):\n    return num_guests * 2",
          "\n\nAnswer = 2x (number of people)\nwhere 'x' is the number of friends that A invited\n"
        ],
        [
          "\n\ndef cupcakes (a, b):\n  return (a * 2) - b * 2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef buy_cupcakes(num_guests):\n    return num_guests*2",
          " \n\nAnswer = 2A"
        ],
        [
          "\n\ndef calculate_cupcakes(num_invited):\n    return num_invited * 2\n\n# Example\nresult = calculate_cupcakes(5)\nprint(result) # prints 10",
          "\n\nAnswer = 2 x (A + 1)"
        ],
        [
          "\n\ndef num_cupcakes(num_friends):\n  return num_friends * 2\n\nprint(num_cupcakes(A - 1))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef calculate_cupcakes(numA, numB):\n  return 2 * (numA - numB)\n\ncalculate_cupcakes(A, B)",
          "\n\nAnswer = 2 x (A + 1)"
        ],
        [
          "\n\ndef cupcake_calc(invited_people):\n  return invited_people * 2\n\nprint(cupcake_calc(A))",
          "\n\nAnswer = 2 x (A + 1)"
        ],
        [
          "\n\ndef birthdayCupcakes(numFriends):\n  #numFriends is the number of people invited\n  return numFriends*2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef calculateCupcakes(numGuests):\n  return numGuests * 2\n\nnumGuests = A - 1 # Subtract 1 since B couldn't come\nprint(calculateCupcakes(numGuests)) # Output the number of cupcakes",
          "\n\nAnswer = 2x + 2, where x = number of people invited."
        ],
        [
          "\n\ndef cupcakesForParty(numFriends): \n  return numFriends * 2 \n\nprint(cupcakesForParty(A))",
          "\n\nAnswer = 2x, where x = number of people invited + 1"
        ],
        [
          "\n\ndef cupcakeCount(A):\n  return (2 * A)",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef num_cupcakes(num_attendees):\n    return num_attendees * 2",
          "\nAnswer = 2 \u00d7 (A + 1)"
        ],
        [
          "\n\ndef cupcakes(num_friends):\n    return 2 * num_friends",
          "\n\nAnswer = (2 x A) + B"
        ],
        [
          "\n\ndef buy_cupcakes(num_invited):\n  num_cupcakes = num_invited * 2\n  return num_cupcakes\n\nprint(buy_cupcakes(A))",
          "\nAnswer = 2A"
        ],
        [
          " \n\ndef cupcakes(A):\n  return A * 2",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef calculate_cupcakes(num_invitees):\n  return num_invitees * 2",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef calculate_cupcakes(num_invitees):\n  return num_invitees * 2",
          "\nAnswer = 2 \u00d7 A"
        ],
        [
          "\n\ndef cupcakes(A):\n  return A * 2\n\nprint(cupcakes(A))",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef cupcakes_for_guests(num_guests):\n  return num_guests * 2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef cupcakes_needed(num_guests):\n  return num_guests * 2\n \n#example\nprint(cupcakes_needed(10)) #prints 20",
          "\n\nAnswer = 2 x (A + 1)"
        ],
        [
          " \n\ndef calc_cupcakes(num):\n  return num * 2\n\nnum_friends = A \ncupcakes = calc_cupcakes(num_friends -1) \nprint(cupcakes)",
          "\nAnswer = (2 * A) + 2"
        ],
        [
          "\n\ndef buy_cupcakes(a, b):\n  total_guests = a - b\n  total_cupcakes = total_guests * 2\n  return total_cupcakes\n\nbuy_cupcakes(a, b)",
          "\nAnswer = 2x, where x is the number of friends A invited to the party."
        ],
        [
          "\n\ndef calculate_cupcakes(num_of_people):\n  return num_of_people * 2\n\nnum_of_people = A - 1  # A - B\nprint(\"Number of cupcakes:\", calculate_cupcakes(num_of_people))",
          "\n\nAnswer = 2A"
        ],
        [
          "\n\ndef cupcakes(num_attendees): \n  return num_attendees * 2",
          "\nAnswer = 2A"
        ],
        [
          "\n\ndef cupcakes_needed(num_people):\n  return num_people * 2",
          "\n\nAnswer = 2A"
        ]
      ]
    },
    "source": {
      "question": " Sam invited 9 friends to a birthday party, but 6 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly 2, how many should he buy? ",
      "final_answer": 6.0,
      "index": 498
    }
  },
  {
    "result": 72.0,
    "meta": {
      "n_calls": 26,
      "duration": 18.64408826828003,
      "templates": [
        "Megan earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a Python function that returns the answer.",
        "Megan earned A points for each bag of cans she recycled. If she had B bags, but didn't recycle C of them, how many points would she have earned?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        72.0,
        72.0,
        72.0,
        72.0,
        72.0
      ],
      "completions": [
        [
          "\n\ndef calculatePoints(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B-C)"
        ],
        [
          "\n\ndef recycle_points(A,B,C):\n  return A * (B-C)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points_calc(A, B, C):\n  return A * (B - C)",
          "\n\nAnswer = A * (B - C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef points_earned (A, B, C):\n  return A*(B-C)",
          "\nAnswer = A(B - C)"
        ],
        [
          " \n\ndef points(A, B, C):\n  return A * (B-C)",
          "\nAnswer = A x (B - C)"
        ],
        [
          "\n\ndef CanPoints(A, B, C):\n  return A * (B-C)",
          "\n\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef points_earned(bags, un_recycled): \n  return (bags - un_recycled) * A",
          "\nAnswer = A(B-C)"
        ],
        [
          "\n\ndef points_earned(a, b, c):\n  return a * (b - c)",
          "\nAnswer = A * (B - C)"
        ],
        [
          "\n\ndef points(A, B, C):\n  return A * (B-C)",
          "\n\nAnswer = A \u00d7 (B - C)"
        ],
        [
          "\n\ndef points_earned(A, B, C):\n    return A * (B - C)",
          "\n\nAnswer = AB - C"
        ],
        [
          "\n\ndef calcPoints(A,B,C):\n  return A * (B-C)",
          "\nAnswer = A(B-C)"
        ]
      ]
    },
    "source": {
      "question": " Megan earned 8 points for each bag of cans she recycled. If she had 14 bags, but didn't recycle 5 of them, how many points would she have earned? ",
      "final_answer": 72.0,
      "index": 499
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 30,
      "duration": 23.882972240447998,
      "templates": [
        "Will had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Will had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef toy_calculator(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_toys(A, B, C):\n  return (A-B)/C\n\nbuy_toys(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef toys(A, B, C): \n  return (A - B) / C\n\nanswer = toys(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_remaining_funds(A, B, C): \n    return (A - B)/C\n  \nprint(calculate_remaining_funds(A, B, C))",
          "\nAnswer =  (A-B)/C"
        ],
        [
          "\n\ndef remaining_money(A, B, C):\n  return (A-B)/C\n  \nmoney_left = remaining_money(A, B, C)\nprint(money_left)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef get_c_toys(a, b):\n  c = a - b\n  return c\n\nprint(get_c_toys(A,B))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toy_calculator(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A - B) // C",
          " \nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n    return (A - B) // C\n\nanswer = calculate_toys(A, B, C)\nprint(\"Will can buy\", answer, \"toys with the money he had left.\")",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef money_left(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef toy_budget(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numberOfToys (A, B, C): \n    return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  remain_amount = A - B\n  num_of_toys = remain_amount // C\n\n  return num_of_toys",
          "\nAnswer =  A - B / C"
        ]
      ]
    },
    "source": {
      "question": " Will had 57 dollars. If he spent 27 bucks on a new game, how many 6 dollar toys could he buy with the money he had left? ",
      "final_answer": 5.0,
      "index": 500
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 48,
      "duration": 42.62265205383301,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef cages(A,B,C):\n    return (A - B) // C\n    \nprint(cages(A,B,C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C): \n  return (A - B) // C\n\nprint(calculate_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numOfCages(A,B,C):\n  return (A-B)//C\n\nprint(numOfCages(14,5,2)) # Outputs: 5",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B) // C\n \nnum_cages(10, 4, 2)\n# Output: 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A,B,C):\n    return (A-B)//C + ((A-B)%C > 0)\n\nAnswer:\ncages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef findCages(A, B, C):\n  return (A - B) // C\n  \nanswer = findCages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n    return (A - B) // C\n\nprint(num_cages(A, B, C))",
          "\n\n((A-B)/C) = Answer \nAnswer = ((A-B)/C)"
        ],
        [
          "\n\ndef numCages(A,B,C):\n  return (A-B)//C\n  \nExample:\n\nnumCages(6,2,3)\n\nThis would return 2, since 6 puppies - 2 sold = 4 puppies - leaving 2 cages with 3 puppies in each cage.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n  return (A - B) // C\n  \nprint(calculateCages(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B) // C\n\nprint(num_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B)//C\n  \n#answer:\nnum_cages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_num_cages(A,B,C): \n  num_cages = (A - B) // C\n  return num_cages\n\nprint(get_num_cages(A,B,C))",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef cages_used(a,b,c):\n  return (a-b)//c\n  \nprint(cages_used(10,3,2))\n# Output: 4",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateCages(A,B,C):\n    return (A - B) // C\n\nprint(calculateCages(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A-B)//C\n  \n#Example\ncages(10,4,2)\n#Returns 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n  return (A-B)//C + (A-B)%C\n\nprint(numCages(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B) // C\n  \nprint(num_cages(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store(A, B, C):\n  return (A-B)//C\n  \npet_store(A, B, C)",
          "\nAnswer =  (A - B) / C"
        ],
        [
          "\n\ndef num_of_cages(a, b, c):\n  return (a - b) // c\n  \nprint(num_of_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  cages = (A-B)//C\n  return cages",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef getCagingNumber(A,B,C):\n  return (A - B) // C\n  \n  # (A - B) // C returns the integer result of the division",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef puppies_in_cages(A, B, C):\n  remainder = A - B\n  return remainder // C + (1 if remainder % C > 0 else 0)",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 18 puppies. In one day they sold 3 of them and put the rest into cages with 5 in each cage. How many cages did they use? ",
      "final_answer": 3.0,
      "index": 501
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 44,
      "duration": 35.802536964416504,
      "templates": [
        "Luke had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a Python function that returns the answer.",
        "Luke had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef splitClothing(A,B):\n    return (A - B) / C",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef clothes_equal_loads(A, B):\n    C = (A - B) // 2\n    return C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef equalLoads(A, B):\n  C = A - B\n  return C // B\n\nprint(equalLoads(A, B))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef splitClothing(A, B):\n  C = (A - B) / B\n  return C\n\nprint(splitClothing(5, 2))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numClothes(a, b):\n  c = a - b\n  return c // 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_equal_loads(pieces_clothing, load_number):\n  pieces_per_load = pieces_clothing // load_number\n  return pieces_per_load\n\nanswer = get_equal_loads(A, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numOfClothes(a, b, c):\n    return (a-b)//c\n\nprint(numOfClothes(10, 3, 2))\n# Outputs: 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef small_loads(a, b):\n  return (a - b) / c\n\n# Answer: \nsmall_loads(A, B, C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef split_clothing(A, B): \n  C = A - B \n  return C // B\n  \nprint(split_clothing(A, B))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef find_num_clothing(A, B):\n  C = A-B\n  return C//3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_in_loads(total, first_load):\n  return (total - first_load) // 2\n\nprint(num_in_loads(A, B))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef split_clothing(A, B):\n  C = (A-B)/2\n  return (B, C)\n\nprint(split_clothing(A, B))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef find_clothes_per_load(a, b):\n  c = a - b\n  return c // 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateClothingPerLoad(totalClothing, totalLoads):\n  return totalClothing // totalLoads\n\nanswer = calculateClothingPerLoad(A, C)",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef equalLoads(A, B):\n    C = A - B\n    return C // (C - B)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_load(A, B):\n  C = (A-B) / C\n  return C\n  \nprint(calculate_load(A, B))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_equal_loads(a, b):\n  c = a-b\n  return c//2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef small_loads(A, B):\n    C = (A - B) / C\n    return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef small_load(A, B):\n    C = (A-B)//3\n    return C\n    \nsmall_load(A, B)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef equalLoads(A, B):\n  C = (A-B) // 2\n  return C\n\nprint(equalLoads(A, B))",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef smaller_load(A,B):\n   C = (A-B)//2\n   return C\n\nsmaller_load(A,B)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_clothes_in_each_load(total, large_load):\n  # Calculate number of pieces in small loads\n  small_load = (total - large_load) / 2\n  return small_load\n\nprint(num_clothes_in_each_load(A, B))",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Luke had 47 pieces of clothing to wash. He put 17 of them in one load, but decided to split the rest into 5 equal loads. How many pieces of clothing could go in each of the small loads? ",
      "final_answer": 6.0,
      "index": 502
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 50,
      "duration": 37.439263105392456,
      "templates": [
        "Edward bought A tickets at the state fair. He spent B tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost C tickets, how many rides could he go on?\nWrite a Python function that returns the answer.",
        "Edward bought A tickets at the state fair. He spent B tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost C tickets, how many rides could he go on?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef rides(A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef rides(A, B, C): \n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef fairRides(a, b, c):\n  return (a-b)/c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides_at_fair(A, B, C):\n  return (A - B) // C\n\nrides_at_fair(20, 10, 2) \n#returns 5",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_rides(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_rides(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A - B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_rides(A, B, C):\n  return (A - B) // C",
          " \n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numRides(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_rides(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\nA, B, and C are parameters. \n\ndef numOfRides(A, B, C): \n  numRides = (A - B) // C\n  return numRides \n\nprint(\"Number of rides Edward can go on:\", numOfRides(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A,B,C):\n    return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n    answer = (A - B) // C\n    return answer",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef rides(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A,B,C): \n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides (A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(tickets, booth, cost):\n  return (tickets - booth) // cost\n  \n  \nanswer = rides(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef rides(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_rides(a, b, c):\n  rides = (a - b) // c\n  return rides",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_tickets(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Edward bought 79 tickets at the state fair. He spent 23 tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost 7 tickets, how many rides could he go on? ",
      "final_answer": 8.0,
      "index": 503
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 44,
      "duration": 34.97979021072388,
      "templates": [
        "Katie baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Katie baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0
      ],
      "completions": [
        [
          "\n\ndef total_packages(A, B, C): \n  return (A - B)/C\n  \nprint(total_packages(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cupcakes(A,B,C):\n  cupcakes_left = A-B\n  num_packages = cupcakes_left//C\n  return num_packages\n\nprint(cupcakes(A,B,C))",
          "\nAnswer = A/C - B"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n    remaining_cupcakes = A - B\n    packages = remaining_cupcakes // C\n    return packages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculatePackages(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndefpackages(A, B, C): \n  return (A-B)//C",
          "\nA - B = D\nD / C = Answer\nAnswer = D / C"
        ],
        [
          "\n\ndef packages(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_packages(a, b, c):\n  return (a-b) // c",
          "\nAnswer = A/C \u00f7 B"
        ],
        [
          "\n\ndef cupcakes_package(A, B, C):\n    return (A-B)//C \ncupcakes_package(A, B, C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef packs_made(A, B, C):   \n    packs_made = (A - B) // C   \n    return packs_made",
          "\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef packages(A,B,C):\n  remaining = A - B\n  packages = remaining // C\n  return packages",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A, B, C):\n    answer = (A - B) // C\n    return answer    \n\nprint(packages(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcake_packages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef makePackages(A, B, C): \n  return (A-B)//C",
          "\nAnswer = A/C \u00f7 B"
        ],
        [
          "\n\ndef packages(A,B,C): \n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef cupcakes(A, B, C):\n  packages = (A - B) // C\n  return packages",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcake_packages (A, B, C):\n  return (A - B) // C",
          "\nAnswer = A\u00f7C-B"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A-B)//C \n  \npackages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcakePackages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef bake_sale(A, B, C): \n  pack = (A - B) // C\n  return pack",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_packs(A, B, C):\n  return (A-B)//C\n  \nAnswer: The function returns the number of packages that Katie can make.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A, B, C): \n  num_packages = (A - B)//C \n  return num_packages",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Katie baked 18 cupcakes for her school's bake sale. If her brother, Todd, ate 8 of them how many packages could she make if she put 2 cupcake in each package? ",
      "final_answer": 5.0,
      "index": 504
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.7369818687439,
      "templates": [
        "Megan had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Megan end up with?\nWrite a Python function that returns the answer.",
        "Megan had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Megan end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef countFolders(amtFiles):\n  return amtFiles // 5 \n\nanswer = countFolders(A)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Num_Folders(A,B,C):\n  return (A-B)//C\n\nanswer = Num_Folders(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A,B,C):\n  return (A-B)//C\n\nprint(num_of_folders(A,B,C))",
          "\nAnswer = A/C (B+C)"
        ],
        [
          "\n\ndef num_of_folders(a,b,c):\n  return (a-b)//c\n\nprint(num_of_folders(a, b, c))",
          " \nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef num_folders(A,B,C):\n  return (A-B)//C\n\nprint(\"Megan ended up with \" + str(num_folders(A,B,C)) + \" folders.\")",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_folders(files, deleted, files_in_folder):\n  return (files - deleted) // files_in_folder\n\nprint(number_of_folders(A, B, C))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_of_folders(a, b, c):\n  return (a - b) // c\n  \nprint(num_of_folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef delete_files(A, B, C):\n  return A//(B+C)\n\nAnswer: Megan ended up with (A//(B+C)) folders.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef MeganFolders(A, B, C):\n  return (A-B)//C\n\nAnswer: Megan ended up with (A-B)//C folders.",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_folders(a, b, c):\n  return (a - b) // c\n\n# example\nnum_of_folders(20, 5, 5)\n# answer: 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n\nfolders(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(a, b):\n  return (a - b) // c;\n\n num_of_folders(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n  \nprint(folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef MeganFolders(A, B, C):\n  return (A-B) // C\n  \nThe answer would be:\nMeganFolders(A, B, C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef folder_count(A,B,C): \n  return (A-B)//C\n\nprint(folder_count(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders(A,B,C):\n  folders = (A-B)//C\n  return folders\n\nprint(num_folders(A,B,C))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef folderAnswer(A, B, C):\n  return (A-B)//C\n\nfolderAnswer(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A, B, C):\n    return (A-B)//C\n\nfolders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders(A,B):\n  return (A-B) // C\n\nprint(num_folders(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folder_number(files, deleted):\n  return (files - deleted) // 10\n\nfolder_number(A, B)",
          "\n\nAnswer = A/C"
        ],
        [
          "\n\ndef find_folders(A,B,C):\n  return (A - B) // C\n\nprint(find_folders(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A-B) // C\n\nprint(num_of_folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders():\n  A = int(input('How many files did Megan have? '))\n  B = int(input('How many files did Megan delete? '))\n  C = int(input('How many files in each folder? '))\n  return (A-B)//C\n\nprint(num_folders())",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef folder_quantity(A, B, C):\n  return (A - B) // C \n  \nfolder_quantity(A, B, C)",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef GetNumFolders(numFiles, numDeleted):\n  return (numFiles - numDeleted) // C\n  \nanswer = GetNumFolders(A, B)",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Megan had 93 files on her computer. She deleted 21 of them and put the rest into folders with 8 files in each one. How many folders did Megan end up with? ",
      "final_answer": 9.0,
      "index": 505
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 34,
      "duration": 37.89594388008118,
      "templates": [
        "Wendy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Wendy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef pictures_in_albums(a, b, c):\n  return [b, (a - b)//c, (a - b)%c]\n\npictures_in_albums(A, B, C)",
          "\n\nAnswer =  (A - B) / C + B"
        ],
        [
          "\n\ndef numPics(A, B, C): \n  return [B, (A-B)//C, (A-B)%C]\n \n# A is the total number of pictures, B is the number of pictures in the first album, and C is the number of different albums. \n# The output is an array of the number of pictures in each album.",
          "\nAnswer = A / [B + C]"
        ],
        [
          "\n\ndef album_calculator(A, B, C):\n  album1 = B\n  album2 = int((A-B)/C)\n  album3 = int(A-B-(C-1)*album2)\n  return album1, album2, album3\n\nprint(album_calculator(A, B, C))",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef album_breakdown(A,B,C):\n  album1 = B\n  album2 = A - B\n  album3 = album2 / C\n  return album1, int(album2), int(album3)\n\nprint(album_breakdown(A,B,C))",
          "\n\nA = x\nB = y\nC = z\n\nAnswer = B pics in 1 album: y, C pics in rest of the albums: (x-y)/z"
        ],
        [
          "\n\ndef number_of_albums (A, B, C):\n  album1_pictures = B\n  other_album_pictures = (A - B) / C\n  \n  return album1_pictures, other_album_pictures\n\nprint(number_of_albums(A, B, C))",
          "\nAnswer = A-(B+C)"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return A//(B+C), A//B, A//C\n\nalbum_pics(28, 5, 3) \n# Output: (7, 5, 9)",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef pic_albums(a,b,c):\n  album_a = b\n  album_c = (a - b)//c\n  return album_a, album_c\n\nprint(pic_albums(A,B,C))",
          "\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef album_distribution(total_pics, album1, album2):\n  album1_pics = total_pics * (album1 / (album1 + album2))\n  album2_pics = total_pics * (album2 / (album1 + album2))\n  return [album1_pics, album2_pics]",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef album_count (A,B,C):\n  return \"Each album has \" + str(A//(B+C)) + \" pictures.\"\n\nprint(album_count(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pic_in_albums(A, B, C):\n  return A//B, A//C, (A%C)+(A%B)\n  \nprint(pic_in_albums(A, B, C))",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef pictureAlbums(A, B, C):\n  return A//B, A//C",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          " \n\ndef album_pics(A, B, C): \n  return A//B + A%C \n\nAnswer: This function returns the total number of pictures in each album. It takes three parameters as inputs: the total number of pictures (A), the number of pictures in one album (B), and the number of albums (C).",
          "\nAnswer = A/(B+C)"
        ],
        [
          " \n\ndef pics_per_album(A, B, C):\n  return [B, (A-B)//C, (A-B)%C]\n\n#Example:\npics_per_album(27, 8, 3)\n#Output: [8, 8, 3]",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef divide_pics(A, B, C):\n  album1 = B\n  albums = C\n  album2 = A - B\n  return f\"Album 1: {album1}, Albums 2-{albums+1}: {album2/albums} each\"\n\nprint(divide_pics(A, B, C))",
          "\nAnswer = A / (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Wendy uploaded 79 pictures to Facebook. She put 44 pics into one album and put the rest into 5 different albums. How many pictures were in each album? ",
      "final_answer": 7.0,
      "index": 506
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 26,
      "duration": 22.127530097961426,
      "templates": [
        "Isabel had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a Python function that returns the answer.",
        "Isabel had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef homework_problems(A,B,C):\n  return (A-B)/C\n\nprint(homework_problems(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A-B) / C\n\nprint(page_problems(20, 12, 3))\n#prints 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_probs(A, B, C):\n  return (A - B) / C\n\nprint(num_of_probs(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef homeworkPageProblem(A, B, C):\n  return (A - B) / C\n\nprint(homeworkPageProblem(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef homework_problems(a, b, c):\n  return (a - b) / c",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return (A-(B*(C-1))) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef homework_num_probs(a, b, c):\n  return (a-b)//c",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_problems(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A - B) / C\n\n# Calling the function\nproblems_per_page(A, B, C)",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C):\n  num_problems = (A - B) / C \n  return num_problems\n\nprint(num_problems_per_page(A, B, C))",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A-B)//C\n  \n# Sample input\npage_problems(30, 17, 3)\n\n# Sample output\n5",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPages(A, B, C): \n    return math.floor((A - B) / C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef homeworks(a, b, c): \n  return (a-b)/c\n\nSolution = homeworks(A,B,C)",
          "\n\nAnswer = C / B"
        ]
      ]
    },
    "source": {
      "question": " Isabel had 72 homework problems. She finished 32 of them but still had 5 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ",
      "final_answer": 8.0,
      "index": 507
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 36,
      "duration": 26.167513132095337,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\n\ndef num_of_pies(A, B, C):\n  return (A - B) / C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numPies(A, B, C):\n  return (A - B) / C \n  \nprint(numPies(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pies_from_apples(A, B, C):\n  pies = (A - B) // C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a, b, c): \n  return (a - b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_pies(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n   return (A - B) // C  # divides (A - B) by C and returns the integer quotient",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef makePies(A,B,C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  num_pies = (A-B) // C\n  return num_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cal_num_pies(A, B, C):\nnum_pies = (A - B) // C\nreturn num_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_pies(A, B, C):\n  total_pies = (A - B) // C\n  return total_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_pies(A, B, C):\n  remaining_apples = A - B\n  num_pies = remaining_apples // C\n  return num_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\ndef pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 62 apples. For lunch they handed out 8 to students and decided to use the rest to make pies. If each pie takes 9 apples, how many pies could they make? ",
      "final_answer": 6.0,
      "index": 508
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 34,
      "duration": 26.9723641872406,
      "templates": [
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef mowingLawns(A, B, C):\n  return (A - B) / C\n  \nprint(mowingLawns(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_purchase(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  return (A - B) / C",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calcGames(A, B): \n    games = (A - B) // C\n    return games",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef answer (A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B): \n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchase(a, b):\n  return (a - b) / c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n  C = (A - B)/C\n  return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchasable(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchase(A, B):\n    games_left = A - B\n    return games_left / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  C = (A - B) / 3\n  return C\n  \nAnswer: buy_games(A, B)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  remaining = A - B\n  num_games = remaining / C\n  return num_games",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n  C = (A - B) // 15\n  return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_buy(a,b):\n  c = a - b\n  return c // 10 \n\nanswer = game_buy(A,B)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_purchase(A, B):\n  C = (A - B) / 5\n  return C \n\ngames = game_purchase(A,B)\nprint(\"Mike can buy \" + str(games) + \" games.\")",
          "\nAnswer = (A - B) \u00f7 C"
        ]
      ]
    },
    "source": {
      "question": " Mike made 101 dollars mowing lawns over the summer. If he spent 47 dollars buying new mower blades, how many 6 dollar games could he buy with the money he had left? ",
      "final_answer": 9.0,
      "index": 509
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 32,
      "duration": 29.744056940078735,
      "templates": [
        "Paige's team won their dodgeball game and scored A points total. If Paige scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a Python function that returns the answer.",
        "Paige's team won their dodgeball game and scored A points total. If Paige scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef players_on_team (A,B,C):\n return (A-B)/C\n \nprint( players_on_team (25, 10, 3))\n=> 5",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_members(A, B, C):\n  return (A - B) / C\n\nprint(team_members(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef dodgeball_players(A, B, C):\n  return (A-B)//C\n  \nExample: \nAnswer = dodgeball_players(20, 6, 4)\nPrint(Answer)\n\noutput: 3",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef team_size(A,B,C):\n    return (A - B) // C + 1\n\nteam_size(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_dodgeball_players(a, b, c):\n    players = (a - b) / c\n    return players",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateTeamSize(A, B, C):\n    return (A-B)//C + 1 \n    \n# example: \nA = 25\nB = 10\nC = 3\ncalculateTeamSize(A, B, C) #returns 5",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef playersOnTeam(a, b, c):\n  return (a-b)/c\n\nplayersOnTeam(A, B, C)",
          "\n\nAnswer = (A - B) / C + 1"
        ],
        [
          "\n\ndef num_players(A,B,C):\n  return (A-B)//C + 1 \n\nnum_players(43, 16, 4)\n\n# returns 5",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef players(a,b,c):\n  return (a-b)//c\n  \nplayers(A,B,C)",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef teamSize(a,b,c):\n  return (a - b) / c\n\nteamSize(A, B, C)",
          "\nAnswer = (A-B)/C + 1"
        ],
        [
          "\n\ndef teamSize(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef winningTeam(A, B, C):\n  return (A - B) // C\n  \nThen call the function using the given parameters:\n\nwinningTeam(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_players(A, B, C):\n  return int((A - B) / C) + 1\n\nprint(calculate_players(A, B, C))",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef team_size(A, B, C):\n  return (A - B) // C + 1\n  \n# Function call\nanswer = team_size(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef getNumPlayers(a, b, c):\n    return (a - b) / c\n\nnumPlayers = getNumPlayers(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef players(a, b, c):\n  return (a-b)/c\n\nplayers(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Paige's team won their dodgeball game and scored 41 points total. If Paige scored 11 of the points and everyone else scored 6 points each, how many players were on her team? ",
      "final_answer": 5.0,
      "index": 510
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 42,
      "duration": 40.5320520401001,
      "templates": [
        "Oliver is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Oliver with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a Python function that returns the answer.",
        "Oliver is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Oliver with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef shelf_calc(A, B, C):\n  return (A-B)/C  # returns the number of shelves required",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bookshelf(a,b,c):\n    # a is total books, b is taken by librarian, c is books per shelf\n    num_shelves = int((a-b)/c)\n    return num_shelves",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_num(a,b,c): \n  return (a-b) // c + 1\n\nprint(shelf_num(A, B, C))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef number_of_shelves(A,B,C): \n    return (A - B) // C + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf(A, B, C):\n  num_shelf = (A-B) // C\n  return num_shelf + 1\n\nprint(shelf(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef libraryBooks(A, B, C):\n  return (A - B) // C + int((A - B) % C != 0)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef book_shelving(a,b,c):\n  shelf = (a-b)//c\n  return shelf",
          "\nAnswer = (A-B) / C"
        ],
        [
          " \n\ndef shelves_needed(A, B, C):\n  return (A - B) // C + 1",
          " \nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelf_calculator(A, B, C):\n  answer = (A-B) // C\n  return answer\n\nprint(shelf_calculator(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef shelf_calc(A, B, C):\n    num_shelves = (A-B) // C\n    return num_shelves",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelf_count(A,B,C):\n    return (A-B)//C + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelfNeeded(A, B, C):\n  return (A-B) // C + 1\n\nprint(shelfNeeded(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A-B)//C + 1\n  \nprint(shelves_needed(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    remainder = A - B\n    shelves_needed = remainder // C\n \n    if remainder % C != 0:\n        shelves_needed += 1\n    return shelves_needed\n \nprint(num_shelves(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C): \n  return (A - B) // C + 1\n\nshelves_needed(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef book_shelves(A, B, C):\n  return (A-B)//C + 1",
          "\n\nA - B = C\nAnswer = (A - B) / C = Number of Shelves"
        ],
        [
          "\n\ndef shelves_needed(A, B, C): \n    return ((A - B) // C) + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelving(a, b, c): \n  return (a-b)//c+1",
          "\nA - B = X\nX / C = Y\nAnswer = Y"
        ],
        [
          "\n\ndef bookshelf(a, b, c):\n    number_of_shelves = math.ceil((a-b)/c)\n    return number_of_shelves",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_shelves(A,B,C):\n  num_books = A - B\n  return num_books // C + (num_books % C > 0)\n\nprint(num_shelves(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_problem(A, B, C):\n  return ((A-B) // C) + 1",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Oliver is at the library helping put away books. There are 46 book to put away total but a librarian takes 10 of them and leaves Oliver with the rest. If he can fit 4 books on a shelf, how many shelves will he need? ",
      "final_answer": 9.0,
      "index": 511
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 42,
      "duration": 43.26649212837219,
      "templates": [
        "Emily was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Emily have?\nWrite a Python function that returns the answer.",
        "Emily was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Emily have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef calculate_gardens(A, B, C):\n  return (B//C) + (B%C > 0)\n  \nanswer = calculate_gardens(A, B, C)",
          "\n\nA * B / C = Answer \nAnswer = B / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateGardens(A, B, C): \n  return B//C \n\nprint(calculateGardens(A, B, C))",
          "\n\nAnswer = (B - (C * A)) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B // C) //A\n  \nprint(num_small_gardens(A, B, C))",
          "\n\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef numGardens(a,b,c): \n  return (b - (c*a))/a\n\nnumGardens(A,B,C)",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef totalSmallGardens (a, b, c):\n  return int (b/c)\n\nprint (totalSmallGardens (a, b, c))",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef numSmallGardens(A,B,C):\n  return (B//C)  # returns the number of small gardens\n\n# call the function\nnumSmallGardens(A,B,C)",
          "\n\nAnswer = (B - (C * B)) / C"
        ],
        [
          "\n\ndef how_many_gardens(A,B,C):\n  return (B-A)//C\n  \nprint(how_many_gardens(A,B,C))",
          "\n\nA x (B \u2013 C) = Answer \nAnswer = 0"
        ],
        [
          "\n\ndef num_of_gardens(A, B, C):\n  return (B - (C * A)) // C\n  \nprint(num_of_gardens(A, B, C))",
          "\n\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef num_small_gardens(A,B,C):\n    return (B-(A*C))//C\n \nprint(num_small_gardens(A,B,C))",
          "\nAnswer = (B - (C * X)) / C \nWhere X is the number of small gardens Emily has."
        ],
        [
          "\n\ndef totalGardens(A,B,C):\n  return int((B - (C * B)) / A) \n\nprint(totalGardens(A,B,C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return (B // C) // A\n  \n# For example, if A = 2, B = 10, and C = 3, \n# the answer is numSmallGardens(2, 10, 3) = 1",
          "\n\nA x B = C x D\n\nAnswer = D = A x B / C"
        ],
        [
          "\n\ndef garden_calc(A, B, C):\n  return B//C  # answer in number of small gardens",
          "\n\nAnswer = (B-(C*A))/C"
        ],
        [
          "\n\ndef numGardens(a, b, c):\n  return (b - (c * a))/c\n\nprint(numGardens(A,B,C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n    small_gardens = B // C\n    return small_gardens\n\n# So if A=4, B=16, and C=4,\n# we would return 4 as a result.",
          "\nAnswer = (B - (C * B)) / C"
        ],
        [
          "\n\ndef vegetable_gardens(A,B,C):\n  return B // C\n\nprint(vegetable_gardens(A,B,C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B - (A * C)) // C\n\n# example\nnum_small_gardens(10, 25, 5) # returns 1",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef calculateGardens(A, B, C):\n  return B//C\n  \ncalculateGardens(A, B, C)",
          "\n\nA x B/C = D  \n\nAnswer = D"
        ],
        [
          "\n\ndef num_gardens(A, B, C):\n  return B//C + 1",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef plant_seeds(a, b, c): \n  return (b - (b // c)) // a\n\nanswer = plant_seeds(A, B, C)",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(a, b, c):\n    numSmallGardens = (b - (a * c)) / c\n    return numSmallGardens\n\nprint(numSmallGardens(3, 25, 5)) #2",
          "\n\nA x B/C = Answer\nAnswer = B/C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B // C) + (B % C)\n  \nnum_small_gardens(A, B, C)",
          "\n\nAnswer = (B - (C*4))/C"
        ]
      ]
    },
    "source": {
      "question": " Emily was planting vegetables in her garden. She started with 41 seeds and planted 29 of them in the big garden and in each of her small gardens put 4 seeds each. How many small gardens did Emily have? ",
      "final_answer": 3.0,
      "index": 512
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 32,
      "duration": 23.72834277153015,
      "templates": [
        "Edward made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Edward made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef newGame(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n    return (A - B) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef money_left(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B): \n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_bought(A, B):\n    return (A-B)/C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculateGames(A, B):\n    C = (A - B) / C\n    return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateGames(A, B):\n  C = A-B\n  games = C // 3\n  return games",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A,B):\n    C = (A - B)/C\n    return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n    return (A - B) / C",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef spent_money(A, B):\n  C = (A - B) / 3\n  return C\n  \nprint(spent_money(A, B))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B):\n C = (A - B) // 3\n return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef gameCalc(A, B):\n  C = (A - B) / 45 # Assuming each game costs $45\n  return round(C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawn_calc(A, B):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " Let A, B, and C be the parameters of the function.\n\ndef how_many_games(A, B, C):\n  money_left = A - B\n  num_games = money_left // C\n  \n  return num_games",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_calc(A, B):\n  C = (A - B) // 3\n  return C\n\nanswer = game_calc(A, B)",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_games(A, B):\nC = (A - B) / 25\nreturn C\n\n# 25 is the cost of each game",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Edward made 37 dollars mowing lawns over the summer. If he spent 21 dollars buying new mower blades, how many 2 dollar games could he buy with the money he had left? ",
      "final_answer": 8.0,
      "index": 513
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 42,
      "duration": 36.98443818092346,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0
      ],
      "completions": [
        [
          "\n\ndef total_cages(A, B, C): \n  return (A - B) // C\n\ntotal_cages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          " The inputs should be A, B and C.\n\ndef numCages(A, B, C):\n    return (A - B) // C\n\nprint(numCages(25, 15, 3)) #Should return 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef findNumberOfCages(A, B, C):\n  return (A - B)//C\n\nanswer = findNumberOfCages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n  \nanswer = cages_used(A, B, C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n    return (A - B) // C\nprint(cages_used(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  num_cages = (A - B) / C\n  return num_cages\n  \ncages_used(8, 4, 2)\n# This returns an answer of 2.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_cages(A,B,C):\n  return (A-B) // C\n\n#The function takes 3 parameters: A, B and C and returns the number of cages.",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_needed(A,B,C): \n    return (A-B)//C + (((A-B)%C)>0) \n\nprint(cages_needed(A,B,C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages(A, B, C): \n  return (A - B) // C\n\nprint(cages(A, B, C))",
          "\nAnswer = (A\u2212B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B)//C\nprint(cages_used(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(a, b, c):\n  answer = (a - b) // c\n  return answer",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n    cages = (A-B) // C\n    return cages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n\ncages_used(A, B, C) //returns the number of cages used",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  num_cages = (A - B) // C\n  return num_cages",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(a, b, c):\n  return (a-b)//c  # divide and floor the result to get the answer",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A-B)//C\n  \ncages(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B)//C\n\nprint(num_cages(50, 10, 5))\n# This will return 8 cages.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calc_cages(A, B, C):\n  return (A-B) // C\n  \nprint(calc_cages(10, 5, 3)) #prints 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateCages(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef find_cages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 81 puppies. In one day they sold 41 of them and put the rest into cages with 8 in each cage. How many cages did they use? ",
      "final_answer": 5.0,
      "index": 514
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 38,
      "duration": 31.721648931503296,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A - B) / C\n  \nAnswer = trivia_teams(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef group_trivia_teams(A, B, C):\n  return (A-B) / C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_students_in_trivia_group (A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_students_per_group(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef divide_students(A, B, C):\n    return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_per_team(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  # calculate group size\n  size = (A - B) / C\n  \n  # return group size\n  return int(size)",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef get_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = A - B / C"
        ],
        [
          " \n\ndef group_students(A, B, C):\n  return (A - B) / C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_groups(a, b, c):\n    return (a-b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calcGroupSize(a, b, c):\n  return (a - b) / c\n  \n# example\nprint(calcGroupSize(30, 10, 3))\n# Output: 6.666666666666667",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B \u00f7 C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  return (A - B) // C",
          " \n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_groups(A, B, C): \n  return int((A - B) // C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_in_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ]
      ]
    },
    "source": {
      "question": " There are 65 students trying out for the school's trivia teams. If 17 of them didn't get picked for the team and the rest were put into 8 groups, how many students would be in each group? ",
      "final_answer": 6.0,
      "index": 515
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 34,
      "duration": 25.749019861221313,
      "templates": [
        "Tom had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Tom had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef calculation(A, B, C):\n  return (A - B) // C",
          "\nA - B / C = Answer\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A,B,C):\n  return (A - B) / C",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef toys(a, b, c):\n  return (a-b) // c\n\nprint(toys(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C): \n    toys = (A - B) // C\n    return toys",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef find_toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef money_left(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numToys(A, B, C):\n\treturn (A - B) // C",
          "\nA - B = C\nAnswer = A - B = C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n    remainingMoney = A - B\n    numberOfToys = remainingMoney // C\n    return numberOfToys",
          "\nAnswer = A-B/C"
        ],
        [
          "\n\ndef num_toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef toy_purchase(a, b, c):\n    return (a - b) // c\n\n# Call the function \ntoy_purchase(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef buy_toys(A, B, C):\n  return (A-B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef toys(A,B,C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\nA = int(input(\"How many dollar does Tom have?\"))\nB = int(input(\"How much money did he spend on the new game?\"))\n\ndef amount_of_toys(A,B):\n C = (A-B)//3\n return C\n \nprint(amount_of_toys(A,B))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_price(A,B,C):\n    remaining_money = A - B\n    total_toys = remaining_money // C  \n    return total_toys\n\nprint(calculate_price(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef leftOverMoney(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef compute(A, B, C): \n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Tom had 57 dollars. If he spent 49 bucks on a new game, how many 4 dollar toys could he buy with the money he had left? ",
      "final_answer": 2.0,
      "index": 516
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 46.21157121658325,
      "templates": [
        "Isabel picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a Python function that returns the answer.",
        "Isabel picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef bouquets(A, B, C):\n  remaining_flowers = A - C \n  num_bouquets = remaining_flowers // B\n  return num_bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets (A, B, C):\n  # Find the number of bouquets not affected by wilting\n  num_not_affected = A - C\n  # Divide by how many flowers are in each bouquet\n  num_bouquets = num_not_affected // B\n  return num_bouquets",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef remaining_bouquets(A, B, C):\n  # Calculates the total amount of bouquets that can still be made with the wilted flowers\n  total = A - C\n  bouquets = total // B\n  return bouquets\n\nprint(remaining_bouquets(20, 5, 3))\n#Prints 3",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef flowerBouquets(a,b,c):\n  return (a-c)//b\n  \nprint(flowerBouquets(20,3,4)) \n#returns 6 bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef remaining_bouquets(A, B, C):\n  return (A - C) // B",
          "\n\nAnswer = B - C"
        ],
        [
          "\n\ndef flowers_in_bouquets(a,b,c):\n  return (a-c)//b\n\n# Call the function \nflowers_in_bouquets(20, 5, 2) # returns 3",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef calculate_bouquets(a, b, c):\n  return (a-c)//b\n\nanswer = calculate_bouquets(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef calculate_bouquets(A, B, C):\n  return (A - C) // B\n\n#Example\ncalculate_bouquets(50, 10, 8) #Returns 4",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquets(A, B, C):\n    return (A \u2013 C) / B",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquets(A, B, C):\n  # A = total number of flowers\n  # B = number of flowers in each bouquet\n  # C = number of flowers that wilted\n  \n  # Calculate the number of bouquets remaining\n  remaining_bouquets = (A - C) // B\n  \n  return remaining_bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef wiltedFlowers(A, B, C): \n  return (A-C)//B",
          "\nAnswer = ((A + B) - C) / B"
        ],
        [
          "\n\ndef remaining_bouquets(A, B, C):\n  return (A - C) // B\n\n# example usage\nremaining_bouquets(10, 3, 2) # returns 2",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef Bouquets(A,B,C): \n  return (A-C) // B",
          "\n\nAnswer = (A - C)/B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  return (A-C)//B\n\n#Example\nanswer = num_bouquets(10, 2, 4)\nprint(answer)\n#Output: 2",
          "\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef numBouquets (numA, numB, numC):\n  finalNum = (numA - numC) // numB\n  return finalNum",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef Bouquets(A,B,C):\n  return (A-C)//B\n\nprint(Bouquets(20,5,3))\n\nThe answer is 3 bouquets.",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef flower_bouquets(a, b, c):\n    bouquets = (a - c) // b\n    return bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef count_bouquets(a, b, c):\n  available_flowers = a-c\n  num_bouquets = available_flowers // b\n  return num_bouquets",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef numBouquets (A, B, C):\n  remainingFlowers = A - C\n  numBouquets = remainingFlowers // B\n  return numBouquets",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef flowerBouquets(a, b, c):\n  return (a - c) // b\n  \nflowerBouquets(A, B, C)",
          "\n\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef num_bouquets(flowerA, flowerB, wilted):\n  return (flowerA - wilted)//flowerB",
          "\n\nAnswer = (A - C)/B"
        ],
        [
          " The three inputs should be given as arguments.\n\ndef num_bouquets(a, b, c):\n  return (a - c)//b\n\nnum_bouquets(A, B, C)",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          " \n\ndef bouquets_made(A, B, C):\n  ans = (A-C)//B \n  return ans",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  return (A-C)//B\n  \nresult = num_bouquets(50, 5, 10)\nprint(result)\n\nOutput: 8",
          "\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef num_bouquets_possible(A, B, C):\n    return (A-C)//B",
          "\n\nAnswer = (A-C)/B"
        ]
      ]
    },
    "source": {
      "question": " Isabel picked 66 flowers for her friend\u2019s wedding. She was making bouquets with 8 flowers in each one. If 10 of the flowers wilted before the wedding, how many bouquets could she still make? ",
      "final_answer": 7.0,
      "index": 517
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 44,
      "duration": 40.077621936798096,
      "templates": [
        "For Halloween Sarah received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a Python function that returns the answer.",
        "For Halloween Sarah received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef Halloween (A, B, C):\n  return (A - B) // C\n\nExample:\nHalloween(20, 5, 3)\n\nAnswer: 3",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy_piles(A, B, C): \n  return (A - B) // C\n\nprint(candy_piles(10, 5, 2))\n# Output: 2",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef halloween_candy(A, B, C):\n    return (A - B) // C\n\nprint(halloween_candy(10, 2, 4))\n# Output: 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C): \n  return (A-B)//C\n\n#example\ncandy_piles(20, 8, 3)\n\n#Answer\n3",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    return (A - B) // C\n    \n# If the number of pieces is not evenly divisible, the remainder can be discarded.",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_piles(a, b, c):\n  return (a - b) // c\n  \nanswer = num_piles(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef halloween_candy(A, B, C): \n    return (A - B) // C\n\nhalloween_candy(42, 12, 5) \n#returns 6",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B) // C\n  \n# call the function\ncandy_piles(A, B, C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef Halloween(A, B, C):\n  return (A - B)//C\n\nprint(Halloween(18, 6, 3))\n# This will return 4.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B)//C \n\nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pilesOfCandy(A, B, C): \n  return (A - B) // C\n\n# Example \nprint(pilesOfCandy(20, 5, 5)) \n# Output: 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n  \nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(a,b,c):\n  return (a-b)//c \n\nprint(candy_piles(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_piles(A, B, C): \n    return (A-B)//C\n\nnum_piles(8, 3, 2) # Returns 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_piles (A, B, C):\n    return (A-B)//C\n\n#optionally\n\ndef calculate_piles(A, B, C): \n    return (A - B) / C if A > B and C > 0 else 0",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_piles(A, B, C):\n  return (A-B)//C\n \nprint(num_piles(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candyPiles(A,B,C):\n  return (A-B)//C\n  \ncandyPiles(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef Piles(A, B, C):\n  return (A - B) // C\n\nAnswer: \nPiles(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candyPiles(A, B, C):\n  return (A-B) // C \n\nprint(candyPiles(30, 7, 4))\n#Output: 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_piles(A, B, C):\n  return (A-B)//C\n\nans = num_of_piles(A, B, C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef halloweenPiles(a,b,c):\n    return (a-b)//c\n\nhalloweenPiles(30, 10, 5) # Returns 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n\nprint(candy_piles(15, 8, 4))  # Returns 2",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Sarah received 108 pieces of candy. She ate 36 pieces then placed the rest into piles with 9 in each pile. How many piles could she make? ",
      "final_answer": 8.0,
      "index": 518
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 38,
      "duration": 32.94295406341553,
      "templates": [
        "Nancy had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Nancy end up with?\nWrite a Python function that returns the answer.",
        "Nancy had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Nancy end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef num_folders(A, B, C):\n  return (A - B) / C\n\nprint(num_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A - B) // C\n  \nAnswer: folders(A, B, C)",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_folders(A,B,C):\n  return (A-B)//C\n  \nanswer = num_of_folders(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef nancy_folders(A, B, C):\n  return (A-B)//C\n\nAnswer: Nancy ended up with (A-B)//C folders.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_folders(A,B,C):\n  return (A-B)//C\n  \ncalculate_folders(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A,B,C):\n  return (A-B) // C\n  \nAnswer: \nfolders(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A-B)//C\n  \nprint (num_of_folders(10, 2, 3))\n\nResult: 3 folders",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_nancy_folders(A, B, C):\n  return (A - B) // C\n  \nprint(get_nancy_folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(a, b, c): \n  return math.ceil((a-b)/c)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(A, B, C):\n  return (A - B) // C\n  \nprint(numFolders(A, B, C))",
          "\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef get_folders(a,b,c):\n  folders = (a-b) // c\n  return folders\n\nprint(get_folders(a,b,c))",
          "\nAnswer = D/C"
        ],
        [
          "\n\ndef num_folders(a, b, c): \n  return (a - b) // c\n  \nnumber_of_folders = num_folders(a, b, c)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef nancy_folders(A, B, C):\n  return (A - B) // C\n\nprint(nancy_folders(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef folder_count(A, B, C): \n    return (A-B)//C\n    \nSolution: \n\ndef folder_count(A, B, C): \n    return (A-B)//C\n\nprint (folder_count(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef nancy_folders(A, B, C):\n  return (A-B)//C\n\nprint(nancy_folders(A, B, C))",
          "\nAnswer = [(A-B)/C]"
        ],
        [
          "\n\ndef folders_nancy (a, b, c):\n  if a > 0 and b > 0 and c > 0:\n    return (a - b) // c\n  else:\n    return 'Error'\n\nprint(folders_nancy(A, B, C))",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          "\n\ndef num_folders(a, b, c):\n  return (a - b) // c\n  \nAnswer: The number of folders Nancy ended up with is num_folders(A, B, C).",
          "\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef folders_created(files, deleted, files_per_folder):\n  return (files - deleted) // files_per_folder\n  \nprint(folders_created(A,B,C))",
          "\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef FolderCount(A, B):\n  C = A - B \n  return C // 5\n\nAnswer = FolderCount(A, B)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Nancy had 80 files on her computer. She deleted 31 of them and put the rest into folders with 7 files in each one. How many folders did Nancy end up with? ",
      "final_answer": 7.0,
      "index": 519
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 40,
      "duration": 29.558881044387817,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef num_group(A, B, C): \n  return (A - B) / C\n  \nprint(num_group(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef TriviaTeam(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef students_in_groups(A, B, C):\n    return int((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef trivia_group(a,b,c):\n    return (a-b)/c\n\nprint(trivia_group(A,B,C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_sizes(A, B, C): \n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef TriviaTeamGroups(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B /C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n    return (A - B) / C",
          "\n\nAnswer = A-B / C"
        ],
        [
          "\n\ndef group_trivia(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef student_groups(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef triviaTeam(A, B, C):\n  return (A-B) / C\n\nprint(triviaTeam(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef number_per_group(A, B, C):\n  return (A - B)//C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numGroup(A, B, C):\n  return (A - B) // C",
          "\nAnswer =A - B / C"
        ],
        [
          "\n\ndef triviaGroupSize(A, B, C):\n  return (A - B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef students_per_group(a, b, c):\n  return (a - b) // c",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_size(A, B, C):\n    return int((A - B) / C)",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  return int((A-B) / C)\n\nprint(students_per_group(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_per_team(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A-B/C"
        ]
      ]
    },
    "source": {
      "question": " There are 36 students trying out for the school's trivia teams. If 9 of them didn't get picked for the team and the rest were put into 3 groups, how many students would be in each group? ",
      "final_answer": 9.0,
      "index": 520
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 40,
      "duration": 32.38376712799072,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef numberOfPies (A, B, C): \n  return (A-B)/C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculatePies(A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef makePies(A, B, C):\n  remainApples = A - B\n  pies = remainApples / C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C): \n  pies = (A - B) // C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef make_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef apple_pies(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies_from_apples(a, b, c):\n  return (a - b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a, b, c):\n  return (a - b) // c\n  \npies(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef applePies(A, B, C):\n  pies = (A - B) / C\n  return pies",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_pies(A, B, C): \n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A - B) // C",
          " \nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateNumberOfPies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    remainder = A - B\n    return remainder // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C\n\nprint(pies(A, B, C))",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef numOfPies(apples, perPerson, forPie):\n  totalApples = apples - (perPerson * forPie)\n  pies = totalApples / forPie\n  return pies\n\nprint(numOfPies(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef apple_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 96 apples. For lunch they handed out 42 to students and decided to use the rest to make pies. If each pie takes 6 apples, how many pies could they make? ",
      "final_answer": 9.0,
      "index": 521
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.17822289466858,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef cages(A, B, C):\n  return (A - B) // C\n  \n#Example\ncages(4, 1, 2) #returns 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cagesUsed(A, B, C):\n  return (A - B)//C\n  \n#Example\n#Let A = 24 puppies, B = 12 puppies, and C = 3 puppies in each cage\n\n#Output\ncagesUsed(24, 12, 3)\n# Outputs 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A-B)//C   + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n    numCages = (A - B) / C\n    return numCages",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(A,B,C):\n    return (A-B)//C\n\nprint(num_cages(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef answer(A, B, C):\n    return (A - B) // C\n\nprint(answer(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(a, b, c):\n  num_cages = (a - b) // c\n  return num_cages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A,B,C):\n  return (A-B)//C\n  \nnum_cages(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef total_cages(a, b, c): \n  return (a - b) // c\n  \nprint(total_cages(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n\ncages_used(A, B, C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef number_of_cages(A, B, C):\n  return (A-B) // C\n\nprint(number_of_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A - B) // C\n\nprint(num_cages(10, 3, 2))\n#prints 4",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numCages(A, B, C): \n  numCages = (A - B) // C\n  return numCages",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef pet_store_cages(a, b, c):\n  return (a - b) // c\n\nprint(pet_store_cages(10, 4, 3))\n# Returns 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pet_store(A, B, C):\n  num_cages = (A - B) / C\n  return int(num_cages)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return ((A - B)//C) + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_cages(A, B, C):\n  return (A - B) // C\n  \nprint(number_of_cages(7, 2, 3))\n# This will print 2, as (7 - 2) divided by 3 is 2.",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A - B) // C\n\nprint(num_cages(10, 5, 2))\n# Output: 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store_cages(A,B,C):\n  return (A - B) // C\n\npet_store_cages(10,2,3)  # Returns 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calcCagesUsed(a,b,c):\n  return (a-b)//c\n  \nAnswer: \n\ncalcCagesUsed(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B) // C\n  \nprint(num_cages(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A,B,C):\n  return (A - B) // C\n\n# Example\ncages_used(20, 7, 3) # 3",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_of_cages (a, b, c):\n  return (a - b) // c\n  \nprint(num_of_cages(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A,B,C):\nreturn (A - B)/C;",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 64 puppies. In one day they sold 28 of them and put the rest into cages with 4 in each cage. How many cages did they use? ",
      "final_answer": 9.0,
      "index": 522
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 46,
      "duration": 39.61233615875244,
      "templates": [
        "Edward was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a Python function that returns the answer.",
        "Edward was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_boxes(A, B, C):\n  return (A - B) // C\n  \nAnswer: num_boxes(A, B, C)",
          "\n\nAnswer = (B - (B % C)) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_boxes(a,b,c):\n  return (a-b)//c\n  \n# Call the function\nnum_of_boxes(a,b,c)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_boxes(A,B,C):\n  return (A - B) // C  \n  \nprint(number_of_boxes(25,10,5))  #prints 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n  return (A-B)//C + 1\n\nnum_boxes(A, B, C)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef numOfBoxes(A, B, C):\n  return (A - B) // C\n\nnumOfBoxes(A,B,C)",
          "\nAnswer = (B - (B % C))/C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a-b)//c\n  \nnum_boxes(10, 2, 3) #returns 2",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef packageGames(A, B, C): \n  return (A - B) // C",
          "\n\nA-B/C = Answer\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef boxes_used(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef number_of_boxes(a,b,c):\n  return (a - b) // c\n\n# Call the function\nprint(number_of_boxes(a,b,c))",
          "\n\nAnswer = (B-A) / C +1"
        ],
        [
          "\n\ndef num_boxes(a,b,c):\n    boxes_needed = (a-b) // c \n    if (a-b) % c > 0:\n        boxes_needed += 1\n    return boxes_needed\n\nnum_boxes(a,b,c)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef number_of_boxes(A, B, C):\n  return (A - B) // C\n\nnumber_of_boxes(A, B, C)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A-B) // C + 1",
          "\n\nAnswer = (B - A)/C"
        ],
        [
          "\n\ndef boxes(A,B,C):\n  return (A - B) // C + 1",
          "\n\nAnswer = (B \u2212 A) / C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a-b) // c + 1\n\nnum_boxes(a, b, c)",
          "\n\nAnswer = (B / C)"
        ],
        [
          "\n\ndef boxes(a, b, c):\n\treturn (a-b)//c\n\nprint(boxes(10, 5, 3)) # Prints 2",
          "\n\nAnswer = (B-A) / C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a-b)//c + 1 # Divide the number of games not sold (a-b) by the number of games in each box (c) and round up to the nearest whole number\n  \nnum_boxes(10, 5, 4) # Returns 2",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef numberOfBoxes(a, b, c):\n    return (a-b) // c \nnumberOfBoxes(a, b, c)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          " \n\ndef gameBoxes(a, b, c): \n    return math.ceil((a - b) / c)",
          "\nAnswer = (B/C) rounded up to the next highest Integer"
        ],
        [
          "\n\ndef num_of_boxes(a, b, c):\n  return (a - b) // c\n  \nprint(num_of_boxes(A, B, C))",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A-B)//C + 1",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef boxesUsed(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_of_boxes(a, b, c):\n  return (a-b)//c\n\nprint(num_of_boxes(10, 4, 2))\n# Output: 3",
          "\nAnswer = (B/C)"
        ],
        [
          "\n\ndef box_calc(a,b,c):\n  if a<b:\n    return 0\n  else:\n    return (a-b) // c + 1\n\nprint(box_calc(a,b,c))",
          "\nAnswer = (B-A)/C"
        ]
      ]
    },
    "source": {
      "question": " Edward was selling his old games. He started out with 35 but sold 19 of them. He packed the rest up putting 8 games into each box. How many boxes did he have to use? ",
      "final_answer": 2.0,
      "index": 523
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 24,
      "duration": 17.290165901184082,
      "templates": [
        "Frank made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Frank made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef games_purchasable(A, B):\n  return (A-B) / C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef game_purchase(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateGames(A, B):\n  return (A-B)/C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B): \n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_buyer(A,B):\n  return (A-B)/C",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef money_left_for_games(A, B):\n C = A - B\n return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawn_games(A, B):\n  return int((A - B) / C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_bought(a, b):\n  return (a-b)/c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  money_left = A - B\n  num_games = money_left/C\n  return num_games",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B):\n  money_left = A - B\n  num_games = money_left / C\n  return num_games",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n  amount = A - B\n  number_of_games = amount // C\n  return number_of_games",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_games(A,B):\n  return (A-B)//C",
          "\nAnswer = (A - B)/C"
        ]
      ]
    },
    "source": {
      "question": " Frank made 19 dollars mowing lawns over the summer. If he spent 11 dollars buying new mower blades, how many 2 dollar games could he buy with the money he had left? ",
      "final_answer": 4.0,
      "index": 524
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 40,
      "duration": 30.80129885673523,
      "templates": [
        "Megan had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a Python function that returns the answer.",
        "Megan had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef num_problems_per_page(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problem_nums (A, B, C):\n  return (A - B) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return (A - B) / C\n  \nanswer = homework_problems(A, B, C)\nprint(answer)",
          "\nAnswer = (A-B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problems_per_page(A,B,C):\n  return (A-B) / C\n\nprint(problems_per_page(A,B,C))",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_of_problems(a,b,c):\n  return (a-b) / c\n\nprint(num_of_problems(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef page_prob_num (A, B, C):\n  return int((A - B) / C)\n\npage_prob_num(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problems_per_page(problems_done, total_problems):\n  return (total_problems - problems_done) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_problems(a, b, c):\n  return (a - b) / c\n\nprint(num_problems(A, B, C))",
          "\nAnswer = A/C"
        ],
        [
          "\n\ndef num_problems(a, b, c):\n  return (a-b)//c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef page_problem(a, b, c):\n  return (a-b) // c \n  \nanswer = page_problem(A, B, C)",
          "\n\n Answer = C / B"
        ],
        [
          "\n\ndef problems_per_page(A, B, C): \n  return (A-B) // C",
          " followed with the answer\nAnswer = C / B"
        ],
        [
          "\n\ndef problemsPerPage(A, B, C):\n  return (A - B) / C\n  \nprint(problemsPerPage(A, B, C))",
          "\n\nAnswer = C/B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef number_of_problems (A, B, C):\n  return (A-B)//C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_problems_per_page(A,B,C):\n  return (A-B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_prob(A, B, C):\n  num_prob = (A-B)/C\n  return num_prob\n\nprint(num_prob(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C):\n  return (A - B) // C\n\nprint(num_problems_per_page(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pages_problems(A,B,C):\n  return (A - B) / C\n\nprint(pages_problems(A,B,C))",
          "\nAnswer = C/B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B) / C"
        ]
      ]
    },
    "source": {
      "question": " Megan had 40 homework problems. She finished 26 of them but still had 2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ",
      "final_answer": 7.0,
      "index": 525
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 42,
      "duration": 40.21905016899109,
      "templates": [
        "Wendy picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a Python function that returns the answer.",
        "Wendy picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0
      ],
      "completions": [
        [
          "\n\ndef wendyBouquets(A, B, C):\n  return (A-C)/B    # This returns the number of bouquets Wendy can still make.",
          "\n\nAnswer = (A - C) / B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef bouquets (A, B, C): \n  return (A-C)//B \n\nprint(bouquets(50, 10, 5)) \n\nThis prints '4'.",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef get_num_bouquets(A, B, C):\n  return (A-C)//B\n\nprint(get_num_bouquets(15, 5, 3)) #returns 2",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquets_made(A,B,C):\n  return (A-C)//B\n  \nbouquets_made(20,5,3)\n# Output: 3",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\ndef bouquets(A, B, C):\n  answer = (A - C) // B\n  return answer",
          "\n\nAnswer = [(A - C)  / B]"
        ],
        [
          "\n\ndef numberOfBouquets(A, B, C):\n  return (A - C) // B\n\nnumberOfBouquets(50, 10, 15) # returns 3",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef count_bouquets(A, B, C):\n  return (A - C) // B\n  \n#Example\nprint(count_bouquets(10, 3, 2))\n#Output: 3",
          "\n\nAnswer = B - C"
        ],
        [
          "\n\ndef num_bouquets(a, b, c):\n  return (a-c)//b\n  \n#Example\nnum_bouquets(10, 3, 2) = 2",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          " \n\ndef flower_bouquets(A, B, C):\n  return (A-C)//B\n\n# Call function\nflower_bouquets(10, 2, 4) \n# Returns 3",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef make_bouquets(a, b, c):\n  return (a - c) // b\n\n# if delphiniums were chosen and 10 wilted, the number of bouquets would be\nprint(make_bouquets(30, 10, 10)) # should return 2",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef calculate_bouquets():\n    A = int(input(\"How many A flowers had been picked? \"))\n    B = int(input(\"How many B flowers are in a bouquet? \"))\n    C = int(input(\"How many of the flowers wilted? \"))\n    \n    return (A-C)//B\n\nanswer = calculate_bouquets()\n\nprint(f\"Wendy can still",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef calculate_number_of_bouquets(a,b,c):\n  return (a-c) // b\n  \nprint(calculate_number_of_bouquets(30, 10, 8)) # returns 2",
          "\nAnswer = (A - C)/B"
        ],
        [
          "\n\ndef bouquets(a, b, c):\n  return (a-c) // b\n  \nbouquets(A, B, C)",
          "\nAnswer = A - C / B"
        ],
        [
          " \n\ndef flower_bouquets(A, B, C): \n  return (A - C) // B",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef make_bouquets(A, B, C): \n  return (A-C)//B\n\nprint(make_bouquets(20, 5, 2)) # prints 3",
          "\nAnswer =(A - C)/B"
        ],
        [
          "\n\ndef make_bouquets(a, b, c):\n  return (a - c) // b \n  \nprint(make_bouquets(A, B, C))",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef calculate_bouquets(A, B, C): \n  return (A-C) // B\n  \ncalculate_bouquets(15, 3, 2) #Returns 4",
          "\nAnswer = (A - C) / B bouquets"
        ],
        [
          "\n\n\ndef calculateBouquets(a, b, c): \n  remaining = a - c\n  if (remaining == 0):\n    return 0\n  else:\n    return int(remaining / b)\n  \nprint(calculateBouquets(A, B, C))",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquet_checker(A, B, C):\n  total_flowers = A + B\n  potential_bouquets = total_flowers // B\n  remaining_bouquets = potential_bouquets - (C // B)\n  return remaining_bouquets\n  \nprint(bouquet_checker(10, 5, 2)) # prints 3",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef wiltCalc(A, B, C):\n    return (A-C)//B\n    \n#Example:\nwiltCalc(20, 3, 2)\n#Answer: 6",
          "\nAnswer = (A - C) / B\n"
        ],
        [
          "\n\ndef make_bouquets(A, B, C):\n  return (A-C)//B\n\nmake_bouquets(20, 5, 2)  # returns 3",
          "\nAnswer = (A - C) / B"
        ]
      ]
    },
    "source": {
      "question": " Wendy picked 103 flowers for her friend\u2019s wedding. She was making bouquets with 8 flowers in each one. If 47 of the flowers wilted before the wedding, how many bouquets could she still make? ",
      "final_answer": 7.0,
      "index": 526
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 30,
      "duration": 24.50538992881775,
      "templates": [
        "Kaleb had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a Python function that returns the answer.",
        "Kaleb had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef pieces_per_load(A, B):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef clothing_calculator(A, B, C):\n  return (A - B) / C\n  \nAnswer = clothing_calculator(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef piecesOfClothing(A, B, C):\n  return (A - B) / C\n\nprint(piecesOfClothing(10, 5, 2)) # Prints 2.5",
          "\nAnswer = (A-B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_in_each_load(pieces, large_load):\n  small_loads = pieces - large_load\n  pieces_per_small_load = small_loads // 3\n  return pieces_per_small_load\n\nanswer = num_in_each_load(A, B)\nprint(answer)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef clothes_washing(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef small_load(A, B):\n  C = A - B\n  return C // 3",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef split_load(A, B):\n    \n    C = A - B\n    return C // 3",
          "\nA-B = C\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef ClothingLoads(A, B):\n  C = A - B\n  return int(C/2)\n  \nprint(ClothingLoads(A, B))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef find_clothing_split(A, B):\n  C = (A - B)/3\n  return C\n\nanswer = find_clothing_split(A, B)",
          "\n\nA - B - C = D\nAnswer = (A - B) / C = D"
        ],
        [
          "\n\ndef small_loads(A, B):\n    C = (A - B) / C\n    return C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_clothes_per_load(A, B):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef clothes_load(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef smallLoads(A,B,C):\n  return int((A-B)/C)",
          "\n\nA - B = C\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef LoadsOfClothing(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb had 39 pieces of clothing to wash. He put 19 of them in one load, but decided to split the rest into 5 equal loads. How many pieces of clothing could go in each of the small loads? ",
      "final_answer": 4.0,
      "index": 527
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 47.559494733810425,
      "templates": [
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a Python function that returns the answer.",
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numTables(a, b, c):\n  return (a - b) // c\n\n# Usage:\nprint(numTables(10, 5, 4))\n# Output: 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A - B) // C \n\nprint(num_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a,b,c):   \n  return a - b // c\n\nAnswer: num_tables(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef luncheon_tables(A, B, C):\n  return (A - B) // C\n\nprint(luncheon_tables(50, 10, 8)) # prints 6",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A - B) // C\n\nprint(num_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_tables(a, b, c):\n  return (a-b)//c + ((a-b)%c>0)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_tables(people, not_showing):\n  total_tables = people // not_showing \n  return total_tables\n\nanswer = number_of_tables(A, B*C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_tables(A, B, C):\n  return (A - B) // C + 1",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef tables_needed(a, b, c):\n  return ((a-b) // c) + 1",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef number_of_tables(a,b,c):\n  tables = a - b\n  return tables // c\n\nprint(number_of_tables(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a, b, c):\n  return (a - b) // c\n  \nprint(num_tables(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A,B,C):\n  return (A - B) // C + 1 \n\nprint(tables_needed(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tablesNeeded(a, b, c):\n  return (a-b) // c + 1;",
          "\n\nAnswer = A - B/C"
        ],
        [
          "\n\ndef numTablesNeeded(A, B, C):\n  return (A-B)//C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateTables():\n    A = int(input(\"Number of people invited: \"))\n    B = int(input(\"Number of people who didn't show up: \"))\n    C = int(input(\"Number of people each table holds: \"))\n    return (A-B)//C + int((A-B) % C > 0)\n\nprint(calculateTables())",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_tables(A, B, C): \n  return (A - B) // C\n  \nnum_of_tables(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lunch_tables(A, B, C):\n  return (A - B) // C\n   \n#Call the function\nlunch_tables(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef missing_tables(attendees, absent, capacity):\n  return (attendees - absent) // capacity + 1\n\nanswer = missing_tables(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_tables(a,b,c): \n  return (a-b)//c \n \nprint(\"Number of tables needed:\",num_of_tables(A,B,C))",
          "\nAnswer = (A - B) / C tables"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_calculator (A, B, C):\n  return (A - B) / C\n\nprint(table_calculator(A, B, C))",
          "\n\nAnswer = (B/C) tables"
        ],
        [
          "\n\ndef tablets_needed(num_guests_invited, num_guests_did_not_attend, num_people_per_table):\n  return (num_guests_invited - num_guests_did_not_attend) // num_people_per_table + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a, b, c):\n  return (a-b)//c\n  \n#example\n\nnum_tables(20, 8, 4)  # returns 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_table_number(total_people, absent_people, people_per_table):\n    return (total_people - absent_people) // people_per_table\n\nprint(get_table_number(A, B, C))",
          "\n\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef calculateTables(numberA, numberB, numPeoplePerTable):\n  return (numberA - numberB) // numPeoplePerTable",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A company invited 18 people to a luncheon, but 12 of them didn't show up. If the tables they had held 3 people each, how many tables do they need? ",
      "final_answer": 2.0,
      "index": 528
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 34,
      "duration": 28.40836191177368,
      "templates": [
        "Mike is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Mike with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a Python function that returns the answer.",
        "Mike is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Mike with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef totalShelvesNeeded(A, B, C):\n    return (A-B)/C\n\n#Note: This assumes that the given books are fitted exactly one upon another into rows.",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef shelf_calculator(A, B, C):\n  total_shelves = (A - B) // C\n  remainder = (A - B) % C\n  if remainder > 0:\n    total_shelves += 1\n  return total_shelves\n\nprint(shelf_calculator(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelfNeeded(A, B, C):\n   shelves_needed = (A - B) // C \n   if (A - B) % C != 0: \n      shelves_needed += 1\n   return shelves_needed\n\n# example\nprint(shelfNeeded(22, 4, 5))\n# prints 4",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelves_needed(a,b,c):\n  shelves = (a-b) // c\n  return shelves",
          "\nAnswer = (A-B) \u00f7 C"
        ],
        [
          "\n\ndef bookShelves(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  remainder = A - B\n  return remainder // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A,B,C):\n    shelf_needed=0\n    books_left=(A-B)\n    shelf_needed=(books_left / C)\n    if(shelf_needed < 1):\n        shelf_needed=1\n    return shelf_needed\n\nprint(shelves_needed(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  return (A-B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C): \n  return (A-B)//C + 1",
          " .\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  remaining_books = A - B\n  shelves = remaining_books/C\n  return shelves",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n    return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef book_shelves(A,B,C):\n  return (A-B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n    return math.ceil((A - B) / C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves(A,B,C):\n  remainder = A - B\n  return remainder // C + (remainder % C > 0)\n\nprint(shelves(A,B,C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelfCount(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A - B)//C + 1",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Mike is at the library helping put away books. There are 82 book to put away total but a librarian takes 10 of them and leaves Mike with the rest. If he can fit 9 books on a shelf, how many shelves will he need? ",
      "final_answer": 8.0,
      "index": 529
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 44,
      "duration": 36.572674036026,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef cagesUsed(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calc_cages(A, B, C):\n  return math.ceil((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(a, b, c):\n  return (a - b) // c\n\nprint(cages_used(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " The function should take in 3 variables (A, B, C).\n\ndef num_of_cages(A, B, C):\n  return (A - B) // C\n  \n# Call the function\nnum_of_cages(A, B, C)",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef numCages(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cage_number(A, B, C):\n  return (A-B)//C  # Integer division rounds down",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef puppies(A, B, C): \n  return (A - B) // C\n  \n# The number of cages would be equal to (A - B) // C:\n\nnumber_of_cages = puppies(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pets_store_cages(A, B, C):\n    return (A - B) // C\n  \nanswer = pets_store_cages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_cages(a, b, c):\n  return (a-b) // c\n\n#Example\ncalculate_cages(12, 8, 3)\n#Returns 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n  \ncages_used(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n  return (A - B) // C\n  \ncalculate_cages(A, B, C)",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef calc_num_cages(a, b, c):\n  return (a-b)//c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n    return (A-B)//C  + (A-B) % C",
          "\n\nAnswer = ((A - B) / C)"
        ],
        [
          "\n\ndef pet_store_cages(A,B,C):\n  return (A-B)//C\n  \npet_store_cages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef petStoreCages(a,b,c):\n  return (a-b)//c\n\npetStoreCages(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef find_cages(A, B, C):\n  return (A-B) // C\n  \nfind_cages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(a,b,c):\n  return (a-b)//c\n  \nprint(cages(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calc_cages(A, B, C):\n  return (A - B) // C\n\nanswer = calc_cages(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef sold_puppies(A, B, C):\n  return (A-B) // C\n\nprint(sold_puppies(20, 10, 2))\n#This will print 5 cages used.",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef cages(a, b, c):\n  return (a - b) // c\n  \nprint(cages(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store_cages(A, B, C):\n    return (A - B) // C\n    \npet_store_cages(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 78 puppies. In one day they sold 30 of them and put the rest into cages with 8 in each cage. How many cages did they use? ",
      "final_answer": 6.0,
      "index": 530
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 55.1865599155426,
      "templates": [
        "Bianca uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Bianca uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef picture_counter(a, b, c):\n  album1 = b\n  album2 = a - b\n  album3 = int(album2 / c)\n  return [album1, album2, album3]\n  \nanswer = picture_counter(A, B, C)\nprint(answer)",
          "\nAnswer = B pics in one album, (A-B)/C pics in each of the other albums."
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  return (A//(B+C), B, C)\n  \nprint(number_of_pictures(20, 10, 3))  # (2, 10, 3)",
          "\nAnswer = B + C"
        ],
        [
          "\n\ndef album_calc(A, B, C):\n  album_one = B\n  album_two = (A - B) / C\n  return album_one, round(album_two, 0)\n\nprint(album_calc(A, B, C))",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef number_of_pictures(A,B,C):\n  return A, B, C, (A // (B + C)), (A % (B + C))\n\n#call the function\nnumber_of_pictures(20,7,3)\n\n#output\n(20, 7, 3, 2, 6)",
          "\nAnswer = A/B + A/(C+1)"
        ],
        [
          "\n\ndef number_of_albums(picture_A, picture_B, picture_C):\n  return (picture_A + picture_B) // picture_C\n\nprint(number_of_albums(20, 5, 3))  # 8 pictures in each album",
          "\nAnswer = B + (C x A/C)"
        ],
        [
          "\n\ndef pic_counter(A, B, C):\n  album1 = B\n  album2 = A - B\n  album3 = album2/C\n  album4 = album2%C\n  return album1, album3, album4\n\nanswer = pic_counter(A, B, C)\nprint(\"The number of pictures in each album is:\", answer)",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef albums(A, B, C):\n  return [B, (A-B)/C, (A-B)/C, (A-B)/C]",
          "\n\nAnswer = A / (B + C)"
        ],
        [
          "\n\n\ndef count_pictures(A, B, C):\n  per_album = A // (B + C)\n  return per_album\n\ntotal_pictures = count_pictures(A, B, C)\n\nprint(f\"Album A: {B} pictures, Album B: {per_album} pictures, Album C: {per_album} pictures\")",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef num_album_pictures(albumA, albumB, albumC):\n  return [albumA, albumB, albumC]\n\nprint(num_album_pictures(A,B,C))",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef album_answers(A, B, C): \n  return (A//(B+C), B, A-((A//(B+C))*(B+C))) \n  \nalbum_answers(A, B, C)",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef album_count(A, B, C):\n  return A/B + C",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef num_of_pics(a,b,c):\n  return [a-b, b/c, (a-b)/c]\n\nprint(num_of_pics(A, B, C))",
          "\nAnswer = A\u00f7(B+C)"
        ],
        [
          "\n\ndef answer(A, B, C):\n  ans = [B,A-B]\n  for i in range(C):\n    ans.append((A-B)/C)\n  return ans\n\nprint(answer(A, B, C))",
          "\nAnswer = A/B - C"
        ],
        [
          "\n\ndef pictures(A, B, C):\n  per_album = A // (B + C)\n  first_album = B * per_album\n  rest_album = C * per_album\n  return first_album, rest_album\n\nprint(pictures(A, B, C))",
          "\nAnswer = A/B+(A-B)/C"
        ],
        [
          "\n\ndef numberOfPics(A, B, C):\n  return ((A-B)/C, B)",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          " \n\ndef number_of_pics(A, B, C):\n  return A, B//C, (A-B)//C\n\nA is the total number of pictures, B is the number of pictures in one album, and C is the number of different albums. \n\nFor example, if A=30, B=10, and C=3, the function would return 30, 3, and 3.",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef calculate_albums(A, B, C):\n  album1 = B\n  album2 = A - B\n  album3 = album2 / C\n  return album1, album2, album3",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef count_albums(A, B, C):\n  album_A = B\n  album_C = (A - B)/C\n  return album_A, album_C\n\nalbum_A, album_C = count_albums(A, B, C)\nprint(\"Album A contained {} pictures and Album C contained {} pictures\".format(album_A, album_C))",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef album_calculator(a,b,c): \n  return b +  (a - b) / c\n  \nalbum_calculator(A,B,C)",
          "\n\nA/B + (A-B)/C = Answer\nAnswer = (A/C) + (B/C)"
        ],
        [
          "\n\ndef picsPerAlbum(a, b, c):\n  return a//(b+c), a%(b+c)\n\nprint(picsPerAlbum(A, B, C))",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef album_divider(total_pics, num_albums):\n    if num_albums == 1:\n        return total_pics\n    else:\n        return total_pics // num_albums",
          "\nAnswer = A/ (B+C)"
        ],
        [
          "\n\ndef album_pic_numbers(A, B, C):\n  album1 = B\n  album2 = A-B\n  album3 = album2/C \n  return (album1, album2, album3)",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef number_of_photos(A,B,C):\n  return (B//C, A-B)\n\nprint(number_of_photos(A,B,C))",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef photos_in_albums(A,B,C):\n  return A//(B+C), (A-B)//C, A%C\n\nphotos_in_albums(50,10,5)\nThis function should return (5,8,2), meaning 5 photos in the first album, 8 photos in each of the other albums, and 2 photos in the last album.",
          "\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef numPictureAlbums(A,B,C):\n  Album1 = A // B\n  Album2 = A // C\n\n  return Album1, Album2\n  \nprint(numPictureAlbums(10,5,2))",
          "\nAnswer = A / (B + C)"
        ]
      ]
    },
    "source": {
      "question": " Bianca uploaded 33 pictures to Facebook. She put 27 pics into one album and put the rest into 3 different albums. How many pictures were in each album? ",
      "final_answer": 2.0,
      "index": 531
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 34,
      "duration": 30.129109144210815,
      "templates": [
        "Emily's team won their dodgeball game and scored A points total. If Emily scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a Python function that returns the answer.",
        "Emily's team won their dodgeball game and scored A points total. If Emily scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef players(A, B, C):\n  return (A - B) / C\n\nprint(players(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_members(A, B, C):\n  return (A - B) / C\n\nprint(team_members(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_members(A, B, C):\n  return (A - B) / C\n\nprint(team_members(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef dodgeball_calc(A, B, C):\n  return (A - B) / C\n  \nanswer = dodgeball_calc(A, B, C)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef n_players(A, B, C): \n  return (A - B)//C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef total_players(a, b, c):\n    return (a - b) / c\n\ntotal_players(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_size(A, B, C):\n  return (A - B) // C + 1\n  \n# Call the function\nteam_size(20, 5, 3)  # Answer: 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef teamSize(A,B,C):\n  return (A-B)//C + 1\n  \nteamSize(24, 8, 3)  # Returns 5",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_players(A, B, C):\n  return ((A - B) // C) + 1\n\nprint(number_of_players(20, 8, 4)) # Output: 4",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef players(A, B, C):\n  return int((A - B) / C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef team_size(a, b, c):\n  return (a - b) / c\n\n#For example, if Emily's team won 10 points, she scored 6 points, and everyone else scored 2 points each:\n\nteam_size(10, 6, 2) #returns 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef players_on_team(A, B, C):\n  return (A - B) // C + 1\n\nplayers_on_team(20, 5, 4)  # Returns 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_size(A, B, C):\n    return (A-B)/C + 1\n\nteam_size(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_players(A, B, C): \n    return (A - B) // C + 1\n\nprint(num_players(20, 10, 3)) \n# Output: 4",
          "\n\nAnswer = (A - B) / C + 1"
        ],
        [
          "\n\ndef total_players(A,B,C):\n  return (A-B)//C + 1 \n\nprint(total_players(20, 8, 3)) #prints 5",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef players (A,B,C):\n  return (A - B) // C + 1\n\nplayers (30, 15, 4)\nAnswer: 4",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calc_team_size(A, B, C):\n  team_size = (A - B) / C\n  return int(team_size)",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Emily's team won their dodgeball game and scored 39 points total. If Emily scored 23 of the points and everyone else scored 2 points each, how many players were on her team? ",
      "final_answer": 8.0,
      "index": 532
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 44,
      "duration": 42.625288009643555,
      "templates": [
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a Python function that returns the answer.",
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef for_luncheons (A, B, C):\n    return (A - B) / C\n\nluncheons = for_luncheons(A, B, C)\n\nprint(luncheons)",
          "\nAnswer = (A - B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numTables(a, b, c): \n    return (a-b)//c\n\n# example:\nnumTables(13, 4, 8) # returns 1",
          "\n(A-B)/C = Answer\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef luncheon_tables(a, b, c): \n  return (a - b) // c + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_tables(A, B, C):\n  return (A-B) // C\n\nprint(num_of_tables(10, 4, 2))\n# prints 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lunch_table_num(num_invitees, non_attendees, people_per_table):\n  tables_needed = (num_invitees - non_attendees) / people_per_table\n  return tables_needed\n\nanswer = lunch_table_num(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_tables(a, b, c): \n  return (a - b)//c\n\nnum_of_tables(A,B,C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_tables(a, b, c):\n  return (a - b) // c\n  \nprint(num_of_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(attendees, no_show):\n  people_per_table = C \n  return (attendees - no_show) / people_per_table\n  \nprint(tables_needed(A, B))",
          "\n\nAnswer = (A - B) / C;"
        ],
        [
          "\n\ndef table_calculator(a, b, c):\n  return (a-b)//c\n\nprint (table_calculator(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef luncheon_table_count(num_people, no_show):\n  return (num_people - no_show) // c  + (1 if (num_people - no_show) % c > 0 else 0)\n\nluncheon_table_count(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef calculate_num_tables(attendees, absent):\n  return (attendees - absent) // c\n\nprint(calculate_num_tables(A, B, C))",
          "\nAnswer = ((A - B) / C)"
        ],
        [
          "\n\ndef tables_needed(a, b, c):\n    return (a - b) / c\n\nprint(tables_needed(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_tables(attendees, absent):\n  return (attendees - absent) // C + ((attendees - absent) % C > 0)\n  \nprint(calculate_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\nLet A = number of people invited, B = number of people who didn't show up, and C = number of people each table can hold. \n\ndef num_tables(A, B, C): \n  return (A - B)//C\n\nprint(num_tables(30, 6, 5))\n#Prints 5",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_tables(people_invited, people_showing):\n  return people_invited/people_showing\n\nprint(number_of_tables(A, B*C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTables(numGuests, numAbsent):\n  return int((numGuests - numAbsent) / C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTablesNeeded(a, b, c):\n  neededTables = (a - b) // c\n  return neededTables",
          "\nAnswer = $\\frac{A}{C}$"
        ],
        [
          "\n\ndef count_tables(a,b,c):\n  return (a-b)//c\n\nprint(count_tables(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_calculation(attendees, no_show):\n  seats_needed = attendees - no_show\n  tables = seats_needed // C\n  if (seats_needed % C != 0):\n    tables += 1\n  return tables",
          "\nAnswer = A/C"
        ],
        [
          "\n\ndef find_tables_needed(people_invited, people_showed):\n  tables_needed = people_invited / people_showed\n  return tables_needed\n\ntables_needed = find_tables_needed(A, B, C) \nprint(tables_needed)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_tables(a, b, c):\n  return (a - b) // c\n\nprint(number_of_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A company invited 47 people to a luncheon, but 7 of them didn't show up. If the tables they had held 5 people each, how many tables do they need? ",
      "final_answer": 8.0,
      "index": 533
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 24,
      "duration": 19.811632871627808,
      "templates": [
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef tables(A,B,C):\n  return (A-B)/C\n\nresult = tables(A,B,C)\nprint(result)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef tables(A, B, C):\n  return (A-B)/C\n\nprint(tables(20, 4, 5))\n\nThis will return 4 tables.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_number_of_tables(A, B, C):\n  return (A-B) / C\n\nanswer = get_number_of_tables(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n    return (A - B) / C\n    \nprint(num_tables(10, 2, 4)) # answer = 1.5",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef waiter_tables(A, B, C):\n  return (A-B)//C\n\nprint(waiter_tables(10, 5, 4)) # Answer: 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_tables(A, B, C):\n    return (A-B)//C\n\n# Test - should return 3\nnumber_of_tables(10, 2, 3)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_tables(A, B, C):\n  return (A-B)//C\n  \nprint(number_of_tables(10, 2, 4))  # prints 2",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef totalTables(A, B, C): \n  return (A - B) // C \n  \ntotalTables(10, 3, 2) # Returns 4",
          "\n\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables(A, B, C):\n  return (A - B) // C\n  \n# Test\ntables(25, 10, 4)  # Returns 5",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef total_tables(a, b, c):\n  return (a-b)//c\n\nprint(total_tables(20, 4, 3))\n# Output: 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_tally(A, B, C):\n  return (A-B)//C\n  \n  #call the function\n  table_tally(A, B, C)",
          "\n\nAnswer = ((A - B) / C)"
        ],
        [
          "\n\ndef numTables(A, B, C):\n  return (A - B) // C \n  \nanswer = numTables(A, B, C)",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 44 customers in his section. If 12 of them left and the rest of his tables had 8 people at each table, how many tables did he have? ",
      "final_answer": 4.0,
      "index": 534
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.22060489654541,
      "templates": [
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A-B)//C + 1\n\nprint(shelves_used(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A-B) // C\n  \nshelves = calculate_shelves(A, B, C)",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A-B) // C\n\n# output\nprint(shelves_used(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef shelfCalc(A, B, C):\n  return (A - B) / C\n\nprint(shelfCalc(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\n\ndef num_shelves(A, B, C):\n    return (A-B)//C\n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef num_shelves(a, b, c): \n  return (a - b) // c\n  \nnum_shelves(A, B, C)",
          "\n\nAnswer = (B / C) = Shelfs Used"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    return (A - B) // C\n    \nprint(calculate_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n  return (A - B) // C\n\n# for example, if A = 9, B = 2, and C = 3, the answer would be:\nprint(numShelves(9, 2, 3))\n# prints 3",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n  return (A - B) // C\n  \nprint(numShelves(A, B, C))",
          "\n\nA - B = C\nC / A = Shelves\nAnswer = (A-B)/A = Shelves"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  shelves = (A-B)//C\n  return shelves",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef findShelves(A, B, C):\n    totalBooks = A - B\n    shelves = totalBooks / C\n    return int(shelves)\n\nprint(findShelves(A=10, B=5, C=3))\n# Answer: 2 shelves",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef answer (A, B, C):\n  return (A - B) // C",
          " \nAnswer = B/C"
        ],
        [
          "\n\ndef shelves_used(A,B,C):\n    return (A-B)//C \n\nshelves_used(A,B,C)",
          "\nAnswer = C * B / A"
        ],
        [
          "\n\ndef num_shelves(A, B, C): \n    return (A - B) // C\n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A-B)//C\n\nprint(shelves(A,B,C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves_for_coloring_books(a, b, c):\n  num_shelves = (a-b)//c\n  return num_shelves",
          "\n\nAnswer = (B/C)"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C \n\nprint(shelves(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_used(a,b,c):\n    shelves = (a - b)//c\n    return shelves\n\nprint(shelves_used(A,B,C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C): \nreturn (A - B) // C \n  \nprint(shelves(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef shelves(A, B, C):\n  return (A - B) // C\n\nprint(shelves(A, B, C))",
          "\n\nAnswer = (B/C) + 1"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A-B)//C\n   \nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A - B) // C\n  \nprint(shelves_used(A, B, C))",
          "\nA - B = C\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  return A-B//C\n\nprint(shelf_count(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelf_num(A,B,C):\n  shelves = (A-B)//C\n  return shelves",
          "\n\nA - B =C\nC/A = Answer = Shelves Used \nAnswer = Shelves Used = C/A"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C): \n  return (A - B) / C \n\nprint(shelvesUsed(A, B, C))",
          "\nAnswer = B / C"
        ]
      ]
    },
    "source": {
      "question": " A store had 40 coloring books in stock. They ended up putting them on sale and getting rid of 20 of them. The put the ones they still had onto shelves with 4 on each shelf. How many shelves did they use? ",
      "final_answer": 5.0,
      "index": 535
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 50,
      "duration": 36.23835492134094,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0
      ],
      "completions": [
        [
          "\n\ndef getGroupSize(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_students_in_each_group(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef group_size(A, B, C): \n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_team(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef groupSize(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_trivia_students(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_stud_per_group(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef group_division(A, B, C):\n    return (A-B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_students(a, b, c):\n  return (a-b)//c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numberOfStudentsInEachGroup(A,B,C):\n  return ((A - B) // C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef students_in_group (A, B, C):\n    return (A - B) / C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_students_in_group(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_num_stud(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef groupSize(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numInGroup(A, B, C):\n  return (A - B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef determine_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef find_team_size(A,B,C):\n  return int((A-B)/C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  return (A-B)//C",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_in_group(a, b, c):\n    return (a - b) // c \n\nprint(num_in_group(a, b, c))",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_in_groups (A,B,C):\n\n\treturn int(round((A-B)/C))",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef student_groups(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef trivia_groups(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numStudents(A, B, C): \n    return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef trivia_team_division(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_students_in_each_group(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ]
      ]
    },
    "source": {
      "question": " There are 64 students trying out for the school's trivia teams. If 36 of them didn't get picked for the team and the rest were put into 4 groups, how many students would be in each group? ",
      "final_answer": 7.0,
      "index": 536
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 45.02135705947876,
      "templates": [
        "Kaleb was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a Python function that returns the answer.",
        "Kaleb was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef answer(A, B, C):\n  return (A - B) // C\n  \nIf A = 20, B = 15, and C = 4, the answer would be 1.",
          "\nAnswer = (B-A) / C"
        ],
        [
          "\n\ndef num_boxes(a,b,c):\n  return (a - b) // c\n\nprint(num_boxes(10,5,2)) # Output: 2",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef findNumberOfBoxes(A, B, C):\n  return (A-B) // C \n  \nprint(findNumberOfBoxes(A,B,C))",
          "\n\nAnswer = (B/(C)) + ((B%C)/C)"
        ],
        [
          " \n\ndef num_boxes(a, b, c):\n  return (a-b) // c + 1",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef calc_boxes(A,B,C):\n  number_of_boxes = (A - B) // C\n  if (A - B) % C > 0:\n    number_of_boxes += 1\n  return number_of_boxes \n  \nans = calc_boxes(A,B,C)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef gamesToBoxes(a,b,c):\n  return (a-b)//c\n\ngamesToBoxes(a,b,c)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef findNumBoxes(A, B, C):\n  boxes = (A - B) // C\n  return boxes",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_boxes(A, B, C):\n  return (A-B)//C + (1 if (A-B) % C > 0 else 0)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(a, b, c): \n  boxes_needed = int((a-b)/c)\n  if (a-b) % c > 0:\n    boxes_needed += 1\n  return boxes_needed\n\nprint(num_boxes(a, b, c))",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef boxes_needed(A, B, C):\n    return (A-B)//C + (A-B)%C != 0\n\nprint(boxes_needed(A, B, C))",
          "\n\nAnswer = (B + C - 1) / C"
        ],
        [
          "\n\ndef findBoxes(A, B, C): \n  return (A-B)//C + ((A-B) % C > 0)\n\n#Calling the Function \nprint(findBoxes(25, 10, 5))",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          " \n\ndef boxes_needed(A, B, C): \n  return (A - B) // C \n\nThe number of boxes Kaleb needed is (A - B) // C.",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef num_of_boxes(a, b, c): \n  return (a - b) // c + 1",
          "\nAnswer = (B-A)/C"
        ],
        [
          " \n\ndef num_boxes(a, b, c):\n  return (a - b) // c\n\nnum_boxes(a, b, c)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef calculate_boxes(a,b,c): \n  return (a-b)//c\n  \ncalculate_boxes(a,b,c)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef game_boxes(a, b, c):\n  boxes = (a - b) // c\n  if (a - b) % c != 0:\n    boxes += 1\n    return boxes\n  return boxes",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a - b) // c\n\nnum_boxes(a, b, c)",
          "\n\nAnswer = (B-A) / C"
        ],
        [
          "\n\ndef find_num_of_boxes(A, B, C):\n  return (A-B) // C\n  \n  \n#For example:\nfind_num_of_boxes(20, 10, 4)\n#>> 2",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef gamesToBoxes(a, b, c):\n\n  remainder = a - b \n  boxes = remainder // c\n  if remainder % c != 0:\n    boxes +=1\n\n  return boxes \n\nprint(gamesToBoxes(8, 3, 4))",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          " Assume A, B, and C have already been given values.\n\ndef box_games(A, B, C):\n  return math.ceil(A - B / C)",
          "\n\nAnswer = (B-A) / C"
        ],
        [
          " \n\ndef num_boxes(A, B, C): \n  return (A - B) // C + 1",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef num_of_boxes(A, B, C): \n  return (A - B) // C\n\nprint(num_of_boxes(A, B, C))",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef boxesNeeded(A, B, C):\n\treturn (A - B) // C\n\nprint(boxesNeeded(8, 4, 3))\n# Output: 1",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef boxes(A,B,C):\n    return (A-B) // C\n\n# For example, if A = 50, B = 20, and C = 10, the answer should be 3.",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a - b) // c\n\nnum_boxes(a, b, c)",
          "\n\nAnswer = (B-A) / C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb was selling his old games. He started out with 76 but sold 46 of them. He packed the rest up putting 5 games into each box. How many boxes did he have to use? ",
      "final_answer": 6.0,
      "index": 537
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.30185914039612,
      "templates": [
        "Jerry is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Jerry with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a Python function that returns the answer.",
        "Jerry is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Jerry with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_shelves(a, b, c):\n  return (a-b)//c + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n    return (A - B) // C + 1\n\nprint(shelvesNeeded(96, 5, 8)) #12",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A-B)//C + 1 if (A-B) % C > 0 else (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelveBooks(A, B, C):\n    numShelves = (A-B) // C\n    if (A-B) % C > 0:\n        numShelves += 1\n    return numShelves",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_num(a, b, c):\n  return ((a - b) // c + 1)\n  \nprint(shelf_num(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(A,B,C):\n    num_shelves = (A - B) // C\n    if (A - B) % C != 0:\n        num_shelves += 1\n    return num_shelves",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef book_shelves(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelf_calc(a,b,c): \n    shelves = (a-b)//c\n    if (a-b)%c >0:\n        shelves += 1\n    return shelves\n\nprint(shelf_calc(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n  return (A-B) // C + 1",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef number_of_shelves(a, b, c):\n  return (a - b) // c + (1 if ((a - b) % c) != 0 else 0)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numShelves(A,B,C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A-B)//C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef bookShelving(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef book_shelves (A, B, C): \n  return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C): \n  return (A-B) // C + 1\n\nprint(shelves_needed(30, 8, 6)) \n# Output: 5",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef shelf_num(A, B, C):\n    return (A-B) // C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n  return (A - B) // C + 1\n\nprint(shelvesNeeded(50, 10, 5))  # Prints 10",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef shelvesNeeded(A, B, C):\n  return (A - B)//C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelving_books(A, B, C):\n  return (A - B) // C + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef putAwayBooks(A,B,C): \n return (A-B)//C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef book_shelves(A, B, C): \n  return (A - B) // C + 1\n\nprint(book_shelves(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelfCalculator(A, B, C):\n    return (A-B) // C + 1",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Jerry is at the library helping put away books. There are 34 book to put away total but a librarian takes 7 of them and leaves Jerry with the rest. If he can fit 3 books on a shelf, how many shelves will he need? ",
      "final_answer": 9.0,
      "index": 538
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 51.410892963409424,
      "templates": [
        "Nancy was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Nancy have?\nWrite a Python function that returns the answer.",
        "Nancy was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Nancy have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef small_gardens (A, B, C):\n  return (B // C)\n\nprint(small_gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B//C) // A\n\n#For example, if Nancy had 4 seeds and planted 24 of them in the big garden, and 3 seeds in each of her small gardens, then the function would return 2 small gardens. \nnum_small_gardens(4, 24, 3)  #Returns 2",
          "\n\nA x B = C x X\n\nAnswer = X = B/C"
        ],
        [
          "\n\ndef nancysGardens(A, B, C):\n  return B // C\n  \nprint(nancysGardens(A, B, C))",
          "\nAnswer = (B - (C*5))/C"
        ],
        [
          "\n\ndef number_of_small_gardens(a, b, c):\n  return (b - c)// a \n\nprint(number_of_small_gardens(A, B, C))",
          "\n\nA = number of seeds\nB = number of seeds for the big garden\nC = number of seeds for each small garden\n\nAnswer = B / C"
        ],
        [
          "\n\ndef num_gardens(A, B, C):\n  return B // C\n\nprint(num_gardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A,B,C):\n  return (B - (C * A))/C\n  \nprint(num_small_gardens(A,B,C))",
          "\n\nA x B - C = D\n\nAnswer = D/C"
        ],
        [
          "\n\ndef num_gardens(a, b, c):\n  return (b - c) // a\n# where a is the number of seeds, b is the number of seeds planted in the big garden, and c is the number of seeds planted in each of the small gardens.",
          "\nA = Seeds\nB = Number of Seeds\nC = Number of Seeds in each Small Garden\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B//C) if (B % C == 0) else (B//C + 1)\n\nprint(num_small_gardens(4, 48, 3)) \n # Output: 16",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef totalGardens(A,B,C):\n  return B//C + (B%C > 0)\n\nprint(totalGardens(A, B, C))",
          "\nAnswer = (B-C) / C"
        ],
        [
          " \n\ndef num_of_gardens(A, B, C):\n  return int(B/(C*A))\n\nprint(num_of_gardens(2, 4, 2))\n# 2",
          "\nA * B / C = Answer\nAnswer =  3 small gardens"
        ],
        [
          "\n\ndef small_garden_count(A, B, C):\n  return (B - (C * B)) // A\n\nAnswer: small_garden_count(A, B, C)",
          "\n\nA \u00d7 B = C \u00d7 D\n\nAnswer = D = (A \u00d7 B) / C"
        ],
        [
          "\n\ndef get_num_small_gardens(A, B, C):\n  return (B // C) // A\n\nprint(get_num_small_gardens(3, 24, 4)) # Returns 4",
          "\n\nA x B / C = X\n\nAnswer = X small gardens"
        ],
        [
          "\n\ndef num_small_gardens(A,B,C):\n  # Calculate the total number of seeds planted in the small gardens\n  total_seeds = C * B\n  # Calculate the number of seeds in the big garden\n  big_garden_seeds = B - total_seeds\n  # Calculate the number of small gardens\n  small_gardens = big_garden_seeds // A\n  return small",
          "\n\nA * B / C = Answer\nAnswer = B / C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b // c) // a\n\nprint(num_small_gardens(A, B, C))",
          "\nA * B = C * X\nAnswer = (C * X)/A"
        ],
        [
          "\n\ndef calc_num_small_gardens(A, B, C):\n    return int(B/(C/A))\n\nprint(calc_num_small_gardens(A, B, C))",
          "\n\nA x B / C = Answer\nAnswer = B / C"
        ],
        [
          " \n\ndef gardens(A, B, C):\n    return B // C\n\ngarden(20, 100, 5)  # Returns 20",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return B // C\n\nanswer = number_of_small_gardens(A, B, C)",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef numGardens(A, B, C):\n  return (B//C) + (B%C > 0)\n\nprint(numGardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef calculateGardens(a, b, c):\n  return (b // c) // a\n  \nB = 8\nC = 2\nA = 3\n\nAnswer: 2",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(A,B,C):\n  return B // C\n\nprint(small_gardens(A, B, C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef small_gardens(A, B, C):\n  return (B - C) // A\n \nsmall_gardens(A, B, C)",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef no_of_small_gardens(A, B, C):\n  return (B - (A * C)) // C\n  \nprint(no_of_small_gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef gardens(A, B, C):\n    return (B // C) % A\n\nprint(gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\n\ndef num_small_gardens(a, b, c):\n    return b // c\n\nprint(num_small_gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(A,B,C):\n  return B//C\n\nprint(numSmallGardens(A,B,C))",
          "\nA x (B / C) = Answer \nAnswer = 6 small gardens"
        ]
      ]
    },
    "source": {
      "question": " Nancy was planting vegetables in her garden. She started with 52 seeds and planted 28 of them in the big garden and in each of her small gardens put 4 seeds each. How many small gardens did Nancy have? ",
      "final_answer": 6.0,
      "index": 539
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 48,
      "duration": 39.29974389076233,
      "templates": [
        "Will had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Will had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef find_toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n    return (A-B)/C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef spendMoney(A, B, C):\n  return (A - B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C): \n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calcToys(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_toys(A, B, C): \n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_toys(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef calculate_cost(a, b, c):\n  return (a - b) // c\n\nanswer = calculate_cost(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A, B, C): \n  return (A-B)//C \n\nprint(toys(10, 5, 2))\n# Output: 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateToys(A, B, C):\n    return (A - B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  \n  if A < B: #check if the amount Will has is greater than what he spent\n    return 0\n  \n  return (A - B) // C #calculate the number of toys he can buy\n  \ntoys = calculate_toys(A, B, C)\nprint(toys)",
          "\nAnswer = A - B divided by C"
        ],
        [
          "\n\ndef toy_calc(A, B, C):\n  return (A - B) // C\n\nprint(toy_calc(A, B, C))",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef spend_money(A, B, C):\n  return (A - B) // C \n\nanswer = spend_money(A, B, C)",
          "\n\nA - B = C\nAnswer = A - B = C"
        ],
        [
          "\n\ndef new_games(A, B, C):\n  num_toys = (A - B) // C\n  return num_toys\n\nprint(new_games(10, 5, 3))\n# Output: 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\ndef calculate_toys(A, B, C): \n    return (A - B) // C",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n    remainder = A - B\n    toys = remainder // C\n    return toys\n\nprint(calculate_toys(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef toys (A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef findToys(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calc_toys(A, B, C):\n  return ((A - B) // C)",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numToys(A, B, C):\n  return (A - B) // C\n\nprint(numToys(100, 50, 10)) # Output: 5",
          "\nAnswer = (A - B) / C"
        ],
        [
          " Use the parameter names defined above.\n\ndef toys_left(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateToys(A,B,C):\n    return (A-B) // C\n\nanswer = calculateToys(A,B,C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef game_purchase(A, B, C):\n  return (A - B)//C",
          " \nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Will had 83 dollars. If he spent 47 bucks on a new game, how many 4 dollar toys could he buy with the money he had left? ",
      "final_answer": 9.0,
      "index": 540
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 42.06259298324585,
      "templates": [
        "Bianca was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Bianca have?\nWrite a Python function that returns the answer.",
        "Bianca was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Bianca have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef calculate_gardens(A,B,C):\n  small_gardens = (B * C)//A\n  return small_gardens\n\nprint(calculate_gardens(A,B,C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef get_num_small_gardens(a, b, c):\n  return (b - (a * c))//c\n\nprint(get_num_small_gardens(3, 15, 4)) # Returns 2",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numGardens(A, B, C):\n    return B//C\n\nprint(numGardens(10, 30, 5)) #returns 6",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_gardens(A,B,C):\n  return B//C if B%C == 0 else B//C + 1",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B // C) // A\n  \n# Example\nnum_small_gardens(3, 18, 6) # Returns 2",
          "\n\nAnswer = (B-C) / C"
        ],
        [
          "\n\ndef how_many_garden(A, B, C):\n    return B//C\n\nprint(how_many_garden(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A,B,C):\n  return int(B/C)\n\nprint(num_small_gardens(A,B,C))",
          "\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef garden_size(a,b,c):\n    return (b-a)//c\n\nprint(garden_size(A,B,C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(a,b,c):\n  return b//c\n\nprint(numSmallGardens(A,B,C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_of_gardens(A, B, C):\n  return B // C if B % C == 0 else B//C + 1\n\n#then call the function with the values of A, B, and C \nnum_of_gardens(A, B, C)",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef small_gardens(A, B, C):\n    return B//C\n\nprint(small_gardens(2, 8, 4))\n# Output: 2",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(a, b, c): \n  return (b // c) // a\n\nprint(small_gardens(A, B, C))",
          "\nA x B / C = Answer \nAnswer = 10"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b - (b % c)) // c\n  \nnum_small_gardens(a, b, c)",
          "\n\nA \u00d7 B \u00f7 C = Answer\nAnswer = B \u00f7 C"
        ],
        [
          "\n\ndef num_gardens(A, B, C): \n  return B // C\n\nprint(num_gardens(A, B, C))",
          "\n\n(B - C) / C = Answer\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return (B - (A * C)) // C\n  \nprint(number_of_small_gardens(2, 10, 4))\n# This should return 1",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef NumGardens(A, B, C):\n  return B//C\n\nprint(NumGardens(A, B, C))",
          "\nA x B = X\nX / C = Answer\nAnswer = X / C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n    return (b // c) // a",
          "\nAnswer = (B - (C \u00d7 B))/ C"
        ],
        [
          "\n\ndef number_small_gardens(a, b, c):\n  return (b // c) / a \n\nprint(number_small_gardens(a, b, c))",
          "\nAnswer = (B - (C * B)) / C"
        ],
        [
          "\n\ndef number_of_gardens(A, B, C):\n  return B//C\n\nprint(number_of_gardens(A, B, C))",
          "\nAnswer = (B - (C * A))/C"
        ],
        [
          "\n\ndef countGardens(A, B, C):\n  return B // C\n\nprint(countGardens(A, B, C))",
          "\n\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef small_gardens(A, B, C):\n  return B // C + 1\n\nprint(small_gardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(a,b,c):\n  return (b-a)//c\n  \nprint(small_gardens(A,B,C))",
          "\n\nA x B = C x D\n\nD = C / A\n\nAnswer = C / A"
        ],
        [
          "\n\ndef total_small_gardens(A, B, C):\n  return int(B/C)\n\nprint(total_small_gardens(A, B, C))",
          "\nA \u00d7 B/C = Answer\nAnswer = B/C"
        ],
        [
          "\n\ndef countSmallGardens(A, B, C): \n  return B // C\n\nprint(countSmallGardens(A, B, C))",
          " \nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef how_many_small_gardens(A, B, C):\n    return B // C\n\nprint(how_many_small_gardens(A, B, C))",
          "\nAnswer = (B - C) / C \n"
        ]
      ]
    },
    "source": {
      "question": " Bianca was planting vegetables in her garden. She started with 52 seeds and planted 40 of them in the big garden and in each of her small gardens put 2 seeds each. How many small gardens did Bianca have? ",
      "final_answer": 6.0,
      "index": 541
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 34,
      "duration": 30.696378231048584,
      "templates": [
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef num_of_tables(A, B, C):\n  return (A - B) / C  \n\nprint(num_of_tables(10, 2, 4))  # Returns 2.0",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A - B) / C\n\nprint(num_tables(12, 4, 3))\n#Returns 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTables(A, B, C):\n  return (A - B) / C\n\nprint(numTables(50, 10, 4))  # Prints 10",
          "\n\nAnswer = (A - B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_num_tables(A, B, C):\n  return (A-B)//C\n\n# Test\n\nnum_tables = calculate_num_tables(15, 5, 4)\nprint(num_tables)\n# Output: 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_count(A, B, C): \n    return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateTables(a, b, c):\n  return (a-b)//c\n  \ncalculateTables(a, b, c)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef tables(A, B, C):\n  return (A-B)//C\n\nprint(tables(10,2,3))\n# Output: 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateTables(customers, left, people):\n  return (customers-left)/people\n\nprint(calculateTables(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables(a, b, c):\n  return (a - b) // c\n\nprint(tables(20, 10, 4)) # answer is 2 tables",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTables(A,B,C):\n  return (A-B)//C\n\nprint(numTables(8,2,4)) # Output: 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_tables(A, B, C):\n    return (A - B) // C\n\nprint(number_of_tables(10, 5, 4))\n# output: 1",
          "\n\nAnswer = ((A - B) / C)"
        ],
        [
          "\n\ndef tables(A, B, C):\n  return (A - B) // C \n\nprint(tables(8, 2, 4)) # returns 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTables(A, B, C): \n  return (A - B) // C \n\nprint(numTables(10,3,2)) \n# Output: 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables(A, B, C):\n  return (A - B) // C\n\nprint(tables(10, 4, 2))\n# Output: 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_in_waiter_section(a, b, c):\n  return (a-b)//c\n  \ntables_in_waiter_section(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Tables(A, B, C):\n  return (A - B) // C\n\nprint(Tables(10, 3, 2))\n#print 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef num_tables(a, b, c):\n  return (a - b) // c\n\nprint(num_tables(12, 4, 2)) # Returns 4",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 21 customers in his section. If 12 of them left and the rest of his tables had 3 people at each table, how many tables did he have? ",
      "final_answer": 3.0,
      "index": 542
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 36.936203956604004,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef studentsPerGroup(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A-B) \u00f7 C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A - B) // C\n\nanswer(20, 5, 2) #returns 7",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_students_per_group(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef studentsInGroup(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_students(a, b, c):\n  return (a - b) // c\n  \nprint(number_of_students(A, B, C))",
          "\nAnswer = A-B/C"
        ],
        [
          "\ndef answer(A, B, C):\n  return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_in_groups(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_per_group(A, B, C):\n    return (A-B)/C\n\nprint(num_per_group(A, B, C))",
          " \nAnswer = A - B / C"
        ],
        [
          "\n\ndef calcGroupSize(A, B, C):\n  return (A - B) / C\n\nprint(calcGroupSize(30, 8, 5))\n#Answer: 4",
          "\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A-B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_stu(A,B,C):\n  return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_in_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_groups(A, B, C):\n  return (A-B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calc_group_num (A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef answer(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B  / C"
        ],
        [
          "\n\ndef numEachGroup(A, B, C):\n  num = (A - B) / C\n  return num",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_students_in_each_group(A,B,C):\n  return (A-B) / C\n  \nprint(num_of_students_in_each_group(100,50,6))\n\nAnswer: 8.333333333333334",
          "\n\nAnswer = A\u2212B/C"
        ],
        [
          "\n\ndef answer(A, B, C):\n    return (A - B) // C",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_size(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef teams(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_in_each_group(A, B, C):\n  return (A-B)/C \n  \nAnswer: (A-B)/C",
          "\nAnswer =  A - B / C"
        ],
        [
          "\n\ndef calculate_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef getTeamSize(A, B, C): \n  return (A - B) / C",
          "\nAnswer = (A-B)\u00f7C"
        ],
        [
          "\n\ndef get_group_size(a, b, c):\n  return (a-b)//c",
          "\n\nAnswer = A - B/C"
        ],
        [
          "\n\ndef stu_per_group(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " There are 25 students trying out for the school's trivia teams. If 15 of them didn't get picked for the team and the rest were put into 2 groups, how many students would be in each group? ",
      "final_answer": 5.0,
      "index": 543
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 46,
      "duration": 34.74615812301636,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0
      ],
      "completions": [
        [
          " \n\ndef pies(A, B, C):\n  # calculate the number of apples left and divide by the number of apples per pie\n  return (A - B) / C\n\n# Call the function \npies(100, 10, 8) # Output: 11.25",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pies(a,b,c): \n    return (a-b)//c\n\nanswer = pies(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_pies(A, B, C):\n    return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculatePies(A, B, C): \n  return (A - B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(a, b, c): \n    pies = (a - b) // c\n    return pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a, b, c):\n  return (a - b) // c",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(a, b, c):\n  return (a - b) / c\n  \npies(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A - B) // C\n    \nprint(pies(100, 20, 4)) #answer is 20 pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C): \n  return (A-B)//C",
          "\nA - B = Cx\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef calculate_pies(A, B, C):\n  num_pies = (A - B) // C\n  return num_pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPies(A, B, C):\n  return (A - B) // C\n  \n# calling the function\nnumPies(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(a, b, c):\n  return (a-b) // c\n\npies(A, B, C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_of_pies(a, b, c):\n  result = (a - b) // c\n  return result",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef num_pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A-B) // C\n\npies(A, B, C)",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 47 apples. For lunch they handed out 27 to students and decided to use the rest to make pies. If each pie takes 4 apples, how many pies could they make? ",
      "final_answer": 5.0,
      "index": 544
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 36,
      "duration": 37.7876250743866,
      "templates": [
        "Megan baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Megan baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0,
        6.0,
        6.0
      ],
      "completions": [
        [
          "\n\ndef packages_made(A,B,C): \n    return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages_of_cupcakes(A,B,C): \n  return (A - B) / C\n\n# Call the function \n\npackages_of_cupcakes(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n    return (A - B) / C\n\nanswer = cupcakes(A, B, C)\nprint(answer)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef makePackages(A, B, C): \n  leftOver = A - B \n  packages = leftOver // C \n  \n  return packages",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B) / C"
        ],
        [
          " \n\ndef numPackages(A, B, C):\n  numLeft = A - B\n  return numLeft//C\n\nprint(numPackages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_packages(a,b,c):\n  return (a-b)//c\n\nmake_packages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packCalc(A, B, C):\n    return (A-B)//C",
          "\n\nAnswer =  (A - B) / C"
        ],
        [
          "\n\ndef bake_sale(a, b, c):\n  remaining = a-b\n  packages = remaining // c\n  return packages\n\nanswer = bake_sale(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cups_packs(A,B,C): \n  return (A-B)//C\n  \nprint(cups_packs(8,2,3))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages_made(A, B, C):\n   return ((A-B)//C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef make_packages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A / (C * B)"
        ],
        [
          "\n\ndef cupcake_packages(A, B, C):\n    return (A - B) // C\n\n#usage\ncupcake_packages(14, 4, 5) # returns 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_packages(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_packages(A, B, C):\n  return (A-B)//C\n  \nprint(num_packages(20, 5, 4))\n# Output: 2",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages(A, B, C):\n    return (A - B) // C\n\n# if A = 35, B = 7, and C = 6, returns 4.",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Megan baked 68 cupcakes for her school's bake sale. If her brother, Todd, ate 32 of them how many packages could she make if she put 6 cupcake in each package? ",
      "final_answer": 6.0,
      "index": 545
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 46,
      "duration": 57.89741611480713,
      "templates": [
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef num_of_shelves(A, B, C):\n    return (A - B) / C\n\nprint(\"The number of shelves used is\", num_of_shelves(A, B, C))",
          "\nA - B / C = Answer\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef shelves_used(A,B,C):\n  return (A-B)//C\n \nprint(shelves_used(A,B,C))",
          "\n\nAnswer = (B/C)"
        ],
        [
          " \n\ndef shelf_num(a, b, c):\n  return (a-b) // c\n\nprint(shelf_num(A, B, C))",
          "\n\nAnswer = B \u00f7 C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    remaining_coloring_books = A - B\n    return remaining_coloring_books // C \n\nprint(calculate_shelves(A, B, C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef shelfNum(A, B, C): \n  \n    num = (A - B)//C \n    \n    return num \n  \nA = 30\nB = 10\nC = 5\nprint(shelfNum(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n    return (A - B) / C\n\nshelves(A, B, C)",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef getNumShelves(A, B, C):\n  if A > B:\n    return (A-B)//C + 1\n  else:\n    return 0\n  \n#Example\ngetNumShelves(14, 8, 3) #returns 3",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef getNumberOfShelves(A, B, C):\n    numberOfShelves = (A - B) // C\n    return numberOfShelves\n\nprint(getNumberOfShelves(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          " \n\ndef calculateShelf(A, B, C):\n    return ((A-B)//C) + 1 \n\nprint(calculateShelf(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A - B) // C\n \nshelves_used(A, B, C)",
          "\n\nA - B = C\n\nAnswer = C / A"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A - B) // C\n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = (B/C)"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A-B)//C\n  \nshelves(100, 50, 10)  # Returns 5",
          "\n\nA - B = C\nC \u00f7 A = D\nAnswer = D"
        ],
        [
          "\n\ndef calculate_shelves(a, b, c):\n\treturn (a-b)//c\n\nprint(calculate_shelves(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef numShelves (A, B,C):\n    return (A-B)//C\n\nprint(numShelves(A, B, C))",
          "\n\nA - B = C\n\nAnswer = C / A"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C): \n    return (A-B)//C + 1 \n\nAnswer: shelvesUsed(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C):\n  return (A-B)//C + 1\n\nprint(shelvesUsed(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef calculateNumberOfShelves(a, b, c):\n    shelves = (a-b)/c\n    return round(shelves)",
          "\nAnswer = C/A * B"
        ],
        [
          "\n\ndef getNumShelves(A,B,C):\n    total = A - B\n    return total // C\n\nprint(getNumShelves(10,3,3)) # Output: 3",
          "\nA - B = C\nC/B = Answer\nAnswer = A/B"
        ],
        [
          "\n\ndef number_of_shelves(A, B, C):\n    return (A-B) / C\n\nprint(number_of_shelves(A, B, C))",
          "\nAnswer = B \u00f7 C."
        ],
        [
          "\n\ndef shelf_count(a, b, c):\n  return (a-b)//c\n\nprint(shelf_count(A, B, C))",
          "\n\nA-B = C\nC / A = Number of Shelves\nAnswer = C / (A-B)"
        ],
        [
          "\n\ndef ColoringBookShelves(A, B, C):\n    return (A-B)//C + 1",
          "\nA - B = C\nAnswer = C / A"
        ],
        [
          "\n\ndef numOfShelves(A, B, C):\n  return (A - B) // C\n\nprint(numOfShelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C\n\nanswer = shelves(A, B, C)",
          "\n\nA - B / C = Answer\nAnswer = 7.5"
        ]
      ]
    },
    "source": {
      "question": " A store had 120 coloring books in stock. They ended up putting them on sale and getting rid of 39 of them. The put the ones they still had onto shelves with 9 on each shelf. How many shelves did they use? ",
      "final_answer": 9.0,
      "index": 546
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 34,
      "duration": 61.9031879901886,
      "templates": [
        "Isabel uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Isabel uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef photo_albums(A, B, C):\n  return [A-B, B, C]",
          "\nAnswer = A-(B+C) pictures in each album."
        ],
        [
          "\n\ndef album_pics(a, b, c):\n  return [b, a-b, (a-b)/c]\n  \nprint(album_pics(A, B, C))",
          "\nAnswer = Album A: A pictures; Album B: B pictures; Album C: (A - B) pictures."
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  return A, B/A, (A-B)/C \n\nAnswer: A, B, (A-B)/C",
          "\n\nA/(B+C) = Answer = (number of pictures per album)"
        ],
        [
          "\n\ndef num_albums(A, B, C): \n  return A, B//C, A-B//C\n  \nprint(num_albums(A, B, C))",
          "\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef numberOfPictures(a,b,c):\n  ans = [a//(b+c), a//b, a//c]\n  return ans\n\nans = numberOfPictures(a,b,c)\n# ans is equal to [a/(b+c), a/b, a/c]",
          "\nAnswer = A/B + (A - B)/C"
        ],
        [
          "\n\ndef pictureCount(A, B, C):\n  albumCount = A // (B + C)\n  remainderPics = A - albumCount * (B + C)\n  picEachBAlbum = B\n  picEachCAlbum = remainderPics // C\n\n  return f\"Each B album has {picEachBAlbum} pictures, and each C album has {picEachCAlbum} pictures.\"\n\nprint(pictureCount",
          "\n\nNumber of pictures in album A = a\nNumber of pictures in album B = b\nNumber of pictures in album C = c\n\na + b + c = A \n\nAnswer = b = A - (a + c)"
        ],
        [
          "\n\ndef pic_albums(A, B, C):\n  album1 = B // 1\n  album2 = (A - B) // C \n  \n  return f'There were {album1} pics in the first album and {album2} pics in each of the other {C} albums.'\n  \nprint(pic_albums(50, 10, 2))\n#There were 10 pics in the first album and 20 pics in each",
          "\nAnswer = (A - B) / C;"
        ],
        [
          "\n\ndef picture_albums(A, B, C): \n  return A//(B+C), B, A-B-C*(A//(B+C))\n\npicture_albums(20, 8, 3) \n#This would return (2, 8, 4).",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          " \n\ndef return_album_pictures(A, B, C):\n    pictures_in_album_b = B\n    pictures_in_other_albums = (A - B) / C\n    return pictures_in_album_b, pictures_in_other_albums\n  \nreturn_album_pictures(A, B, C)",
          "\nAnswer = A/B=(A-B)/C"
        ],
        [
          "\n\ndef num_of_pics_in_albums(A, B, C):\n  return (A//(B+C), B, A-(A//(B+C)*(B+C)))",
          "\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef numberOfPicturesInAlbums(A, B, C):\n  return (A-B)//C + B\n  \nprint(numberOfPicturesInAlbums(50, 10, 4))\n# Answer: 13",
          "\n\nAnswer = B + (A - B)/C"
        ],
        [
          "\n\ndef PictureNum(A, B, C):\n  album_1 = B\n  album_2_to_C = (A - B)/C\n  return \"Album 1 has {0} pictures, and remaining albums have {1} pictures each.\".format(album_1, album_2_to_C)\n\nprint(PictureNum(30, 10, 3))\n#Output: Album 1 has 10 pictures, and remaining albums have",
          "\nA - B - C = D\n Answer = D"
        ],
        [
          " \n\ndef album_pictures (A, B, C):\n  album1 = B\n  album2 = (A-B)//C\n  album3 = A-(B+album2*C)\n  return album1, album2, album3",
          "\nAnswer = A/B + C"
        ],
        [
          "\n\ndef albumArrangement(A, B, C):\n  albumA = B\n  albumB = A - B\n  albumC = int(albumB / C)\n  return albumA, albumC\n\nresult = albumArrangement(A, B, C)\nprint(result)",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef album_count(pics_total, album_major, album_minor):\n  return [album_major, int((pics_total - album_major)/album_minor)]\n\nprint(album_count(A, B, C))",
          " \nAnswer = A/ B + (A - B)/C"
        ]
      ]
    },
    "source": {
      "question": " Isabel uploaded 25 pictures to Facebook. She put 10 pics into one album and put the rest into 5 different albums. How many pictures were in each album? ",
      "final_answer": 3.0,
      "index": 547
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 30,
      "duration": 35.95611906051636,
      "templates": [
        "Sarah had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a Python function that returns the answer.",
        "Sarah had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef numProblems(A, B, C):\n  return (A - B) / C\n\nprint(numProblems(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_problem_per_page(A, B, C):\n  return (A - B) / C\n  \nprint(get_problem_per_page(A, B, C))",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pageProblems(A, B, C):\n  return (A - B) / C\n\npageProblems(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return (A - B) / C\n\n# Example\nprint(homework_problems(50, 10, 5)) # Returns 8",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef problems_per_page(A, B, C):\n  page_problems = (A - B) / C\n  return page_problems\n\n# Usage Example\nproblems_per_page(50,20,3) # Returns 10",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  page_problem_number = (A-B) // C\n  return page_problem_number\n\npage_problems(A,B,C)",
          "\n\nAnswer = C / B"
        ],
        [
          "\n\ndef numProblems(A, B, C):\n  return (A-B)//C",
          "\nAnswer = C \u00f7 B"
        ],
        [
          "\n\ndef homework(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef page_problems(a,b,c):\n  return (a-b)//c\n\nprint(page_problems(A,B,C))",
          "\n\n  Answer = C / B"
        ],
        [
          "\n\ndef problemNumber(A, B, C):\n    return (A - B) / C\n\nprint(problemNumber(A, B, C))",
          "\nAnswer = C / B"
        ],
        [
          " Let A, B, and C be variables.\n\ndef problems_per_page(A, B, C):\n  return (A - B) / C\n\nprint(problems_per_page(A, B, C))",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C): \n  return (A - B) / C\n  \nprint(num_problems_per_page(A, B, C))",
          "\nAnswer = C/B"
        ],
        [
          "\n\ndef page_count(A, B, C):\n  return (A - B) / C\n  \nprint(page_count(A, B, C))",
          "\nAnswer = C/B"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = C / B"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  left_problems = A - B\n  problems_per_page = left_problems // C\n  return problems_per_page\n\nprint(homework_problems(20, 15, 4))  # returns 2",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Sarah had 60 homework problems. She finished 20 of them but still had 5 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ",
      "final_answer": 8.0,
      "index": 548
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 32,
      "duration": 35.9164879322052,
      "templates": [
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          " \n\ndef game_purchase(A, B):\n  return (A - B) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_bought(A,B):\n    return (A-B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchasable(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawn_games(A, B, C):\n  return (A - B)/C\n\n# Call example\nlawn_games(1000, 250, 29)\n# returns 34.48275862068966",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef games(a, b):\n  c = a - b\n  return c // 10\n\nans = games(A, B)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef game_purchase(A, B):\n  return (A - B) / C",
          "\n\nA - B = D\nD / C = Answer\nAnswer = D / C"
        ],
        [
          "\n\ndef lawnGames(A, B):\n    moneyLeft = A - B \n    numGames = moneyLeft / C \n    return numGames",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchased(A, B):\n    C = (A - B) // 10\n    return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\ndef money_for_games(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef games(amount, costs):\n  remaining = amount - costs\n  num_games = remaining / C\n  return num_games",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef lawnGames(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_calc(A, B):\n    C = (A - B) // 3\n    return C\n\n#ANSWER: He can buy C dollar games with the money he had left.",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef compute(A, B):\n    answer = (A - B) // C\n    return answer",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef games_list(A, B):\n  games = A - B\n  return games / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A,B): \n    return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef summer_games(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Mike made 42 dollars mowing lawns over the summer. If he spent 10 dollars buying new mower blades, how many 8 dollar games could he buy with the money he had left? ",
      "final_answer": 4.0,
      "index": 549
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 40,
      "duration": 55.94660711288452,
      "templates": [
        "Will had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a Python function that returns the answer.",
        "Will had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef num_per_load(A, B, C):\n  return (A-B) / C\n  \n print(num_per_load(A, B, C))",
          "\n\nA - B = C\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_clothing_per_load(A, B, C):\n  return (A - B) / C\n  \nprint(calculate_clothing_per_load(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef split_clothing(A, B, C):\n  return (A - B) / C\n  \nsplit_clothing(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef laundry(A, B, C):\n  return (A - B) // C\n  \nprint(laundry(30, 10, 3)) #Returns 8",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_num_clothes(a, b, c):\n  return (a-b)//c\n\n# This function takes in three numbers, \"a\" representing the total number of pieces of clothing, \"b\" representing the number of pieces put in the first load, and \"c\" representing the number of small loads. It returns the number of pieces that can go in each small load.",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef load_clothes(A, B, C):\n  return (A-B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piecesPerLoad(A, B, C):\n  return (A-B)//C\n  \nprint(piecesPerLoad(10, 5, 3))\n# This will print 2",
          "\n\nAnswer = (A-B) /C"
        ],
        [
          "\n\ndef numPieces(A, B, C): \n  return (A - B) // C\n\nprint(numPieces(10, 3, 2)) # prints 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef equal_loads(A, B):\n  C = (A - B) / C\n  return int(C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef clothing_per_load(a, b, c):\n  return (a - b) / c\n\n# Example usage\nprint(clothing_per_load(10, 5, 2)) # Returns 2.5",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef split_into_loads(A, B):\n C = A - B\n return int(C / B)\n\nanswer = split_into_loads(A, B)",
          "\nAnswer = (A-B) \u00f7 C"
        ],
        [
          " \n\ndef split_clothes(A, B):\n  C = A-B\n  return (C // B)\n  \n#Test\nprint(split_clothes(12, 4)) #3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_per_load(total, first_load): \n  return (total - first_load) / (total / first_load)\n\n# Calling the function \nhow_many_per_load(A, B)",
          " \nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef split_clothes(a, b):\n  c = (a - b) // 2\n  return c\n\nanswer = split_clothes(A, B)",
          "\n\nA \u00f7 (B + C) = Answer\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef calculate_clothing_load(pieces,large_load,small_loads):\n  pieces_left = pieces - large_load\n  return pieces_left / small_loads\n\nprint(calculate_clothing_load(A,B,C))",
          " \nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef clothes_washer(A, B, C):\n  return (A-B)//C\n\nprint(clothes_washer(10, 3, 2)) # Prints 3",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef split_clothes(A, B, C):\n  return (A-B)//C\n  \nprint(split_clothes(20, 10, 3))\n# Output: 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_clothing(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef numberOfClothesPerLoad(A, B, C):\n  return (A-B)//C\n\n#Example:\nnumberOfClothesPerLoad(10, 5, 2)\n# Output: 2",
          "\n\nA - B = C\nAnswer = (A-B) / C"
        ]
      ]
    },
    "source": {
      "question": " Will had 59 pieces of clothing to wash. He put 32 of them in one load, but decided to split the rest into 9 equal loads. How many pieces of clothing could go in each of the small loads? ",
      "final_answer": 3.0,
      "index": 550
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 32,
      "duration": 33.92638897895813,
      "templates": [
        "Oliver made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Oliver made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef num_of_games(A, B): \n  return (A - B)/C \n\n# A = amount of money earned \n# B = amount of money spent \n# C = price of each game",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef buy_games(A, B):\n   return (A - B) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef total_games(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawnGames(A, B):\n    return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawnGames(A, B):\n  return (A-B)/C",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef game_money(A, B):\n  C = A - B\n  return C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B):\n C = A - B \n return C/20 \n\nAnswer: Oliver could buy (C/20) games with the money he had left.",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_games(A, B):\n  C = (A - B) // 10\n  return C",
          "\n\nA - B - C = Answer \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_bought(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef games_bought(A, B):\n    return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef lawn_games(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef money_spent(A, B):\n  C = A - B\n  return C / 10\n  \nAnswer = money_spent(A, B)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n    C = (A - B) / 20\n    return C",
          "\nAnswer = A - B - C"
        ],
        [
          "\n\ndef GamingMoney(A, B):\n  return A - B/C\n  \nprint(\"Oliver can buy \" + str(GamingMoney(A, B)) + \" games with the money he had left.\")",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef games_bought(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_left (A, B):\n  C = (A - B) / 10\n  return C \n\nprint(games_left(A, B))",
          "\nAnswer = A - B / C"
        ]
      ]
    },
    "source": {
      "question": " Oliver made 35 dollars mowing lawns over the summer. If he spent 7 dollars buying new mower blades, how many 4 dollar games could he buy with the money he had left? ",
      "final_answer": 7.0,
      "index": 551
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 64.2753849029541,
      "templates": [
        "Emily was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Emily have?\nWrite a Python function that returns the answer.",
        "Emily was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Emily have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_small_gardens(A, B, C): \n    return (B // C) + (B % C > 0) \n\nPrint(num_small_gardens(A, B, C))",
          "\nA * B  / C = Answer\nAnswer = 3"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return (B - (C * A)) // C\n\nnumber_of_small_gardens(A, B, C)",
          "\n\nA x (B/C) = Answer\nAnswer = (A x B)/C"
        ],
        [
          "\n\ndef Emilys_garden(A,B,C):\n  return (B//C)\n\nprint(Emilys_garden(A,B,C))",
          "\n\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef num_gardens(A, B, C):\n    return (B // C) + (B % C)\n\nprint(num_gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef number_of_small_gardens(a, b, c):\n  return (b - c) // a\n\nnumber_of_small_gardens(A, B, C)",
          "\n\nAnswer = (B - (C * X))/C \nWhere X = Number of small gardens\n= (B - (C * X))/C \n= (B - (C * X))/C \n= (B - (C * X))/C \n= (B - (C * X))/C \n= (B - (C * X))/C \n= (B - (C * X))/C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B - (C * B)//A) // C\n \nnum_small_gardens(A, B, C)",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n    return B // (A * C)\n\nprint(numSmallGardens(3, 18, 6))\n# Output: 2",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(a,b,c):\n  total_seeds = a*b\n  return total_seeds // c\n\nprint(num_small_gardens(A,B,C))",
          " \n\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef num_small_gardens(a,b,c):\n  return (b//c) + (b%c)\n\nnum_small_gardens(A, B, C)",
          "\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return B//C\nprint(numSmallGardens(6, 12, 2)) # prints 6",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(a,b,c):\n    return (b - (c * a))/c\n  \n# Output\nsmall_gardens(A,B,C)",
          "\nAnswer = (B-(B/C))/C"
        ],
        [
          "\n\ndef calculate_gardens(a, b, c):\n  return (b - (b // c)) // a\n  \nanswer = calculate_gardens(A, B, C)",
          "\n\nA * B / C = Answer\nAnswer = B / C"
        ],
        [
          "\n\ndef numGardens(a, b, c):\n  return (b - (c*b)/a)\n\nanswer = numGardens(a, b, c)",
          "\nA x B = D\nD/C = Answer\nAnswer = D/C"
        ],
        [
          "\n\ndef count_gardens(a, b, c):\n  return (b // c) // a\n  \ncount_gardens(A, B, C)",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(a,b,c):\n  return (b-c)//a  \nprint(small_gardens(A,B,C))",
          "\n\nA * B / C = Answer\nAnswer = B / C"
        ],
        [
          "\n\ndef num_of_small_gardens(A, B, C):\n  return (B - C) // A\n  \nprint(num_of_small_gardens(A, B, C))",
          "\n\nAnswer = (B-C) / C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b-c)//a\n  \nprint(num_small_gardens(a, b, c))",
          "\n\nAnswer = (B - C*A)/C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b//c) + (b%c)\n\nprint(num_small_gardens(4, 10, 2)) # Output: 6",
          "\n\nA x (B - C) = Answer\nAnswer = 4"
        ],
        [
          "\n\ndef findNumberOfSmallGardens(A, B, C):\n  numberOfSmallGardens = (B - (C * B / A)) / C\n  return numberOfSmallGardens\n\nanswer = findNumberOfSmallGardens(A, B, C)",
          "\n\nAnswer = (B-C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B // C) + (B % C != 0)\n  \n# To use the function\nnum_small_gardens(A, B, C)",
          "\nA x B = C x X\nAnswer = (C x X) / A"
        ],
        [
          "\n\ndef num_gardens(A,B,C):\n  return B//C\n\nprint(num_gardens(A,B,C))",
          "\nAnswer = (B - (C\u00d7A))/C"
        ],
        [
          "\n\ndef numOfSmallGardens(A, B, C):\n  return (B - (A - C)) // C\n\n# Example:\nnumOfSmallGardens(10, 30, 4)\n# Returns: 4",
          "\n\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef numberOfSmallGardens(A, B, C):\n    return B // C",
          "\nA * B / C = Answer\nAnswer = B / C"
        ],
        [
          "\n\ndef number_of_small_gardens(a, b, c):\n    return (b - (a * c)) / c\n\nprint(number_of_small_gardens(a, b, c))",
          "\nA x (B + (C x D) =\nAnswer = D"
        ],
        [
          "\n\ndef number_of_gardens(A, B, C):\n    return B//C\n\nprint(number_of_gardens(A, B, C))",
          "\nAnswer = (B - (C * D)) / C"
        ]
      ]
    },
    "source": {
      "question": " Emily was planting vegetables in her garden. She started with 42 seeds and planted 36 of them in the big garden and in each of her small gardens put 2 seeds each. How many small gardens did Emily have? ",
      "final_answer": 3.0,
      "index": 552
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 50,
      "duration": 45.88785696029663,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0
      ],
      "completions": [
        [
          "\n\ndef num_per_group(A,B,C):\n  return (A-B) / C",
          "\nAnswer = (A-B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\nA, B, and C are parameters.\n\ndef group_size(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef studentsPerGroup(A,B,C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_size(A, B, C):\n  return int((A - B) / C)",
          " \nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_per_group(A,B,C):\n  return (A - B) // C",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef get_team_size(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B)//C  # integer division to get round-down result",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_students_per_group(A, B, C):\n  remaining_students = A - B\n  \n  return remaining_students // C",
          "\nAnswer = A - B/C"
        ],
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_per_group(A, B, C):\n    return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numStudentsInGroup(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\nA, B, and C are parameters of the function.\n\ndef team_division(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\n# Define function\ndef groupStudents(A, B, C):\n  \n  # Calculate total number of students\n  totalStudents = A - B\n  \n  # Calculate number of students in each group\n  studentsInGroup = totalStudents // C\n  \n  # Return answer\n  return studentsInGroup",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numPerGroup(A, B, C):\n  return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef group_calculator(A, B, C):\n    return (A - B)//C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef students_per_group(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_group_size(A, B, C):\n  group_size = (A - B) // C\n  return group_size \n  print(group_size)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef TriviaTeam(A, B, C):\n    return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_teams(A, B, C):\n    return (A-B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef student_to_group(A, B, C):\n  return (A-B) // C",
          "\nAnswer = A-B/C"
        ],
        [
          "\n\ndef trivia_teams(A,B,C):\n  return (A - B) / C\n  \nanswer = trivia_teams(A,B,C)",
          "\n\nAnswer = A-(B/C)"
        ],
        [
          "\n\ndef trivia_team_groups(a, b, c):\n  return (a-b)//c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef groups(A,B,C):\n  return (A-B)//C",
          " followed by inserting an appropriate value\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef members_per_team(A,B,C):\n  return (A-B) // C",
          "\n\nAnswer = A - B / C"
        ]
      ]
    },
    "source": {
      "question": " There are 17 students trying out for the school's trivia teams. If 5 of them didn't get picked for the team and the rest were put into 3 groups, how many students would be in each group? ",
      "final_answer": 4.0,
      "index": 553
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 22,
      "duration": 24.640289783477783,
      "templates": [
        "Katie's team won their dodgeball game and scored A points total. If Katie scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a Python function that returns the answer.",
        "Katie's team won their dodgeball game and scored A points total. If Katie scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_players(A, B, C):\n  return (A - B) / C\n  \nThe answer will be the number of players on Katie's team.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef dodgeballScore (A, B, C): \n  return (A - B) / C\n\n",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculatePlayers(A, B, C): \n  return (A - B) / C\n  \n#to test\ncalculatePlayers(10, 6, 2) # 3 players",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numberOfPlayers(A, B, C):\n  return (A - B) / C\n  \n# E.g.\n# A = 25\n# B = 10\n# C = 5\n# numberOfPlayers(25, 10, 5)\n# returns 4",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef teamSize(A, B, C):\n  return (A-B)//C + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef players(A, B, C):\n  return (A - B) // C\n  \nplayers(20, 10, 4)   # returns 3",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef numPlayers(A, B, C): \n  return (A-B)//C\n\n#usage: \n# numPlayers(A, B, C)\n#replace A, B, and C with the given numbers",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef players_on_team(a,b,c):\n    return (a - b)//c\n\n#Example:\nplayers_on_team(20, 6, 3)\n#Answer: 4",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef dodgeball_score(A, B, C):\n  return (A - B) // C + 1\n\ndodgeball_score(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef dodgeballPlayers(A, B, C):\n    return (A - B) // C\n\ndodgeballPlayers(16, 8, 2) \nThis returns 6, meaning Katie's team had 6 players.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_players(A,B,C):\n  return (A-B)//C + 1\n  \nnum_players(10,5,2) \n# This returns 3 players.",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Katie's team won their dodgeball game and scored 12 points total. If Katie scored 4 of the points and everyone else scored 4 points each, how many players were on her team? ",
      "final_answer": 2.0,
      "index": 554
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 46,
      "duration": 49.43517589569092,
      "templates": [
        "Megan baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Megan baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef calculate_packages(A, B, C):\n  return (A - B) / C\n  \nanswer = calculate_packages(A, B, C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef cupcake_packs(A, B, C):\n    return (A-B)/C\n\ncupcake_packs(A,B,C)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef packages(A, B, C): \n  return (A - B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef package_cupcakes(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef package_calculator(A, B, C):\n  return (A-B)//C\n\npackage_calculator(A,B,C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef bake_sale(A, B, C): \n  return max(0, (A - B) // C)",
          "\nAnswer = A \u00f7 C \u00d7 B"
        ],
        [
          "\n\ndef make_packages (A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef package_cupcakes(A, B, C):\n    total_packages = (A-B) // C\n    return total_packages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef bake_sale_packages(a, b, c):\n   return (a - b) // c",
          "\n\nAnswer = A/C - B"
        ],
        [
          "\n\ndef packages(A, B, C): \n  return (A-B)//C \n\nAnswer: packages(A, B, C)",
          "\nAnswer = A/C - B"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n    remaining_cupcakes = A - B\n    packages = remaining_cupcakes / C\n    return round(packages)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages_of_cupcakes(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A - B) // C\n  \nprint(packages(100, 20, 12))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef package_count(A,B,C):\n  packages = (A-B)//C\n  return packages",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_num_packages(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(a, b, c):\n  return (a-b)/c\n\nprint(packages(A,B,C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcakes_packages(A, B, C): \n    return (A-B)//C \n\ncupcakes_packages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n    return (A-B)//C\n\nbake_sale(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages_bake_sale(a, b, c): \n  return (a - b)//c \n  \n#Example \npackages_bake_sale(30, 10, 2) \n#returns 10",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages_of_cupcakes(A,B,C):\n    return (A-B)//C\n    \n#This is assuming each package contains C cupcakes, which is the same number Todd ate",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_packs(A, B, C):\n  return (A-B)//C",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef calculatePackages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_packages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Megan baked 71 cupcakes for her school's bake sale. If her brother, Todd, ate 43 of them how many packages could she make if she put 7 cupcake in each package? ",
      "final_answer": 4.0,
      "index": 555
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 42,
      "duration": 69.08482885360718,
      "templates": [
        "Wendy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Wendy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef pictures_in_albums(A, B, C): \n  return (A//(B+C)), (A//C), (A%(B+C))\n\nA is the total number of pictures Wendy uploaded, B is the number of pictures she put in one album and C is the number of albums the rest were put in.\n\nThe function will return a tuple with three elements. The first element in the tuple is the number of pictures",
          "\nAnswer = A/B=C"
        ],
        [
          "\n\ndef album_photos(A, B, C):\n  return (\"Album 1: \" + str(B) + \" pictures, \" + \"Album 2-\" + str(C + 1) + \" :\" + str(A - B) + \" pictures\")\n\nprint(album_photos(40, 10, 5))\n\n# Output: Album 1: 10 pictures, Album 2-6: 30 pictures",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  return (A // (B + C), B, A - (A // (B + C)) * B)\n\nalbum_pictures(60, 10, 3) = (13, 10, 37)",
          "\nA - B - C = D\nAnswer = D"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n    album1 = B\n    album2 = (A - B) // C\n    album3 = A - (album1 + (album2 * C))\n    return album1, album2, album3",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef numberOfPics(A,B,C):\n    answer = []\n    answer.append(B)\n    albumPics = A - B\n    answer.append(albumPics//C)\n    answer.append(albumPics - (albumPics//C * C))\n    return answer\n\nprint(numberOfPics(A,B,C))",
          "\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef uploadPics(A, B, C):\n  album1 = B\n  album2 = (A - B)//C\n  return album1, album2\n\nuploadPics(A, B, C)",
          "\nAnswer = A/B + (A - B)/C"
        ],
        [
          "\n\ndef number_of_pictures(A, B, C):\n  album1 = B\n  album2 = A - B\n  album_per_rest = album2 // C\n  album_remainder = album2 % C\n\n  return [album1, album_per_rest, album_remainder]\n\nprint(number_of_pictures(100, 20, 5))\n# prints [20, 16, 4]",
          "\nAnswer = Album A: A/2, Album B: B, Album C: A/2"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return (A//(B+C), A//C, A%C)\n\nAnswer: (A//(B+C), A//C, A%C)",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef num_pics_each_album(A, B, C):\n  return A//(B + C), A % (B + C)\n\n# This will return a tuple of two numbers: the first number being the number of pictures in each album with B and C pictures, and the second number being the number pictures in the remainder album with the remaining pictures.",
          "\nAnswer = B + (C x (A/C))"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  return A//B, A//C",
          "\nAnswer = A - B = C*(A - B)/C"
        ],
        [
          "\n\ndef photos_in_albums(A, B, C):\n  return (A // (B + C), A % (B + C))\n  \nThe function would return a tuple of two values: ( number of pictures in B album, number of pictures in C albums ).",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef calculate_albums(A, B, C):\n  albums = [B]\n  for i in range(C): \n    album_num = A // (C+1)\n    albums.append(album_num)\n    A -= album_num\n  return albums\n\nalbums = calculate_albums(A, B, C) \nfor i in range(len(albums)): \n  print(f",
          "\nAnswer = A - B = C"
        ],
        [
          "\n\ndef num_of_pics(A, B, C):\n  return [B, A-B/C]\n  \nanswer = num_of_pics(A, B, C)\nprint(f\"There were {answer[0]} pictures in one album and {answer[1]} in each of the other {C} albums.\")",
          "\nAnswer = B + C"
        ],
        [
          "\n\ndef album_count(A, B, C):\n  album1_count = B\n  album2_count = (A-B)/C\n  return album1_count, album2_count \n\nalbum_count(A, B, C)",
          "\n\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef pics_albums(A, B, C):\n  album1 = B\n  album2 = (A-B)//C\n  album3 = A - (album1 + album2 * C)\n  return album1, album2, album3",
          "\nA/B + A-B/C = Answer\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef albumSort(A, B, C):\n  totalPics = A\n  \n  album1 = B\n  album2 = int(totalPics - B) / C\n  \n  return \"Album 1: \" + str(album1) + \" pictures. Album 2-\" + str(C) + \": \" + str(album2) + \" pictures each.\"",
          "\nAnswer = A/B = c"
        ],
        [
          "\n\ndef numberPicsInAlbums(A, B, C):\n  return A//(B+C), A//B, A//C",
          "\nAnswer = Album A: A pictures, Album B: B pictures, Album C: A-B pictures"
        ],
        [
          "\n\ndef album_pics(a,b,c):\n  return (a//(b+c),b,a%(b+c))\n\nprint(album_pics(a,b,c))",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef wendy_albums(a, b, c):\n    return a//(b+c), a//b, a//c",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef album_pictures(a, b, c):\n  return a//(b + c), a//b, a//c\n\nprint(album_pictures(A, B, C))",
          "\nAnswer = A/B = C"
        ]
      ]
    },
    "source": {
      "question": " Wendy uploaded 45 pictures to Facebook. She put 27 pics into one album and put the rest into 9 different albums. How many pictures were in each album? ",
      "final_answer": 2.0,
      "index": 556
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 61.814053773880005,
      "templates": [
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelves(a, b, c):\n  return round(a - b / c)  \n  \nshelves(A, B, C)",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef num_of_shelves(A, B, C):\n  return (A - B) // C\n\nprint(num_of_shelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef color_book_shelves(A, B, C):\n  return (A-B)//C\n  \nExample:\n\ncolor_book_shelves(100, 50, 20)\n\nAnswer:\n2",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return A - B//C\n\nshelves_used(A, B, C)",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(a,b,c):\n  return (a-b)//c\n  \n# Usage\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  if A - B == 0:\n    return 0\n  else:\n    return (A - B)//C + (1 if (A-B) % C > 0 else 0)",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n  return (A - B) // C \n\nprint(numShelves(A, B, C))",
          " \n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelf_calc(a,b,c):\n    shelves = (a - b) // c\n    return shelves\n\nshelves = shelf_calc(A, B, C)\nprint(shelves)",
          "\n\nAnswer = (B/C)"
        ],
        [
          "\n\ndef sale_shelves(A, B, C):\n  return (A - B) // C\n\nprint(sale_shelves(A, B, C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef coloring_book_shelves(A, B, C):\n  return (A - B) // C\n  \n#Example:\nA = 20\nB = 8\nC = 5\n\nprint(coloring_book_shelves(A, B, C)) # prints 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C): \n  return (A-B) // C",
          "\n\nA - B = C\nA - C = B\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelfNeeded(A, B, C):\n  return (A-B)//C\n\nprint(shelfNeeded(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return int(A-B)//C\n  \nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelf(A, B, C):\n    return A-B//C\n\nprint(shelf(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n    return (A - B) // C\n    \nprint(shelves_needed(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A, B, C): \n  return (A-B) // C\n  \n# if the remainder of (A-B) % C is greater than 0, then an additional shelf will be need.",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C): \n  return (A - B) // C\n\nprint(shelvesUsed(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n  return int((A-B)/C)",
          "\nA - B = C\nAnswer = C/A"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C\n\nshelves(A, B, C)",
          "\n\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A - B) // C\n\nprint(calculate_shelves(A, B, C))",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          "\n\ndef calculate_shelves(A,B,C):\n  return (A-B)//C\n\nprint(calculate_shelves(A,B,C))",
          " \nAnswer = B/C"
        ],
        [
          "\n\ndef numShelves(A, B, C): \n    return (A - B) // C\n\nprint(numShelves(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef get_num_shelves(A, B, C):\n    return (A - B) // C\n    \nget_num_shelves(A, B, C)",
          "\n\nA-B / C = Answer\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    shelves = (A - B) // C\n    return shelves",
          "\n\nA - B = C\nC / A = D \nAnswer = D"
        ],
        [
          "\n\ndef numOfShelves(A, B, C):\n    totalShelves = int((A-B) // C)\n    return totalShelves\n\n#Test with A = 20, B = 10, C =5\nresult = numOfShelves(20, 10, 5)\nprint(result)\n\n#Answer: 2 shelves",
          "\n\nAnswer = (A-B) / C"
        ]
      ]
    },
    "source": {
      "question": " A store had 86 coloring books in stock. They ended up putting them on sale and getting rid of 37 of them. The put the ones they still had onto shelves with 7 on each shelf. How many shelves did they use? ",
      "final_answer": 7.0,
      "index": 557
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 51.498225927352905,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A - B) // C\n\npies(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(a, b, c):\n  pies = (a-b)/c\n  return pies\n\nprint(pies(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pie_calculator(A, B, C):\n    number_of_pies = (A-B) // C\n    return number_of_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return int((A-B)/C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef CalculatePies(A, B, C):\n  pies = (A-B)//C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a, b, c):\n    remainder = a - b\n    num_pies = remainder // c\n    return num_pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    remaining_apples = A - B\n    pies = remaining_apples // C\n    return pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  pies = (A - B) // C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_num_of_pies(A, B, C):\n  num_of_pies = (A - B) // C\n  return num_of_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(a, b, c):\n  return (a-b) // c\n  \nnum_pies(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pie_calc(A,B,C):\n  num_pies = (A - B) // C\n  return num_pies\n\npie_calc(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPies(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A,B,C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(A, B, C):\n    return (A - B) // C\n    \nmake_pies(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies_from_apples(a, b, c):\n    pies = (a - b) // c\n    return pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\nreturn (A-B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calc_pies(apples, out, pies):\n  return round((apples - out) / pies)\n\n# With numbers\ncalc_pies(A, B, C)",
          " \nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return int((A-B) / C)",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef pies(A,B,C):\n   return (A-B)//C\n\nThe function would be: \npies(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 50 apples. For lunch they handed out 5 to students and decided to use the rest to make pies. If each pie takes 5 apples, how many pies could they make? ",
      "final_answer": 9.0,
      "index": 558
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 38,
      "duration": 41.45157194137573,
      "templates": [
        "Nancy had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a Python function that returns the answer.",
        "Nancy had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          " \n\ndef problems_per_page(A, B, C):\n  return (A - B) / C\n\nex. problems_per_page(50, 25, 3) \nThis would return 8.333333333333334, which means there are 8.333333333333334 problems per page.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C):\n  return (A - B) / C\n  \nprint(num_problems_per_page(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_problems_on_page(A, B, C):\n  return (A - B) // C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return int(A / C) - B\n\nanswer = homework_problems(A, B, C)\nprint(answer)",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A - B)//C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_problems_per_page(A, B, C): \n  return (A - B) // C",
          " \nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef page_problems(a, b, c): \n  problems_per_page = (a-b) // c  \n  return problems_per_page \n\nprint(page_problems(a, b, c))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_problems(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " Make sure to include what arguments the function should take.\n\ndef numProblemsPerPage(a,b,c):\n    problemsLeft = a - b\n    return problemsLeft/c\n    \nThe function takes 3 arguments: a (number of problems total), b (number of problems completed), and c (number of pages of problems left).",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef homework_probs(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pageProblems(A, B, C):\n  return (A-B)//C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef num_probs_per_page(A, B, C):\n  return (A - B) // C",
          "\nAnswer = C / B"
        ],
        [
          " \n\ndef num_problems_per_page(a, b, c):\n  return int((a-b)/c)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n    return round((A - B) / C)\n    \nprint(problems_per_page(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef problem_per_page(A, B, C):\n  return (A - B) // C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return int((A-B)/C)\n\nprint(page_problems(A, B, C))",
          "\nAnswer = C/B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A - B) / C\n\nprint(page_problems(A, B, C))",
          "\nAnswer = C/B"
        ],
        [
          "\n\ndef page_calc(A, B, C):\n    answer = (A - B) / C\n    return answer\n\nprint(page_calc(A, B, C))",
          "\nAnswer = C / B"
        ]
      ]
    },
    "source": {
      "question": " Nancy had 101 homework problems. She finished 47 of them but still had 6 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ",
      "final_answer": 9.0,
      "index": 559
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 61.23286581039429,
      "templates": [
        "Paige had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Paige end up with?\nWrite a Python function that returns the answer.",
        "Paige had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Paige end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef folder_count(A, B, C): \n  return (A - B) // C\n\nprint(folder_count(A, B, C))",
          "\nAnswer = A/C"
        ],
        [
          "\n\ndef number_of_folders(A,B,C):\n  return (A-B)//C\n  \n number_of_folders(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folder_count(a, b):\n  return (a - b) // c\n\nfolder_count(a, b, c)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders_created(files_deleted, files_each_folder):\n  return (files_each_folder - files_deleted) // files_each_folder\n \nAnswer: folders_created(B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef create_folders():\n  A = int(input(\"Enter number of files: \"))\n  B = int(input(\"Enter number of files deleted: \"))\n  C = int(input(\"Enter number of files in each folder: \"))\n  folders = (A - B) // C\n  return folders\n\nprint(create_folders())",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folders(a, b, c):\n  return (a-b)//c\n\nprint(folders(a, b, c))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n\nprint(folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(numA, numB):\n  return (numA - numB) // C\n \nprint(folders(A, B, C))",
          "\n\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef calculateFolders(filesDeleted, filesPerFolder):\n  return (filesDeleted // filesPerFolder)\n\nanswer = calculateFolders(B, C)",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef folders (files, deleted, files_per_folder):\n  folders = (files - deleted) // files_per_folder\n  return folders\n\nprint(folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_folders(a_files, b_files, c_files):\n  total_files = a_files - b_files\n  folders = total_files // c_files\n  return folders\n\n# Call the function\nget_folders(a_files=100, b_files=20, c_files=20)\n\n# The answer is 5 folders.",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef findFolders(a,b,c):\n    return (a-b)//c\n\nprint(findFolders(A,B,C))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n\nanswer = folders(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef num_of_folders(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_folders(a, b, c):\n  return (a-b)//c\n  \nnumber_of_folders(a, b, c)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folder_count(total, deleted):  \n  return (total - deleted) // 5\n  \nfolder_count(A, B)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_folders(files, deleted, files_per_folder):\n  remaining_files = files - deleted\n  return remaining_files // files_per_folder\n\nanswer = num_folders(A, B, C)\nprint(answer)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_folders(a, b):\n    return (a-b)//c\n\nprint(calculate_folders(A,B,C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folders():\n  files = A\n  deleted = B\n  files_per_folder = C\n  return (files - deleted) // files_per_folder\n\nanswer = folders()",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folders(A, B, C): \n  return (A - B) // C \n\nprint(folders(A, B, C))",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_of_folders(A,B,C):\n  return A//(B+C)\n\nAnswer: Paige ended up with (A//(B+C)) folders.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_folders(files, deleted, per_folder):\n  remaining_files = files - deleted\n  folders = remaining_files // per_folder\n  return folders\n\nprint(number_of_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(a,b,c):\n  return (a - b) // c\n\nprint(numFolders(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A - B) // C\n\nprint(num_of_folders(A, B, C))",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef folders(a, b, c):\n  return (a - b) // c\n\nprint(folders(a, b, c))",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Paige had 27 files on her computer. She deleted 9 of them and put the rest into folders with 6 files in each one. How many folders did Paige end up with? ",
      "final_answer": 3.0,
      "index": 560
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 44,
      "duration": 51.11873984336853,
      "templates": [
        "For Halloween Bianca received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a Python function that returns the answer.",
        "For Halloween Bianca received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef candyPile(A,B,C): \n    return (A - B)/C\n\nprint(candyPile(A,B,C))",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B)//C\n\nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef halloween(A, B, C):\n    return (A-B) // C\n\nprint(halloween(10, 4, 2))\n# Output: 3",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_piles (A, B, C): \n  return (A - B) // C\n\nprint(num_piles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    return ((A-B)//C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef candy_piles(A, B, C): \n  piles = (A-B) // C \n  return piles",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef halloweenPiles(A, B, C):\n  return (A - B) // C\n  \nhalloweenPiles(30, 10, 3) \n# This would return 6.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef halloween_candy_piles(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_piles(A, B, C):\n  num_piles = (A - B) // C\n  return num_piles",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_piles(A, B, C):\n  remainder = A - B\n  return remainder // C  \n\nprint(num_piles(21, 5, 3))\n# Output: 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef halloween_piles(a, b, c):\n  return (a - b) // c\n \nprint(halloween_piles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\n\ndef num_piles(A, B, C):\n  piles = (A - B) // C\n  return piles",
          "\n`Answer = (A-B)/C`"
        ],
        [
          "\n\ndef number_of_piles (A, B, C): \n    return (A-B)//C\n\nprint(number_of_piles(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef halloween_candy_piles(a, b, c):\n  piles = (a - b) // c\n  return piles",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candyPiles(A, B, C):\n  return (A-B) // C \n\npiles = candyPiles(A, B, C)\nprint(piles)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef piles(A,B,C):\n  return (A-B)//C \n\npiles(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B)//C\n\n#For example, if A = 10, B = 5, and C = 3, the output should be 2.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_piles(A, B, C):\n  piles = (A-B)//C\n  return piles",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_piles(A, B, C): \n  return (A-B)//C\n\nprint(num_of_piles(10, 4, 3)) \n\n# Output: 2",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candyPiles(A, B, C):\n  return (A - B) // C\n  \nprint(candyPiles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef halloween_candy_piles(A, B, C):\n    piles = (A-B)//C\n    return piles",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Halloween_Candy(A, B, C):\n    pile_num = (A - B) // C\n    return pile_num",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Bianca received 78 pieces of candy. She ate 30 pieces then placed the rest into piles with 8 in each pile. How many piles could she make? ",
      "final_answer": 6.0,
      "index": 561
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 58.51935267448425,
      "templates": [
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a Python function that returns the answer.",
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_tables(a, b, c):\n  return (a-b)//c\n\nprint(num_of_tables(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef how_many_tables(a, b, c): \n  return (a - b) // c \n  \n# example\nhow_many_tables(17, 6, 4) # returns 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_tables(a,b,c):\n    number_of_tables = (a-b)/c\n    return number_of_tables\n\nprint(number_of_tables(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_number_of_tables(total_people,absentees,people_per_table):\n  return (total_people - absentees) / people_per_table\n\nprint(calculate_number_of_tables(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_required(A, B, C): \n  return ((A - B) // C) + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_calculation(A, B, C):\n  return (A-B)//C\n\nprint(table_calculation(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef findTables(a, b, c): \n  return (a - b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef num_tables(A, B, C):\n  return (A - B) // C\n\nprint(num_tables(A, B, C))",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef count_tables(people, absent):\n  return (people - absent) // C\n  \nprint(count_tables(A, B))",
          "\nAnswer = ((A - B) / C)"
        ],
        [
          "\n\ndef calculate_tables(people, no_show):\n  return people // (no_show + C)",
          "\nAnswer = (C x A) - B"
        ],
        [
          "\n\ndef persons_to_tables(people, absent, table_size):\n  return (people - absent) // table_size + 1\n\nprint(persons_to_tables(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numTables(a, b, c):\n  return (a-b)//c\n  \nprint(numTables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(total_invitees, non_attendees, seats_per_table):\n  total_attendees = total_invitees - non_attendees\n  return math.ceil(total_attendees / seats_per_table)\n\nnum_tables(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A - B) // C\n  \n# Example\nnum_tables(20, 5, 4) # Returns 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tableCalc(A,B,C):\n  return (A-B)//C + 1;\n\n# Call the function\ntableCalc(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a, b, c):\n  num_tables = (a - b) // c \n  return num_tables",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  table_num = (A - B) / C\n  return int(table_num)",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef luncheon_tables(A, B, C):\n  return (A-B) // C + (A-B) % C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef luncheon_tables(a, b, c): \n  return (a - b) // c\n  \n# Expected Output:\n# 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef table_number(A, B, C):\n  return (A - B) // C\n  \nAnswer: table_number(A, B, C)",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef numTablesNeeded(a, b, c): \n  return (a - b) / c\n\nprint(numTablesNeeded(a, b, c))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef count_tables(A, B, C):\n    return (A - B) // C  # This will return the number of tables needed.",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A-B)//C\n\nprint(num_tables(A, B, C))",
          "  \nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A company invited 45 people to a luncheon, but 35 of them didn't show up. If the tables they had held 2 people each, how many tables do they need? ",
      "final_answer": 5.0,
      "index": 562
    }
  },
  {
    "result": 2.83,
    "meta": {
      "n_calls": 44,
      "duration": 63.607502698898315,
      "templates": [
        "Haley uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Haley uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.83
      ],
      "completions": [
        [
          "\n\ndef numOfPictures(A, B, C):\n  return A/ (B + C)",
          "\nAnswer = A / (B + C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numberOfPics(A, B, C):\n  return A, B, C\n\nnumPicsA = A // (B + C)\nnumPicsB = B // (A + C)\nnumPicsC = C // (A + B)\n\nreturn numPicsA, numPicsB, numPicsC",
          "\nAnswer = A/B + A/(C+1)"
        ],
        [
          "\n\ndef numberOfPics(A, B, C):\n  return A // (B + C)",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef calculate_album_pics (A, B, C): \n  return A//(B+C), A//B, A//C",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef PicturesInAlbums(A, B, C):\n  return (B + A // C, A % C)\n\nprint(PicturesInAlbums(A, B, C))",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef num_photos(a,b,c):\n  return (b,int((a-b)/c),int((a-b)%c))\n\nprint(num_photos(A,B,C))",
          "\n\nAnswer = A \u00f7 (B+C)"
        ],
        [
          "\n\ndef album_pics(a,b,c):\n  album1 = b \n  album2 = a - b\n  album3 = int(album2 / c)\n  album4 = album2 % c\n  \n  return album1, album3, album4",
          "\n\nAnswer = A/B (remainder C)"
        ],
        [
          "\n\ndef album_photos(A, B, C):\n  album_1 = B\n  album_2 = (A-B)/C\n  return album_1, album_2\n\nalbums = album_photos(A, B, C)\nprint(f'Album 1: {albums[0]} photos, Album 2: {albums[1]} photos.')",
          "\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef album_count(A,B,C): \n  return (A//B, A//C) \n\nprint(album_count(A,B,C))",
          "\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef albums(A, B, C):\n  album1 = B\n  album2 = A-B\n  album3 = C\n  return album1, album2, album3\n\nprint(albums(A, B, C))",
          "\nAnswer = A/B = C pictures in each album"
        ],
        [
          "\n\ndef albumCount(A, B, C):\n  return [B, (A-B)//C, (A-B)%C]",
          "\nAnswer = A/B and A/C"
        ],
        [
          "\n\ndef num_pics(A, B, C):\n    album_1 = B\n    album_2 = A - B\n    album_remain = album_2 / C\n    return f\"Album 1: {album_1} pictures; Albums 2-{C+1}: {album_remain} pictures each\"\n  \nprint(num_pics(30, 10, 5)) # Album 1: 10 pictures; Album",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          " \n\ndef numberOfPictures(A, B, C):\n  return [B, (A-B)/C]\n\nThe function takes three parameters: A (the total number of pictures), B (the number of pictures in one album), and C (the number of albums). The function returns a list containing two numbers, the number of pictures in each album.",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef album_count(total, albums):\n  per_album = total // albums\n  remainder = total % albums\n  if remainder == 0:\n    return per_album\n  else:\n    return [per_album + 1, per_album] * (albums - 1) + [per_album + 1]\n\nanswer = album_count(A, C)",
          "\nAnswer = A/B + [(A - B) / C]"
        ],
        [
          "\n\ndef haleys_photos(A, B, C):\n    return [B//C, A//C, A%C]\n\nhaleys_photos(10, 4, 3)\n\n# Output: [1, 3, 1]",
          "\nAnswer = B + (A/C)"
        ],
        [
          "\n\ndef get_album_pictures(total_pictures, album_num):\n  pictures_per_album = total_pictures // album_num\n  return pictures_per_album\n\nresult = get_album_pictures(A, B + C)\nprint(result)",
          "\nAnswer = A\u00f7(B+C)"
        ],
        [
          "\n\ndef album_total(A, B, C):\n  return A, B//C, B%C",
          "\nAnswer = (A - B) / C + B"
        ],
        [
          "\n\ndef album_answers(A, B, C): \n  return A, (A//B), (C*(A % B))\n  \nalbum_answers(100, 10, 6) \n#answer: 100, 10, 60",
          " \n\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef picture_album(A, B, C): \n  return A//(B+C), A//B, A//C",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef num_of_pictures(A, B, C):\n  return (A // (B + C), B, A % (B + C))",
          "\nAnswer = A/(B+C)"
        ]
      ]
    },
    "source": {
      "question": " Haley uploaded 65 pictures to Facebook. She put 17 pics into one album and put the rest into 6 different albums. How many pictures were in each album? ",
      "final_answer": 8.0,
      "index": 563
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 40,
      "duration": 42.008662939071655,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef cages(A, B, C):\n  return (A-B)//C\n  \nAnswer: \ncages(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A-B)//C\n \nprint(cages_used(30, 10, 3)) \n# Output: 8",
          "\nAnswer = ((A-B)/C)"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numCages(A, B, C):\n  return (A - B) // C\n  \nnumCages(10, 4, 2) # returns 3",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A,B,C):\n  return (A-B) // C\n  \nprint(cages_used(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) \u00f7 C"
        ],
        [
          "\n\ndef number_of_cages(A, B, C):\n  return (A - B) // C   # Integer division, assumes answer will be round number of cages",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n    return (A - B) // C\n\nprint(numCages(7, 3, 2))   # Output: 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A-B)//C  # (A-B) returns the number of puppies remaining, //C returns the number of cages needed.",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n    return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cagesUsed(A, B, C):\n  return (A - B) // C\n\nprint(cagesUsed(A, B, C))",
          " \nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numCages(A,B,C):\n  return (A - B) // C\n\nprint(numCages(10,2,3))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n    return (A - B) // C\n  \ncalculate_cages(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef used_cages(A, B, C):\n  return (A - B) // C\n  \nprint(used_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calcCages(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_cage_num(a, b, c):\n  return (a - b) // c\n\nprint(get_cage_num(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef cages_needed(a,b,c):\n  return (a - b) // c\n  \nprint(cages_needed(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_needed(A, B, C):\n  return (A-B)//C + (A-B)%C != 0",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 102 puppies. In one day they sold 21 of them and put the rest into cages with 9 in each cage. How many cages did they use? ",
      "final_answer": 9.0,
      "index": 564
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 22,
      "duration": 24.343472242355347,
      "templates": [
        "Roger had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a Python function that returns the answer.",
        "Roger had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0,
        8.0,
        8.0,
        8.0,
        8.0
      ],
      "completions": [
        [
          "\n\ndef numClothing(A, B, C):\n  return (A-B)/C\n  \nprint(numClothing(21, 8, 3))\n# Output: 5",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef clothingLoads(A, B, C):\n  return (A - B) / C\n\nLoads = clothingLoads(A, B, C)\nprint(\"Each of the smaller loads can have \" + str(Loads) + \" pieces of clothing.\")",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numberOfClothes(A, B, C):\n  return (A - B) / C\nprint(numberOfClothes(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef washing(A, B, C):\n    return (A - B) / C\n\nprint(washing(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef divideWash(A, B, C):\n  return (A - B) / C\n\nprint(divideWash(14, 4, 3))",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef clothingLoads(A, B, C): \n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef equalLoad(A, B):\n  C = A - B\n  return C // 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef how_many_loads(A, B):\n    C = (A-B)//B\n    return (A-B)//C\n    \nprint(how_many_loads(10, 2))  # Output: 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef clothing_per_load(pieces, large_load, small_load):\n  rest_loads = small_load - large_load\n  pieces_per_load = pieces - large_load\n  return pieces_per_load / rest_loads\n  \nanswer = clothing_per_load(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef SplitWash(A,B,C):\n  answer = (A - B) / C\n  return answer",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef divide_clothing(A,B,C):\n  return (A-B) // C",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Roger had 120 pieces of clothing to wash. He put 48 of them in one load, but decided to split the rest into 9 equal loads. How many pieces of clothing could go in each of the small loads? ",
      "final_answer": 8.0,
      "index": 565
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 64.57073497772217,
      "templates": [
        "Wendy picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a Python function that returns the answer.",
        "Wendy picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef flower_bouquets(a,b,c):\n  return (a-c)//b\n  \nflower_bouquets(A,B,C)",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef number_of_bouquets(A, B, C):\n    \n    return int((A - C) / B)",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef calc_bouquets(a, b, c): \n    return (a - c) // b\n    \nprint(calc_bouquets(A, B, C))",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n    \n    return (A - C) // B",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquets(A,B,C):\n  if C>B:\n    return 0\n  else:\n    return (A//B)-C\n  \nprint(bouquets(10,5,2)) #Output: 1",
          "\n\nA - x\nB - y\nC - z\n\nAnswer = (x-z)/y"
        ],
        [
          "\n\ndef num_of_bouquets(A, B, C):\n  remainder_flowers = A - C\n  if remainder_flowers <= 0:\n    return 0\n  return remainder_flowers // B\n  \nprint(num_of_bouquets(40, 5, 10))  # return 6",
          " \nAnswer = (A-C) \u00f7 B"
        ],
        [
          "\n\ndef bouquets(a,b,c):\n  return (a-c)//b\n\n#Call the function\nnum_bouquets = bouquets(A,B,C)\nprint(num_bouquets)",
          "\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef bouquets(A, B, C):\n  return (A - C) // B\n\nbouquets(20, 5, 4)\n# returns 3",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef flowerCount(A, B, C):\n    bouquets = (A - C) // B\n    return bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef numOfBouquets(A, B, C):\n  return (A - C) // B \n\n#example\nnumOfBouquets(25, 5, 2)\n#returns 4",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n    return (A-C)//B\n\nprint(num_bouquets(10, 5, 2))\n\n# Output: 1",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef make_bouquet(A, B, C):\n  total_flowers = A + B * C\n  remaining_bouquets = total_flowers // B\n  return remaining_bouquets\n\nprint(make_bouquet(A, B, C))",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          " \n\ndef bouquets(A, B, C):\n  if A <= 0 or B <= 0 or C < 0:\n   print(\"Invalid input\")\n  else:\n   total_flowers = A + B - C\n   num_bouquets = total_flowers // B\n   return num_bouquets\n  \nprint(bouquets(25, 10, 7)) # answer: 3 bouquets",
          "\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef count_bouquets(A, B, C):\n    return (A-C)//B\n    \n# usage example\ncount_bouquets(20, 5, 3)\n# output: 3",
          "\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef bouquetCalculator(A, B, C):\n  return (A - C) // B",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef flower_bouquets(A, B, C):\n  return (A - C) // B\n\n# Call the function\nflower_bouquets(20, 3, 5)\n\n# Output\n5",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef make_bouquets(A, B, C):\n  return int((A-C) / B)",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  num_bouquets = (A - C) // B\n  return num_bouquets\n\nprint(num_bouquets(A, B, C))",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef calculate_bouquets(A, B, C):\n  total_bouquets = (A-C) // B\n  return total_bouquets\n\nprint(calculate_bouquets(30, 10, 5)) # Output: 2",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef make_bouquets(A, B, C):\n    return (A - C) // B\n\n#The function returns the number of bouquets that Wendy can make with the flowers she still has.",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef flower_bouquets(a, b, c):\n  return a // b - c\n\n# Call the function\nprint(flower_bouquets(A, B, C))",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef wilted_flowers(A, B, C):\n    return (A - C) // B",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  return (A-C)//B",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef get_remaining_bouquets(A, B, C): \n    return (A - C) // B \n \nremaining_bouquets = get_remaining_bouquets(A, B, C)",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  return (A - C) // B\n  \n# Example:\nprint(num_bouquets(150, 5, 10))\n# Output: 28",
          "\n\nAnswer = (A - C) / B"
        ]
      ]
    },
    "source": {
      "question": " Wendy picked 45 flowers for her friend\u2019s wedding. She was making bouquets with 5 flowers in each one. If 35 of the flowers wilted before the wedding, how many bouquets could she still make? ",
      "final_answer": 2.0,
      "index": 566
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 46,
      "duration": 43.50693392753601,
      "templates": [
        "Isabel baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Isabel baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef num_packages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_packages(a, b, c):\n    x = (a - b) // c\n    return x",
          "\nAnswer = A/C-B"
        ],
        [
          "\n\ndef cupcake_packages(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_packages(A, B, C): \n  answer = (A - B) // C\n  return answer",
          "\nAnswer = ( A - B ) / C"
        ],
        [
          "\n\ndef packages_made(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate(a,b,c):\n    return (a-b)//c\nprint(calculate(A,B,C))",
          "\nAnswer = A/C \u00f7 B"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_packages(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef cupcake_packages(A, B, C):\n  return (A - B) // C\n \n# Calling the function\nanswer = cupcake_packages(A, B, C)\nprint(answer)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_packages(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packageAnswer(a, b, c):\n  return (a - b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_packages(A, B, C):\n  return (A - B) // C\n\n#Example:\nnumber_of_packages(20,7,3) #Returns 3 packages",
          "\nAnswer = A/C \u00f7 B"
        ],
        [
          "\n\ndef packages(A,B,C):\n  return (A-B)//C\n\nanswer = packages(A,B,C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef answer(a, b, c):\n  return (a - b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numPackages(A, B, C): \n  return (A - B) // C\n\nAnswer: numPackages(A, B, C)",
          "\nAnswer = A/C \u00f7 B"
        ],
        [
          "\n\ndef packages(A, B, C):\n   return (A - B) // C\n\n#You can call the function like this and get the number of packages as an output\npackages(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcake_pkg(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B) / C"
        ],
        [
          " \n\ndef num_packages(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_packages(A, B, C): \n    return (A - B)//C\n  \ncalculate_packages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef bake_sale(A,B,C):\n  return (A-B)//C\n\n# call the function\nbake_sale(A,B,C)",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Isabel baked 39 cupcakes for her school's bake sale. If her brother, Todd, ate 21 of them how many packages could she make if she put 3 cupcake in each package? ",
      "final_answer": 6.0,
      "index": 567
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 38,
      "duration": 40.456438064575195,
      "templates": [
        "Sarah had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a Python function that returns the answer.",
        "Sarah had A homework problems. She finished B of them but still had C pages of problems to do. If each page has the same number of problems on it, how many problems are on each page?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef HomeworkProbs(A, B, C):\n  return (A - B) / C\n\nprint(HomeworkProbs(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numProblemsPerPage(A, B, C):\n  return (A - B) / C\n  \nprint(numProblemsPerPage(A, B, C))",
          " \nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef homework_problems(A, B, C):\n  return (A - B) / C\n\nprint(homework_problems(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef numProblems(a,b,c):\n  return (a-b)//c\n  \nprint(numProblems(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numProblems(A, B, C):\n  return (A-B)//C + 1",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef page_problems(A, B, C):\n  return (A - B) // C\n  \nprint(page_problems(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef remaining_problems(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problemPerPage(A, B, C): \n  return round((A-B)/C)\n\nprint(problemPerPage(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problemsPerPage(A, B, C):\n  remainingProblems = A - B\n  return remainingProblems/C\n\nprint(problemsPerPage(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef numProblemsPerPage(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef problems_per_page(A, B, C):\n  return (A-B)//C",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef page_problems (A,B,C):\n    return (A-B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef problems_per_page(A,B,C):\n  remaining_problems = A - B\n  problems_per_page = remaining_problems/C\n  return problems_per_page\n\nprint(problems_per_page(A,B,C))",
          "\nAnswer = C / B"
        ],
        [
          "\n\ndef homework(A, B, C):\n  return (A-B)//C \n\n#A is the number of total homework problems, B is the number finished, and C is the remaining number of pages.",
          "\nAnswer = C / B"
        ],
        [
          " \n\ndef homeworkProblems(A, B, C): \n  return int((A - B) / C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_problems(A, B, C):\n  return (A - B) / C\n\nprint(calculate_problems(A, B, C))",
          "\n\nAnswer = C / B"
        ],
        [
          " \n\nAnswer: \ndef number_of_problems_on_each_page(A, B, C):\n  return (A-B) // C \n\n# This function takes the number of homework problems (A), the number of problems completed (B), and the number of pages of problems left (C) as inputs, and returns the number of problems on each page.",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Sarah had 55 homework problems. She finished 6 of them but still had 7 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ",
      "final_answer": 7.0,
      "index": 568
    }
  },
  {
    "result": 6.0,
    "meta": {
      "n_calls": 44,
      "duration": 44.750386238098145,
      "templates": [
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a Python function that returns the answer.",
        "There are A students trying out for the school's trivia teams. If B of them didn't get picked for the team and the rest were put into C groups, how many students would be in each group?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        6.0
      ],
      "completions": [
        [
          "\n\ndef group_students(A, B, C):\n  return (A - B) / C\n\nprint(group_students(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef trivia_groups(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef triviaGroups(A, B, C):\n  return int((A-B)/C)",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef get_student_in_group(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numStudentsPerGroup(A, B, C):\n  numPerGroup = (A-B)/C\n  return numPerGroup\n\nprint (numStudentsPerGroup(A, B, C))",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\nA, B, C\n\ndef groupSize(A, B, C): \n  return (A - B) // C \n  \nprint(groupSize(A, B, C))",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef studentsInGroup(A, B, C): \n  return (A-B)//C",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef trivia_teams(A, B, C):\n  return (A-B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numStudents(A, B, C):\n  return int((A-B)/C)",
          "\n\nAnswer = A/C"
        ],
        [
          "\n\ndef get_group_size(A, B, C):\n  group_size = (A - B) // C\n  return group_size\n\n# Example\n\nA = 20\nB = 10\nC = 2\n\ngroup_size = get_group_size(A, B, C)\nprint(group_size)  # prints 5",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef groupMembers(A, B, C): \n  return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_student_per_group(A, B, C):\n  return (A-B)//C\n  \n# For example,\nnum_student_per_group(20, 5, 4)\n# returns 4.",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef num_students(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef group_students(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef trivia(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef numStudentsPerGroup(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef trivia_groups(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef calculate_students_per_group(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numOfStudentsInGroup(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef studentGroupSize(A, B, C): \n  return (A - B) // C",
          "\nAnswer = A - B \u00f7 C"
        ],
        [
          "\n\ndef num_per_group(a, b, c):\n  return (a - b) / c\n  \nnum_per_group(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef triviaDivider(A, B, C):\n  return (A - B) // C",
          "\nAnswer = A - B / C"
        ]
      ]
    },
    "source": {
      "question": " There are 58 students trying out for the school's trivia teams. If 10 of them didn't get picked for the team and the rest were put into 8 groups, how many students would be in each group? ",
      "final_answer": 6.0,
      "index": 569
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 40,
      "duration": 49.23851704597473,
      "templates": [
        "Paige picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a Python function that returns the answer.",
        "Paige picked A flowers for her friend\u2019s wedding. She was making bouquets with B flowers in each one. If C of the flowers wilted before the wedding, how many bouquets could she still make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef num_of_bouquets(A,B,C):\n  return (A - C)/B\n\nnum_of_bouquets(10,5,2)\n\nResult: 1.8",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef CalculateNumberOfBouquets (A, B, C):\n    return (A-C)//B\n    \nCalculateNumberOfBouquets(40, 10, 4)\n\n36",
          "\n\nAnswer = (A-C)/B"
        ],
        [
          "\n\ndef bouquet_calculator(A, B, C):\n  return (A-C)/B\n\nanswer = bouquet_calculator(A, B, C)",
          "\n\nAnswer = (A-C)/B"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef make_bouquets(a, b, c):\n    return int((a - c) / b)\n\nmake_bouquets(A, B, C)",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquet_count(a_flowers, b_flowers, wilted_flowers):\n  return (a_flowers - wilted_flowers)//b_flowers\n  \nprint(bouquet_count(20, 5, 4))  # Output: 3",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(a, b, c): \n    if (a - c) >= b: \n        return (a - c) // b \n    else: \n        return 0 \n\nnum_bouquets(A, B, C)",
          "\n\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets (A, B, C):\n  return int((A - C)/B)",
          "\nAnswer = B - C bouquets"
        ],
        [
          "\n\ndef flower_bouquets(a,b,c):\n  return (a-c)//b\n\nflower_bouquets(10, 3, 2) \nResult: 3 bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef num_bouquets(a,b,c):\n    if  a > b-c:\n        return (b-c)\n    else:\n        return a\n    \nprint(num_bouquets(A,B,C))",
          "\nAnswer = B - C;"
        ],
        [
          "\n\ndef wilted_flowers(a_flowers, b_flowers, c_flowers):\n    return (a_flowers // b_flowers) - c_flowers",
          "\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef flower_bouquets(A, B, C):\n    remaining_bouquets = A//B - C\n    return remaining_bouquets\n\n#Test case\nprint(flower_bouquets(30, 4, 8))\n\n#Output: 4",
          "\nAnswer = (A - C)/B"
        ],
        [
          "\n\ndef makeBouquets(A,B,C):\n  numBouquets = (A-C)//B\n  return numBouquets",
          "\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef flower_bouquets(A, B, C):\n  return (A-C)//B",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef remaining_bouquets(a,b,c):\n  return (a-c)//b\n  \nprint(remaining_bouquets(100,3,20))\n# Output: 26",
          "\nAnswer = (A-C) / B"
        ],
        [
          "\n\ndef bouquets(A, B, C):\n  # substract wilted flowers from total\n  total = A - C\n  # divide total by number of flowers needed for each bouquet\n  bouquets = total // B\n  return bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquet_count(a, b, c):\n  return (a-c)//b  # integer division \n\n# Example\nbouquet_count(20, 5, 3)  # returns 3",
          "\nAnswer = (A - C) / B bouquets"
        ],
        [
          "\n\ndef wilted_bouquets (A, B, C):\n  return (A - C) // B\n\nprint(wilted_bouquets(100, 10, 20)) # 8 bouquets",
          "\nAnswer = (A - C) / B"
        ],
        [
          "\n\ndef bouquet_calc(a,b,c):\n  return (a-c)//b\n\n# For example, if A = 20, B = 5, and C = 3, then the function would return 3.",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef num_bouquets(A, B, C):\n  return (A-C)//B\n\n#Call the function.\nnum_bouquets(20, 5, 4)\n# Output: 3",
          "\nAnswer = B - C"
        ],
        [
          "\n\ndef bouquet_maker(a, b, c):\n  return (a - c) // b \n\nprint(bouquet_maker(A, B, C))",
          "\nAnswer = (A - C) / B"
        ]
      ]
    },
    "source": {
      "question": " Paige picked 53 flowers for her friend\u2019s wedding. She was making bouquets with 7 flowers in each one. If 18 of the flowers wilted before the wedding, how many bouquets could she still make? ",
      "final_answer": 5.0,
      "index": 570
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 24,
      "duration": 30.461390733718872,
      "templates": [
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a Python function that returns the answer.",
        "A waiter had A customers in his section. If B of them left and the rest of his tables had C people at each table, how many tables did he have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0,
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef num_of_tables(A, B, C):\n  return (A-B)/C\n\nprint(num_of_tables(10, 3, 4))\n#Output: 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_num_tables(A, B, C):\n  return (A - B) / C\n\nprint(calculate_num_tables(A, B, C))",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef table_num(A, B, C):\n  return (A - B) / C\n  \nprint(table_num(10, 2, 4)) # Returns 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef remainingTables(A, B, C):\n  return (A - B) / C\n\nprint(remainingTables(7, 5, 4))\n# Returns 1.5",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef tables(A, B, C): \n  return (A - B) // C\n \n# Output \ntables(25, 5, 4) \n# 5 tables",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef tables(A, B, C):\n    return (A-B) // C\n\nprint(tables(100, 25, 4)) # should return 18",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef findTables(A, B, C):\n  return (A-B)//C\n\nfindTables(10, 2, 4) # Returns 2 tables",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_tables(a, b, c):\n  return (a-b)/c\n  \nprint(num_tables(a,b,c))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_tables(A, B, C):\n  return (A-B)//C \n  \nprint(num_of_tables(20, 4, 3))\n# Answer: 4 tables",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(A, B, C):\n  return (A - B)//C\n\nprint(num_tables(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_tables(A, B, C):\n  return (A - B) // C\n\nprint(num_of_tables(10, 5, 2)) # Prints 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef total_tables(a, b, c): \n  return (a - b) // c\n\nprint(total_tables(16, 3, 4)) # Prints 3",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A waiter had 22 customers in his section. If 14 of them left and the rest of his tables had 4 people at each table, how many tables did he have? ",
      "final_answer": 2.0,
      "index": 571
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 64.89262986183167,
      "templates": [
        "Luke was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a Python function that returns the answer.",
        "Luke was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_of_boxes(A, B, C):\n  return (A - B) // C\n  \n  #The function takes in 3 arguments, A, B and C, and returns the number of boxes Luke has to use.\n  #The calculation (A - B) // C finds remaining games divided by games per box to get the number of boxes needed.",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_games_boxes(A,B,C):\n \treturn (A - B)//C\nprint(num_games_boxes(50,25,5))\n#output: 5",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n  return (A - B) // C\n  \nAnswer: num_boxes(A, B, C)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n  return (A-B) // C + 1\n\nnum_boxes(20, 10, 4) # Returns 3",
          "\n\nAnswer = (B - (B mod C)) / C"
        ],
        [
          " \n\ndef boxes_needed(a, b, c):\n  return (a-b)//c + 1\n\nprint(boxes_needed(10, 7, 3))  # prints 2",
          " \nAnswer = (B - A)/C"
        ],
        [
          "\n\ndef number_of_boxes(A, B, C): \n  return (A - B) // C\n\nprint(number_of_boxes(100, 50, 10)) # 5",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n  return ((A-B)//C + (1 if (A-B)%C != 0 else 0))\n  \nprint(num_boxes(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_boxes(A, B, C):\n  return (A - B) // C\n  \nnum_of_boxes(10, 4, 2) # Returns 3",
          "\nAnswer = (B - A) \u00f7 C"
        ],
        [
          "\n\ndef boxes_used(a, b, c):\n  boxes = (a-b) // c\n  return boxes+1\n\nanswer = boxes_used(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A - B) // C\n  \nboxes(A, B, C)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          " \n\ndef num_boxes(A, B, C):\n  return (A-B) / C\n  \nnum_boxes(A, B, C)",
          " \nAnswer = (B-A)/C + 1"
        ],
        [
          " \n\ndef game_boxes(A, B, C): \n    return (A-B)//C + 1\n\nAnswer: game_boxes(A, B, C)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_of_boxes(a, b, c):\n  return (a - b) // c\n  \nprint(num_of_boxes(A, B, C))",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef gamesSold(A,B,C):\n    return (A-B)//C + ((A-B) % C > 0)\n    \nprint(gamesSold(20, 7, 5)) # 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_boxes(a, b, c):\n  return (a-b) // c\n  \n  \ncalculate_boxes(a, b, c)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef find_boxes(A, B, C):\n  boxes = (A - B) // C\n  return boxes",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef numBoxes(a, b, c):\n  return (a-b)//c\n  \nnumBoxes(20, 10, 4) #returns 2",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_boxes(A, B, C): \n  return (A - B) // C + 1",
          " \nAnswer = (B - A)/C"
        ],
        [
          "\n\ndef calculate_boxes(a, b, c):\n  boxes = (a-b)//c \n  if((a-b)%c > 0):\n    boxes += 1\n  return boxes\n  \nprint(calculate_boxes(A, B, C))",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef games_boxed(A, B, C):\n  remaining_games = A - B\n  num_boxes = remaining_games // C\n  if remaining_games % C > 0:\n    num_boxes += 1\n  return num_boxes",
          "\nAnswer = (B - (B % C))/C"
        ],
        [
          "\n\ndef number_of_boxes(a, b, c):\n  return (a-b)//c\n  \n# The function takes 3 arguments: the total number of games (a), the number sold (b), and the number of games in each box (c). It then returns the answer by performing integer division on the remaining games (a-b) and the number of games per box (c).",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A - B) // C\n  \nprint(boxes(10, 2, 3)) #--> 2",
          "\nAnswer = (B - (B mod C)) / C"
        ],
        [
          "\n\ndef game_boxes(a, b, c):\n  return (a-b)//c\n  \ngame_boxes(15, 5, 3)  #Returns 2",
          "\n\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef old_games(A, B, C):\n  return (A-B)//C\n  \n#Call the function\nold_games(20, 10, 4)\n#Output \n2",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(a, b, c):\n  return (a - b) // c\n\n#The function returns the number of boxes needed, given the starting number of games (a), the number of games sold (b), and the number of games packed into each box (c).",
          "\n\nAnswer = (B-A)/C"
        ]
      ]
    },
    "source": {
      "question": " Luke was selling his old games. He started out with 39 but sold 19 of them. He packed the rest up putting 4 games into each box. How many boxes did he have to use? ",
      "final_answer": 5.0,
      "index": 572
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 44,
      "duration": 43.726057052612305,
      "templates": [
        "Haley baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Haley baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0
      ],
      "completions": [
        [
          "\n\ndef numPackages(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef packages(A, B, C):\n  return (A-B)//C\n\nAnswer: packages(A, B, C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pack_cupcakes(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cupcakes(A, B, C): \n  return (A - B) // C\n  \ncupcakes(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_packages(A, B, C):\n    return (A-B)//C\n\nprint(num_of_packages(20, 5, 6))",
          "\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef packagesMade(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_packages(A, B, C):\n  packages = (A - B) // C\n  return packages",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n    return (A - B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A,B,C): \n  return (A-B) // C\n  \n#Call the function\npackages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef packages(A, B, C): \n  return (A-B) // C \n \nprint(packages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A,B,C): \n  return (A - B) // C",
          "\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef bakeSale(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef number_of_packages(A, B,C):\n  return (A-B)//C\n  \n  # calling the function \nnumber_of_packages(A,B,C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef make_packages(A,B,C): \n    packages = (A-B)//C\n    return packages",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A-B) // C\n  \npackages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_packages(a, b, c):\n  return (a-b)//c              # returns how many packages Haley can make",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_packages(A,B,C):\n    return (A-B)//C\n\nnumber_of_packages(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages_of_cupcakes(A, B, C): \n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cupcakes_for_sale(A, B, C):\n  return (A-B)//C\n  \n# Answer = (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef sale_packages(A,B,C):\n  return int((A-B)/C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Haley baked 20 cupcakes for her school's bake sale. If her brother, Todd, ate 11 of them how many packages could she make if she put 3 cupcake in each package? ",
      "final_answer": 3.0,
      "index": 573
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 46,
      "duration": 51.6590461730957,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef cages(A, B, C):\n  return (A - B) // C\n  \ncages(25, 9, 4)\n=> 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_cages(a,b,c):\n    return (a-b)//c\n\nprint(num_of_cages(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef find_cages(A, B, C):\n  return (A - B) // C\n  \n# Example\nfind_cages(10, 5, 2) # Returns 2",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n    return (A - B) // C\n\nprint(num_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_cages(A, B, C): \n  return (A - B) // C\n  \nprint(num_of_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(a,b,c):\n  return (a-b)//c\n  \nprint(cages(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(a, b, c):\n  return (a - b) // c \n  \ncages_used(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_cages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  remainder = A - B\n  num_cages = remainder // C\n  return num_cages",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A-B)//C\n\nprint(cages_used(10, 4, 2))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calc_total_cages(A, B, C):\n  return (A - B) // C\n\n# The function returns the total number of cages used.",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef sellPuppies(a, b, c):\n  return (a-b+c-1)//c",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef petStoreCages(A, B, C):\n  return (A - B) // C\n  \nprint(petStoreCages(40, 25, 5)) # answer is 5 cages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cagesUsed(A, B, C):\n  return math.ceil((A-B)/C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A - B) // C\n  \nprint(num_cages(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateCages(A,B,C):\n    return (A-B)//C\n\nprint(calculateCages(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store(A,B,C):\n  return (A-B)//C\n  \npet_store(A, B, C)",
          "\n\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef get_cages_used(a, b, c):\n    return (a - b) // c\n\nprint(get_cages_used(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numCages (A, B, C):\n  numCages = (A - B) / C\n  return numCages",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pups_in_cages(a, b, c):\n  return (a - b) / c\n  \nAnswer = pups_in_cages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 13 puppies. In one day they sold 7 of them and put the rest into cages with 2 in each cage. How many cages did they use? ",
      "final_answer": 3.0,
      "index": 574
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 53.95900893211365,
      "templates": [
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelves_for_coloring_books(A, B, C):\n  return (A-B)//C + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_count(A, B, C): \n    return (A - B) // C + 1\n\nprint(shelf_count(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n    return A-B // C\n    \nshelves_used(A, B, C)",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          "\n\ndef store_coloring_books(A, B, C):\n  return (A-B)//C\n\nprint(store_coloring_books(A, B, C))",
          "\n\nAnswer = (B + C) / C"
        ],
        [
          "\n\ndef shelf_number(A,B,C):\n    shelfs = (A - B) // C\n    return shelfs",
          "\n\nA-B=C \nAnswer = C/C = 1 shelf"
        ],
        [
          "\n\ndef numShelves(A, B, C): \n  return int((A-B)/C)",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef numShelf(A, B, C):\n  return (A - B) // C\n\nprint(numShelf(A, B, C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  remaining = A-B\n  return remaining//C + (1 if remaining%C > 0 else 0)",
          "\n\nAnswer = (B / C)"
        ],
        [
          "\n\ndef shelf_count(A, B, C):\n  return (A-B)//C\n\nprint(shelf_count(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C\n\nshelves(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef shelfsNeeded(A, B, C): \n    return (A-B) // C + 1\n\nprint(shelfsNeeded(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n        return (A - B) // C \n\nprint(numShelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          " \n\ndef number_of_shelves(A, B, C):\n    return (A-B) // C\n  \nprint(number_of_shelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n  return (A - B) // C\n\nprint(shelves_used(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n    return int((A-B)/C)",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A - B) // C\n  \nprint(num_shelves(10, 3, 4)) # Prints 2 since 10-3 = 7 and 7//4 = 2",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A-B)//C\n  \nshelves(A, B, C)",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return round((A - B) / C)\n\nprint(num_shelves(A, B, C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef shelvesUsed(A, B, C):\n    return int((A-B)/C)",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef shelvesUsed(A,B,C):\n    return (A - B) // C\n\nprint(shelvesUsed(A,B,C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves(A,B,C):\n  total_shelves = (A-B) // C\n  return total_shelves\n\nprint(shelves(A, B ,C))",
          "\nAnswer = B/C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  number_of_shelves = (A - B) // C\n  return number_of_shelves\n\nprint(calculate_shelves(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n    return (A - B)//C\n\nprint(shelves_used(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef calculateShelves(A, B, C):\n    return (A - B) // C\n\nprint(calculateShelves(A, B, C))",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef shelf_calc(A, B, C):\n    return (A-B) // C\n\nprint(shelf_calc(A, B, C))",
          "\n\nAnswer = B/C"
        ]
      ]
    },
    "source": {
      "question": " A store had 27 coloring books in stock. They ended up putting them on sale and getting rid of 6 of them. The put the ones they still had onto shelves with 7 on each shelf. How many shelves did they use? ",
      "final_answer": 3.0,
      "index": 575
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 44,
      "duration": 55.78579807281494,
      "templates": [
        "Wendy had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Wendy end up with?\nWrite a Python function that returns the answer.",
        "Wendy had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Wendy end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef folders(A, B, C):\n  return (A-B) / C\n\nprint(folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_folders(A, B, C):\n  return (A - B) // C\n\nAnswer: num_folders(A, B, C)",
          " \n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A-B)//C\n\nprint(num_of_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(A, B):\n  return (A-B)//C\n\nAnswer: (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A-B) // C\n  \n#For example, if A = 10, B = 2, and C = 5, the answer would be 1. num_folders(10, 2, 5) would return 1.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folderCreator(A, B, C):\n  return (A-B)//C\n \nfolderCreator(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n\nanswer = folders(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef wendyFolders(A, B, C):\n  return (A-B)//C\n  \nprint(wendyFolders(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return int((A-B)/C)",
          "\nAnswer = (A -B) / C"
        ],
        [
          "\n\ndef find_num_folders(files, deleted, perfolder):\n  return (files - deleted) // perfolder\n\nanswer = find_num_folders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_folders(a, b, c):\n  return (a-b) // c\n\nprint(number_of_folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders_with_files(a,b,c):\n  return (a-b) // c\n\nprint(folders_with_files(A, B, C))",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A-B)//C\n\nprint(num_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders(A, B):\n  return (A - B) // C\n\nnum_folders(A, B)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A-B)//C\n  \nprint(num_folders(10, 4, 3))  # prints 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef numFolders(A, B, C): \n  return (A - B) // C\n  \nnumFolders(A, B, C)",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A - B) // C\n\nprint(num_folders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(A, B, C):\n  return (A - B) // C\n\nprint(numFolders(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef compute_files(A, B, C): \n  return (A - B) // C\n\n# Replace A, B, and C with the numbers provided\nanswer = compute_files(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C): \n    return (A-B)//C\n\nprint(num_of_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef deletedFolders(A, B, C):\n  return (A-B) // C\n\nprint(deletedFolders(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef wendy_folders():\n  A = int(input(\"How many files did Wendy have? \"))\n  B = int(input(\"How many files did Wendy delete? \"))\n  C = int(input(\"How many files did she put in each folder? \"))\n\n  return (A-B)//C\n\nprint(wendy_folders())",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Wendy had 82 files on her computer. She deleted 37 of them and put the rest into folders with 5 files in each one. How many folders did Wendy end up with? ",
      "final_answer": 9.0,
      "index": 576
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 48,
      "duration": 46.9517297744751,
      "templates": [
        "Kaleb had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Kaleb had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0,
        2.0
      ],
      "completions": [
        [
          "\n\ndef toys(A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef DollarToyPurchase (A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef kalebToyTotal(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef CalcToys(A, B, C):\n  return (A-B)/C \n\nCalcToys(A, B, C)",
          "\nAnswer = A-B / C"
        ],
        [
          "\n\ndef kaleb_buy(a, b, c):\n  return (a-b)//c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_toys(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef kaleb_toys(a, b, c):\n  return (a - b) / c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef dollar_calc(A, B, C):\n    return (A-B)/C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef remainder(A, B):\n  C = (A - B) // 1\n  return C\n  \nprint(remainder(A, B))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buyToys(A, B, C):\n  return (A - B) // C",
          "\nA - B / C = Answer\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_toys(A, B, C):\n  return (A-B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A - B) / C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef purchase_toys(A, B, C):\n  return (A - B) // C\n\n#Test\nprint(purchase_toys(10, 5, 1)) #Should return 5",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_toys_left(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_spending(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef new_game(a, b, c):\n    return (a - b) // c\n\nprint(new_game(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys_left(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef kaleb_spending(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buyToy(A, B, C): \n    return (A - B)//C",
          "\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef buy_toys(A, B, C): \n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys_calc(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Kaleb had 12 dollars. If he spent 8 bucks on a new game, how many 2 dollar toys could he buy with the money he had left? ",
      "final_answer": 2.0,
      "index": 577
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 60.10695815086365,
      "templates": [
        "Sarah was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Sarah have?\nWrite a Python function that returns the answer.",
        "Sarah was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Sarah have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef vegetable_gardens(A, B, C):\n  small_gardens = (B - (B % C)) / C\n  return int(small_gardens)",
          "\n\nA x (B - C) = Answer\nAnswer = 6"
        ],
        [
          "\n\ndef num_small_gardens(A,B,C):\n  return B // C\n\nanswer = num_small_gardens(A, B, C)",
          "\nAnswer = (B - C*C) / C"
        ],
        [
          "\n\ndef number_of_gardens(A, B, C):\n    total_seeds = B + (C * B) \n    total_gardens = total_seeds // A\n    return total_gardens\n\nnumber_of_gardens(A,B,C)",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef plant_veggies(a, b, c):\n  return (b - c) // a\n  \nprint(plant_veggies(A,B,C))",
          "\n\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  small_garden=b-c\n  return small_garden//a\n\nprint(num_small_gardens(3, 12, 6)) #returns 2",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef numGardens(A, B, C):\n  return B//C\n\nprint(numGardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return B // C\n\nprint(num_small_gardens(A, B, C))",
          "\n\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return B // C\n\nprint(num_small_gardens(A, B, C))",
          "\n\nA * (B / C) = Answer\nAnswer = 8 small gardens"
        ],
        [
          "\n\ndef small_gardens(a_seeds, b_seeds, c_seeds):\n  return b_seeds // c_seeds\n\nprint(small_gardens(a_seeds, b_seeds, c_seeds))",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef number_of_small_gardens(A,B,C):\n  return (B // C) // A\n\nprint(number_of_small_gardens(A,B,C))",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B // C) // A\n\nprint(num_small_gardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef #SmallGardens(A, B, C):\n  return (B - C) // A\n\n#SmallGardens(A, B, C)",
          "\nAnswer = (B - C) / C"
        ],
        [
          " \n\ndef get_small_garden_count(A, B, C):\n  return (B//C)\n\nprint(get_small_garden_count(A, B, C))",
          "\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef small_gardens(a, b, c):\n  return (b - (a * c)) / c \n\nprint(small_gardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\n\ndef numSmallGardens(A,B,C):\n  return int(B/C)\n\nprint(numSmallGardens(A,B,C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n    return B//C\n\nprint(num_small_gardens(A, B, C))",
          "\n\nAnswer = (B - C) \u00f7 C"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return (B // C) // A\n  \nIn this example, Sarah would have return (B // C) // A small gardens.",
          "\nAnswer = (B - (C * B)) / C"
        ],
        [
          "\n\ndef total_small_gardens(A,B,C):\n    total_seeds = A*B\n    number_small_gardens = total_seeds // C\n    return number_small_gardens\n\nprint(total_small_gardens(A,B,C))",
          "\n\nA x B \u00f7 C = Answer\nAnswer = B \u00f7 C"
        ],
        [
          "\n\ndef numGardens(A, B, C):\n  return B // C\n\nprint(numGardens(A, B, C))",
          "\n\nAnswer = (B - (C*X))/C\nwhere X is the number of small gardens Sarah had."
        ],
        [
          "\n\ndef plant_veggies(a, b, c):\n  return (b - c) // a\n  \n# Call the function \nplant_veggies(A, B, C)",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef num_of_small_gardens(A,B,C):\n\treturn (B // C) // A\n\n#example\nprint(num_of_small_gardens(5,20,2)) # 2 small gardens",
          "\n\nA \u00d7 B / C = Answer\nAnswer = B / C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b - (c * a)) / c\n\nprint(num_small_gardens(A, B, C))",
          "\n\nA x B = C\nC \u00f7 B = Answer\nAnswer =  A"
        ],
        [
          "\n\ndef num_small_gardens(A, B, C):\n  return (B - (C * A)) / C\n  \nprint(num_small_gardens(A, B, C))",
          "\n\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return (B // C) // A\n  \nAnswer: numSmallGardens(A, B, C)",
          "\n\nA x (B - C) = Answer\nAnswer = 0  (if B = C)"
        ],
        [
          "\n\ndef small_gardens(A,B,C):\n  return B/(A*C)\n\nprint(small_gardens(2,10,3))\n#Answer = 5 small gardens",
          "\n\nAnswer = (B - C) / C"
        ]
      ]
    },
    "source": {
      "question": " Sarah was planting vegetables in her garden. She started with 21 seeds and planted 12 of them in the big garden and in each of her small gardens put 3 seeds each. How many small gardens did Sarah have? ",
      "final_answer": 3.0,
      "index": 578
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 72.16642594337463,
      "templates": [
        "Nancy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Nancy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          " \n\ndef numberOfPics(A, B, C): \n  return (A // (B + C), B, A % (B + C))",
          "\n\nAnswer = A/ (B+C)"
        ],
        [
          "\n\ndef pics_in_albums(A, B, C):\n  album1 = B\n  album2 = (A - B) / C\n  return album1, album2\n  \npics_in_albums(A, B, C)",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef howManyPics(A, B, C): \n  numPics = A // (B + C)\n  return numPics\n\nprint(howManyPics(30, 8, 2)) # Output: 4",
          "\nAnswer = (A - B) / C + B"
        ],
        [
          "\n\ndef pictures(a,b,c):\n  return a // (b+c), b, c",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef picInEachAlbum(A, B, C):\n  totalPics = A\n  album1Pics = B\n  remainingAlbumsPics = int((totalPics - album1Pics) / C)\n  return (album1Pics, remainingAlbumsPics)\n\nprint(picInEachAlbum(100, 25, 3)) # Output: (25, 33)",
          "\nAnswer = A/B + (A/C)"
        ],
        [
          "\n\ndef num_pics_per_album(A,B,C):\n  return (A//(B+C)), (B//B), (A-(B*(A//(B+C))))//C \n\nAnswer: (A//(B+C)), (B//B), (A-(B*(A//(B+C))))//C",
          "\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef getAlbumSize(A, B, C):\n  return [B, (A-B)//C, (A-B)%C]\n\nprint(getAlbumSize(A, B, C))",
          "\nAnswer = B pics in 1 album, C pics in the other albums."
        ],
        [
          "\n\ndef album_pics(a, b, c):\n  return (a - b) // c, b",
          "\n\nAnswer = A/B + (A - B)/C"
        ],
        [
          "\n\ndef pics_upload():\n  A = int(input(\"How many pictures did Nancy upload? \"))\n  B = int(input(\"How many pictures did she put into one album? \"))\n  C = int(input(\"How many albums did she put the rest into? \"))\n  pics_album = A // (B + C)\n  return pics_album\n\nprint(pics_upload())",
          "\n\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef num_of_pics (A, B, C):\n  return (A // (B + C)) * B, (A // (B + C)) * C",
          "\n\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef count_albums(a, b, c):\n  return (a//(b+c), a//b, a//c)\n  \nprint(count_albums(A, B, C))",
          "\n\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef album_picture_count(a,b,c):\n  album1 = b\n  album2 = a - b\n  album3 = int(album2/c)\n  album4 = int(album2%c)\n  return album1, album3, album4\n\nanswer = album_picture_count(A,B,C)\nprint(\"The total pictures in each album are: Album1 =\", answer[0], \"",
          "\nAnswer =A/B and A/C"
        ],
        [
          "\n\ndef numPicInEachAlbum(A, B, C):\n  first_album = B\n  remaining_albums = C\n  pics_in_each_album = (A - first_album) // remaining_albums\n  return pics_in_each_album\n  \nprint(numPicInEachAlbum(60, 8, 4))\n# prints 10",
          "\n\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef pic_albums(A, B, C):\n  return A//(B+C), A//B, A//C\n\npic_albums(30, 10, 5)\n\nThis would return (6, 3, 6) indicating 6 pictures for each additional albums, 3 pictures for the first album, and 6 pictures for the second album.",
          "\n\nAnswer = A/B + A/C"
        ],
        [
          "\n\ndef divided_pictures(A, B, C):\n  return A//(B + C), B, A//C\n\nprint(divided_pictures(A, B, C))",
          "\n\nA - B - C = number of pics in each album\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_albums(a,b,c):\n  return [a//b, (a- (a//b))//c, (a - (a//b) - ((a - (a//b))//c))]\n  \nget_albums(a,b,c)",
          "\nAnswer = A/ (B+C)"
        ],
        [
          "\n\ndef album_pictures(A, B, C): \n  return [B] + [A//C] * C",
          "\nAnswer = A/B + C"
        ],
        [
          "\n\ndef albumPics(a, b, c):\n  return [b, a - b, c]",
          "\nAnswer = A/B+C"
        ],
        [
          "\n\ndef album_size(A, B, C):\n  pics_per_album = A // (B + C)\n  return pics_per_album\n\nprint(album_size(100, 20, 3)) # Output: 17",
          "\nAnswer = A \u00f7 (B + C)"
        ],
        [
          "\n\ndef pictures_in_albums(A,B,C):\n  pictures_in_each_album = A//(B+C)\n  return pictures_in_each_album\n\nprint(pictures_in_albums(20,5,3))\n\nThis function will return 3.",
          "\nAnswer = A/(B + C)"
        ],
        [
          "\n\ndef albums(A, B, C):\n  return (A // (B + C), B, A % (B + C))",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef num_pictures_per_album(A,B,C):\n  return A // (B + C), (A - (A // (B + C))) // C, (A - (A // (B + C))) % C",
          "\nAnswer = A/B + A/(C+1)"
        ],
        [
          "\n\ndef pictures_album(a, b, c):\n  return 'The first album has ' + str(b) + ' pictures, and the other ' + str(c) + ' albums each have ' + str(a - b) + ' pictures.'\n\npictures_album(a, b, c)",
          "\nAnswer = A/B = C"
        ],
        [
          "\n\ndef album_pics(A, B, C):\n  return A, int(B/C), B%C",
          "\nAnswer = (A - B) / C + B"
        ]
      ]
    },
    "source": {
      "question": " Nancy uploaded 51 pictures to Facebook. She put 11 pics into one album and put the rest into 8 different albums. How many pictures were in each album? ",
      "final_answer": 5.0,
      "index": 579
    }
  },
  {
    "result": 2.0,
    "meta": {
      "n_calls": 50,
      "duration": 58.12864875793457,
      "templates": [
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a Python function that returns the answer.",
        "A company invited A people to a luncheon, but B of them didn't show up. If the tables they had held C people each, how many tables do they need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        2.0
      ],
      "completions": [
        [
          "\n\ndef calculate_tables(A, B, C):\n  return (A - B) / C\n  \nAnswer = calculate_tables(A, B, C)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef luncheon_tables(A, B, C):\n  return int((A - B) / C)",
          "\nAnswer = ((A - B) / C) tables"
        ],
        [
          "\n\ndef num_tables(num_people_invited, num_people_not_showed):\n  return (num_people_invited - num_people_not_showed) // c\n\nprint(\"Number of tables: \", num_tables(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_tables(number_people, number_showed_up):\n  return (number_people - number_showed_up) / C\n  \n  // C is the number of people that each table can hold",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef count_tables(unattended, table_size):\n  total_seats = unattended * table_size\n  return total_seats // table_size\n\nprint(count_tables(B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_tables(absent, capacity):\n    return (absent // capacity) + 1\n\nprint(calculate_tables(B, C))",
          "\nAnswer = (A-B) \u00f7 C"
        ],
        [
          "\n\ndef count_tables(attendees, no_shows):\n  return (attendees - no_shows) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a,b,c):\n  return (a-b)//c\n\nprint(num_tables(A, B, C))",
          "\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef compute_table_count(a, b, c):\n  return (a - b)//c + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(a, b, c):\n  return (a - b) // c\n\n# Example usage\nprint(num_tables(20, 3, 4))\n# Output: 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_tables(attending, not_showing, capacity):\n  return (attending + not_showing) / capacity\n  \ntables = calculate_tables(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n    return (A - B) // C + 1",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef answer(A, B, C):\n  return ((A - B) // C) + 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n  tables = A - B\n  return (tables // C) + (tables % C > 0)\n  \nprint(tables_needed(46, 4, 8)) # Output: 6",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(A, B, C):\n    return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef tables_needed(a, b, c):\n    return (a - b) // c + 1  # Returns the number of tables needed",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateTables(A, B, C):\n  return (A-B) // C + (1 if (A-B) % C > 0 else 0)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef luncheon(A, B, C):\n  return (A - B) // C\n\n# example\nluncheon(30, 6, 10) # answer is 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tablesNeeded(a, b, c):\n  return (a-b)//c + (1 if (a-b)%c > 0 else 0)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\ndef numberOfTables(A, B, C):\n    #Calculate the number of tables needed to accommodate the people that showed up\n    return (A - B) // C\n\nprint(numberOfTables(20, 3, 4)) # Returns 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef compute_tables (a, b, c):\n  return (a - b) // c   # number of tables needed",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateTables(attendees, noShow):\n  return round(attendees/(noShow + C), 0)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_tables(invited, absent, per_table):\n  return (invited - absent) // per_table\n  \nprint(num_tables(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef tables_needed(a, b, c):\n  return (a - b) // c + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_tables(attendees, no_shows):\n  return (attendees - no_shows) // C + 1",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " A company invited 24 people to a luncheon, but 10 of them didn't show up. If the tables they had held 7 people each, how many tables do they need? ",
      "final_answer": 2.0,
      "index": 580
    }
  },
  {
    "result": 5.0,
    "meta": {
      "n_calls": 28,
      "duration": 29.676947832107544,
      "templates": [
        "Bianca's team won their dodgeball game and scored A points total. If Bianca scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a Python function that returns the answer.",
        "Bianca's team won their dodgeball game and scored A points total. If Bianca scored B of the points and everyone else scored C points each, how many players were on her team?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "completions": [
        [
          "\n\ndef DodgeballGame(A, B, C): \n  return (A - B) / C\n  \nAnswer: (A - B) / C players",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_size(A, B, C):\n    return (A - B) / C\n\nteam_size(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef team_players(A,B,C):\n  return (A - B) / C\n\nprint(team_players(45,15,5))\n# Result: 6 players",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef team_members(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          " \n\ndef numPlayers(A, B, C):\n  return int((A-B)/C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_players(A, B, C):\n  return (A - B) // C + 1\n\n# example\n\nnum_players(20, 8, 3) -> 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef teamSize(A, B, C):\n  return A // (B + C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef dodgeball_players(a, b, c):\n  return (a-b)//c\n\ndodgeball_players(A, B, C)",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef numPlayers(A, B, C):\n  numPlayers = (A - B) / C\n  return numPlayers",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_players(A, B, C):\n  return (A - B) // (C)\n\nprint(num_players(20, 8, 3)) # Answer: 4",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateTeamSize(a,b,c):\n  return (a - b)//c + 1\n\nteamSize = calculateTeamSize(A,B,C)\nprint(f'There were {teamSize} players on Bianca's team.')",
          "\nAnswer = (A - B)/C + 1"
        ],
        [
          "\n\ndef team_members(A, B, C):\n    return (A - B) // C + 1",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef numPlayers(A, B, C):\n    return (A-B)//C+1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_team_members (A,B,C):\n    result = (A - B)/C\n    return result",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Bianca's team won their dodgeball game and scored 75 points total. If Bianca scored 45 of the points and everyone else scored 6 points each, how many players were on her team? ",
      "final_answer": 5.0,
      "index": 581
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 66.17235803604126,
      "templates": [
        "For Halloween Emily received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a Python function that returns the answer.",
        "For Halloween Emily received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef piles(A, B, C): \n   return (A-B)//C\n\npiles(10, 2, 3) \nAnswer: 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pilesOfCandy(A, B, C):\n    return (A-B)//C\n    \npilesOfCandy(A, B, C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n  \nprint(candy_piles(10, 4, 2))\n# Output: 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piles(a, b, c): \n    return (a-b)//c \n\nprint(piles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef stacks(a, b, c):\n    return (a - b) // c\n\nprint(stacks(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n\n# For example, if A = 22, B = 8 and C =5 then the answer is 2\nprint(candy_piles(22, 8, 5))\n# Output: 2",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candy(A, B, C):\n    return (A - B) // C\n\nprint(candy(15, 5, 3))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_piles_made(A, B, C):\n    return (A - B) // C\n\nprint(get_piles_made(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_piles(A, B, C):\n  return int((A - B) / C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n\nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B) // C\n  \n# example\n  candy_piles(20, 8, 3)\n\nAnswer: 4",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    return (A-B)//C\n\nprint(candy_piles(A,B,C))",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(a, b, c):\n  return (a-b)//c\n\nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candy(A, B, C):\n  return (A-B)//C\n\ncandy(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B)//C\n\nprint(candy_piles(10, 2, 3))\n# Output: 2",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_of_piles(A, B, C):\n  remaining_candy = A - B\n  if remaining_candy < 0:\n    return 0\n  else:\n    num_of_piles = int(remaining_candy / C)\n    return num_of_piles\n\nprint(num_of_piles(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calc_num_piles(A, B, C):\n    return (A-B)//C\n\nAnswer = calc_num_piles(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(a, b, c):\n    return (a-b)//c\n\nprint(candy_piles(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candyPiles(A, B, C):\n  return (A-B) // C\n\ncandyPiles(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piles(A,B,C):\n  return (A-B)//C\n  \nprint(piles(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef piles(A, B, C): \n    return (A-B) // C \n\nprint(piles(A, B, C))",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef halloween_candy_piles(A, B, C):\n  return (A - B) // C\n\nprint(halloween_candy_piles(50, 10, 5))\n# Output: 8",
          "\n\nAnswer = A - B / C"
        ],
        [
          "\n\ndef pile_puzzle(A, B, C):\n  return (A - B) // C\n\npile_puzzle(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_piles(A,B,C):\n    piles = (A-B) // C\n    return piles",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B)//C \n  \n candy_piles(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Emily received 54 pieces of candy. She ate 33 pieces then placed the rest into piles with 7 in each pile. How many piles could she make? ",
      "final_answer": 3.0,
      "index": 582
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 59.92255878448486,
      "templates": [
        "Haley was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Haley have?\nWrite a Python function that returns the answer.",
        "Haley was planting vegetables in her garden. She started with A seeds and planted B of them in the big garden and in each of her small gardens put C seeds each. How many small gardens did Haley have?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef numSmallGardens(A, B, C):\n\n    return B // C",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_garden_calculator(A, B, C):\n  return B // C  # returns the number of small gardens\n\n  # example\n  small_garden_calculator(6, 40, 8) # returns 5",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef haleys_garden(a, b, c):\n  small_gardens = b // c\n  return small_gardens\n\nhaleys_garden(a = 16, b = 32, c = 4)\n\nOutput: 8",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          " \n\ndef calculateSmallGardens(A, B, C):\n  return B // C\n\nprint(calculateSmallGardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return B // C\n\nprint(numSmallGardens(A, B, C))",
          "\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n    return (b - c) // a \n\nAnswer: Haley had (b-c)//a small gardens.",
          "\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return B // C\n\nprint(numSmallGardens(A, B, C))",
          "\n\nA x B = C x X\n\nAnswer = (C x X) / B"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return (B - (C * A)) / C\n\nprint(number_of_small_gardens(10, 25, 5))\n\nAnswer: 5 small gardens",
          "\n\nA*B/C = Answer \nAnswer = 6.67 small gardens"
        ],
        [
          "\n\ndef numGardens(A, B, C):\n    return (B // C) - A\n    \nprint(numGardens(A, B, C))",
          "\nAnswer = (B - C) / C"
        ],
        [
          " \n\ndef numSmallGardens(A, B, C):\n  return B//C",
          "\n\nAnswer = (B - (C x A)) / C"
        ],
        [
          "\n\ndef small_gardens(a, b, c):\n    total_seeds = a * b\n    return total_seeds / c\n\nanswer = small_gardens(A, B, C)",
          "\nA x B = C x X\nAnswer = B/C = X"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n  return B//C\n\nprint(numSmallGardens(A, B, C))",
          "\n\nAnswer = (B-(C*B))/C"
        ],
        [
          "\n\ndef small_gardens(A, B, C):\n  return B // C\n\nAnswer = small_gardens(A, B, C)",
          "\nA x (B/C) = Answer\nAnswer = 3 small gardens"
        ],
        [
          "\n\ndef calculateGardens(A, B, C):\n  return B // C\n\nprint(calculateGardens(A, B, C))",
          "\n\nA * B / C = D\nAnswer = D"
        ],
        [
          "\n\ndef numgardens(A, B, C):\n  return B // C if B % C == 0 else B // C + 1",
          "\nA x B = D\nD \u00f7 C = Answer = ____  small gardens."
        ],
        [
          "\n\ndef numGardens(a, b, c):\n    return b // c\n\nprint(numGardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef small_gardens(A, B, C):\n    return B//C  # using floor division to give the answer as an integer",
          "\nAnswer = (B - (C \u00d7 B)) / C"
        ],
        [
          "\n\ndef num_of_small_gardens(A, B, C):\n  return int(B / C)\n  \nprint(num_of_small_gardens(A, B, C))",
          "\n\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef number_of_gardens(A, B, C): \n  return (B - (C * B)) / A\n  \nprint(number_of_gardens(A, B, C))",
          "\n\nAnswer = (B - C) / C"
        ],
        [
          "\n\ndef numSmallGardens(A, B, C):\n    small_gardens = (B - C) // A\n    return small_gardens\n    \nprint(numSmallGardens(A,B,C))",
          "\nAnswer = B / (A * C)"
        ],
        [
          "\n\ndef number_of_small_gardens(A, B, C):\n  return B / (A * C)\n\nnumber_of_small_gardens(A, B, C)",
          "\nAnswer = (B-C)/C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b - c) / c\n  \nprint(num_small_gardens(A, B, C))",
          "\nA * B / C = Answer\nAnswer = B / C"
        ],
        [
          " \n\ndef vegetable_garden(A, B, C):\n  small_garden = B / C\n  return small_garden\n  \nprint(vegetable_garden(A, B, C))",
          "\n\nA*(B-C) = Answer\n \nAnswer = 0"
        ],
        [
          " \n\ndef num_small_gardens(A, B, C):  \n    return B // C  \n\nprint(num_small_gardens(A, B, C))",
          "\nAnswer = (B - C)/C"
        ],
        [
          "\n\ndef num_small_gardens(a, b, c):\n  return (b - (c * a)) // c\n\nnum_small_gardens(A, B, C)",
          "\nA x B / C = Answer\nAnswer = B / C"
        ]
      ]
    },
    "source": {
      "question": " Haley was planting vegetables in her garden. She started with 56 seeds and planted 35 of them in the big garden and in each of her small gardens put 3 seeds each. How many small gardens did Haley have? ",
      "final_answer": 7.0,
      "index": 583
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 62.20980620384216,
      "templates": [
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a Python function that returns the answer.",
        "A store had A coloring books in stock. They ended up putting them on sale and getting rid of B of them. The put the ones they still had onto shelves with C on each shelf. How many shelves did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef shelves(A,B,C):\n  return (A-B)//C\n  \nshelves(A,B,C)",
          "\nA - B = C\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    total_shelves = (A-B)/C \n    return int(total_shelves) \n\ncalculate_shelves(A, B, C)",
          "\n\nAnswer = B / C"
        ],
        [
          "\n\ndef get_num_shelves(A, B, C):\n  return (A-B) // C\n\n# Example:\nget_num_shelves(15, 8, 6) # returns 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef coloring_books(A, B, C):\n    return (A - B) // C\n\nAnswer = coloring_books(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef numberOfShelves(A, B, C):\n  \n  shelves = (A - B) // C \n  return shelves \n  \nprint(numberOfShelves(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef get_shelves(A, B, C):\n  return round((A - B) / C) \n  \nprint(get_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return math.ceil((A - B) / C)",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef shelfAmount(A, B, C):\n  return (A - B) // C\n\nprint(shelfAmount(A, B, C))",
          "\n\nAnswer = (B/C)"
        ],
        [
          "\n\ndef num_shelves(a,b,c):\n  num_shelves = (a - b) // c\n  return num_shelves\n\nnum_shelves(A,B,C)",
          "\n\nA - B = C\n\nAnswer = C / A"
        ],
        [
          " \n\ndef shelvesUsed(A,B,C):\n  return (A-B)//C\n\nshelvesUsed(A,B,C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  shelves = (A-B)//C\n  remainder = (A-B) % C\n  if remainder > 0:\n    shelves += 1\n  return shelves\n\nprint(calculate_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves_calculator(a, b, c):\n    return (a-b)//c\n\nprint(shelves_calculator(A, B, C))",
          "\n\nA - B = C\nC / A = X\nAnswer = X"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A - B) // C\n\nprint(num_shelves(A, B, C))",
          "\n\nAnswer = B/C"
        ],
        [
          " \n\ndef calculate_shelves(A,B,C):\n  return (A-B)//C\n  \nprint(calculate_shelves(A,B,C))",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n  return (A-B)//C\n\nprint(num_shelves(A, B, C))",
          "\nAnswer = B / C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n   return (A-B)//C\n  \nnum_shelves(A, B, C)",
          "\n\nA - B = C\nC / A = Shelves\nAnswer = C / (A - B)"
        ],
        [
          "\n\ndef shelves_used(A,B,C):\n    return (A-B)//C\n\nAnswer: shelves_used(A,B,C)",
          "\n\nA - B = C\nC / A = Shelves\nAnswer = C / (A - B)"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C\n  \nshelves(A, B, C)",
          "\n\nAnswer = B/C"
        ],
        [
          "\n\ndef shelves_used(A, B, C):\n    return (A-B)//C + 1\n\nprint(shelves_used(A, B, C))",
          "\n\nA - B = C\nC / A = D\nAnswer = D\n"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C\n  \nprint(shelves(A, B, C))",
          "\n\nAnswer = (B/C)  Round up to the nearest whole number"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  return (A - B) // C \n\nprint(calculate_shelves(A, B, C))",
          "\nAnswer = (B / C)"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n    return (A-B)//C + 1\n\nprint(calculate_shelves(A, B, C))",
          "\nAnswer = (B/C) + A"
        ],
        [
          "\n\ndef shelves_used(A, B, C): \n  return (A - B) // C + 1\n  \nprint(shelves_used(A, B, C))",
          "\n\nAnswer = C/A * B"
        ],
        [
          "\n\ndef numShelves(A, B, C): \n  return math.ceil((A-B)/C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelf_count(a, b, c):\n  return (a - b)//c\n\n# Call the function\nshelf_count(A, B, C)",
          "\n\nAnswer = B / C"
        ]
      ]
    },
    "source": {
      "question": " A store had 48 coloring books in stock. They ended up putting them on sale and getting rid of 38 of them. The put the ones they still had onto shelves with 5 on each shelf. How many shelves did they use? ",
      "final_answer": 2.0,
      "index": 584
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 59.98546886444092,
      "templates": [
        "Roger is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Roger with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a Python function that returns the answer.",
        "Roger is at the library helping put away books. There are A book to put away total but a librarian takes B of them and leaves Roger with the rest. If he can fit C books on a shelf, how many shelves will he need?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef library_shelves(A, B, C):\n  shelves = (A - B) // C\n  remainder = (A - B) % C\n  if remainder > 0:\n      shelves += 1\n  return shelves",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_shelves(A, B, C):\n  total_books = A - B\n  total_shelves = total_books // C\n  if total_books % C != 0:\n    total_shelves += 1\n  return total_shelves\n\nanswer = calculate_shelves(A, B, C)\nprint(answer)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n    return (A-B)//C + 1\n\n# Call function - number of books, number taken by librarian, books per shelf\nnumShelves = shelvesNeeded(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n  return ((A - B) // C) + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef put_away_books(a, b, c):\n  shelf_num = (a - b) // c\n  return shelf_num",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_shelves(A, B, C):\n    return (A-B) // C + 1",
          " \n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelf_calculator(A, B, C):\n  rest = A - B\n  return rest // C + (1 if rest % C else 0)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C):\n  return (A - B) // C + 1",
          "\nA - B\nC\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_shelves(a, b, c):\n  return (a-b) // c\n\nnum_of_shelves(A, B, C)",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelves(A, B, C): # A, B, and C represent number of books, librarian taking away, and books that fit on a shelf\n    return (A - B) // C + 1 # divides the number of books left after the librarian takes away by the number that fit on a shelf, and adds 1 for any remainder",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef neededShelves(a,b,c):\n  return (a-b) // c + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelvesNeeded(A, B, C):\n  return (A-B) // C + 1\n\nshelvesNeeded(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n    return (A-B)//C + (1 if (A-B)%C > 0 else 0)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numShelves(a, b, c):\n  shelvesNeeded = (a - b)//c\n  if (a - b) % c != 0:\n    shelvesNeeded += 1\n  return shelvesNeeded\n  \nprint(numShelves(80, 20, 5)) // prints 16",
          "\n\nAnswer = A/(C-B)"
        ],
        [
          "\n\ndef shelf_calc(a, b, c):\n  return (a - b) // c + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_shelves(a,b,c):\n    remaining_books = a - b\n    return remaining_books // c + (remaining_books % c > 0)\n\nanswer = calculate_shelves(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef bookshelves(a, b, c):\n    return (a-b)//c + 1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef shelvesNeeded(A,B,C):\n    return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef bookShelves(A, B, C):\n  return ((A - B) // C) + 1",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef shelves_needed(a,b,c):\n  return (a-b)//c + ((a-b) % c > 0)\n\nprint(shelves_needed(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numShelves(A, B, C):\n  return (A-B)//C + 1",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef shelveBooks(A, B, C):\n  numShelves = (A - B) // C\n  return numShelves + 1\n\nprint(shelveBooks(100, 10, 10))\n# Output: 10",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef shelves_needed(A, B, C):\n  return (A - B) // C + 1",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef num_of_shelves(A, B, C):\n    return (A-B)//C + 1",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Roger is at the library helping put away books. There are 14 book to put away total but a librarian takes 2 of them and leaves Roger with the rest. If he can fit 3 books on a shelf, how many shelves will he need? ",
      "final_answer": 4.0,
      "index": 585
    }
  },
  {
    "result": 8.0,
    "meta": {
      "n_calls": 42,
      "duration": 55.98376202583313,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        8.0
      ],
      "completions": [
        [
          "\n\ndef cages(A, B, C):\n     return int((A-B)/C)",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_cages(A, B, C):\n    return (A - B) // C\n\nprint(num_of_cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(a, b, c):\n     return (a-b) // c\n\nprint(cages(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_cages(a, b, c):\n  return (a - b) // c\n  \ncalculate_cages(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef answer_question(a, b, c):\n  answer = (a - b) / c\n  return answer",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef puppy_cages(A,B,C):\n  return (A-B)//C\n\npuppy_cages(A,B,C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\nA = 20, B = 10, C = 2 \n\ndef pet_cages(A, B, C): \n  return (A-B)//C \n\nprint(pet_cages(20, 10, 2))\n\nThis should return 5.",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef answer(A, B, C): \n  return (A-B)//C\n  \nanswer(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_cages(a, b, c):\n  return (a - b) // c\n  \nprint(num_cages(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef getNumCages(A, B, C): \n  return (A - B) // C;",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n  return (A-B) // C  # calculates the number of cages used",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages(A, B, C):\n    return (A-B) // C\n\nprint(cages(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          " \n\nLet A = 7, B = 6, and C = 5\n\ndef calcCages(A, B, C):\n  return (A - B) // C\n\nprint(calcCages(7, 6, 5))\n\n# Output: 1",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_cages(A,B,C):\n  return (A - B) // C\n  \nnum_of_cages(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C   # '//' is the floor division operator in Python",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n  cages_used = (A - B) // C\n  return cages_used\n\nprint(calculate_cages(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cagesUsed(A, B, C):\n  return (A-B)//C + ((A-B)%C > 0)\n  \ncagesUsed(A, B, C)",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef cages(a, b, c): \n  return (a - b) // c",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n  return (A-B)//C\n  \nprint(num_cages(20, 5, 4))\n#This would return 4 cages.",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 56 puppies. In one day they sold 24 of them and put the rest into cages with 4 in each cage. How many cages did they use? ",
      "final_answer": 8.0,
      "index": 586
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 57.09051775932312,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef num_pies(A, B, C):\n  num_pies = (A - B) // C \n  return num_pies\n \nprint(num_pies(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pie_calc(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pie_calc(a, b, c): \n  remaining_apples = a - b\n  pies_made = remaining_apples // c\n  return pies_made\n\npie_calc(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_pies(A, B, C):\n    total_apples = A - B\n    num_pies = total_apples // C\n    return num_pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A,B,C): \n    pies = (A-B)//C \n    return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_pies(A,B,C):\n  return (A-B) // C\n  \nnumber_of_pies(10,4,2) #returns 3",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piesFromApples(a, b, c):\n    return (a - b) // c\n    \npiesFromApples(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef make_pies(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef apple pies(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(a, b, c): \n  total_pies = (a-b)//c \n  return total_pies\n\npies(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_pies(a, b, c):\n  pies = (a-b) // c\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculatePies(apples, handedOut, applesInPie):\n  return (apples - handedOut) / applesInPie\n\nanswer = calculatePies(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a,b,c):\n    return (a-b)//c\n    \npies(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculatePies(A, B, C):\n  pies = (A - B) // C\n  return pies",
          "\nAnswer = (A - B) /C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies_from_apples(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a,b,c):\n  return (a-b)//c\n\nAnswer: pies(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef makePies(A, B, C):\n    pies = (A - B) // C\n    return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies_from_apples(A, B, C):\n    pies = (A - B) // C\n    return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef num_of_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n    pies_total = (A - B)//C\n    return pies_total",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(A, B, C):\n    num_pies = (A-B) // C\n    return num_pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 86 apples. For lunch they handed out 30 to students and decided to use the rest to make pies. If each pie takes 8 apples, how many pies could they make? ",
      "final_answer": 7.0,
      "index": 587
    }
  },
  {
    "result": 4.0,
    "meta": {
      "n_calls": 30,
      "duration": 30.909942865371704,
      "templates": [
        "Jerry had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a Python function that returns the answer.",
        "Jerry had A pieces of clothing to wash. He put B of them in one load, but decided to split the rest into C equal loads. How many pieces of clothing could go in each of the small loads?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        4.0,
        4.0,
        4.0
      ],
      "completions": [
        [
          "\n\ndef answer(A, B, C): \n    return (A - B) / C\n\nanswer(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          " \n\ndef wash_clothing(A, B, C):\n    return (A - B) / C\n\n# Example \nprint(wash_clothing(15, 3, 2))\n# Output: 6",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_clothes(A, B, C):\n  return (A - B) / C\n\nprint(number_of_clothes(A, B, C))",
          "\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef small_loads(A, B):\n  C = (A - B) / B\n  return C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_loads(A, B):\n    C = (A - B) / C\n    return C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numOfClothes(a,b,c): \n    return (a - b) // c",
          "\nA / (B + C) = Answer\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef how_many_clothing_loads(A,B):\n  C = (A-B)//2\n  return C",
          "\n\nA - B = C\n\nAnswer = (A - B) \u00f7 C"
        ],
        [
          "\n\ndef small_loads(A, B):\n  C = (A - B) // B\n  return C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef splitLoads(A, B, C):\n  return int((A - B) / C)",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef calculateSmallLoads(A, B):\n  C = (A-B)/B\n  return C\n\nprint(calculateSmallLoads(A, B))",
          " \nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef clothing_loads(a,b,c):\n  return (a-b) / c\n\nprint(clothing_loads(A,B,C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef equal_loads(A, B):\n return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numOfClothes(A, B, C):\n  return (A-B) // C\n  \nnumOfClothes(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate_small_loads (A, B):\n  C = (A-B) / C\n  return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPieces(a, b, c):\n\treturn (a-b)//c\n\n#Example:\nprint(numPieces(17, 4, 3))\n#returns 5",
          "\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Jerry had 60 pieces of clothing to wash. He put 40 of them in one load, but decided to split the rest into 5 equal loads. How many pieces of clothing could go in each of the small loads? ",
      "final_answer": 4.0,
      "index": 588
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 32,
      "duration": 32.684669971466064,
      "templates": [
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Mike made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef gameCalculator(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef calculateGames(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_bought(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B): \n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef buyGames(A, B):\n  C = (A - B)/C\n  return C",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef games(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef left_over_dollars(A, B):\n  remaining_dollars = A - B\n  C = remaining_dollars // 20\n  return C\n\nprint(left_over_dollars(500, 30))\n#This will print 25 games",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef getNumGames(A,B):\n  C = (A - B) // 1\n  return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games_purchasable(A, B): \n    C = (A - B) / 5\n    return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef money_left(A, B):\n  C = (A - B) / 12\n  return C\n\nmoney_left(A, B)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef money_left(A, B):\n    return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  # Subtract B from A to get the amount of money Mike had left\n  money_left = A - B\n\n  # Divide the money_left by the cost of a game\n  games = money_left / C\n\n  # Return the number of games Mike can buy\n  return games",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef games(A, B):\n    return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef spending_cash(A, B):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef mower(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B)/C"
        ]
      ]
    },
    "source": {
      "question": " Mike made 69 dollars mowing lawns over the summer. If he spent 24 dollars buying new mower blades, how many 5 dollar games could he buy with the money he had left? ",
      "final_answer": 9.0,
      "index": 589
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 26,
      "duration": 25.3176748752594,
      "templates": [
        "Will made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Will made A dollars mowing lawns over the summer. If he spent B dollars buying new mower blades, how many C dollar games could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0,
        7.0,
        7.0,
        7.0
      ],
      "completions": [
        [
          "\n\ndef gaming_spree (A, B):\n  return (A-B)/C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B): \n    return (A - B) / C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef gamesMoney(A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef buyGames (A, B):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef calculate_games(A, B):\n  C = (A - B) // 20\n  return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Money_for_Games(A, B):\n    C = A - B\n    return C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B):\n    C = (A - B) // 1\n    return C\n\nbuy_games(A, B)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef game_purchase(A, B):\n    leftover_money = A - B\n    C = leftover_money / 15\n    return C\n\n# For example, if A = 50 and B = 10:\nprint(game_purchase(50, 10))\n# Output: 3.3333",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef money_left(A,B):\n  left = A - B\n  games = left // C\n  return games\n  \nmoney_left(A,B)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_games(A, B):\n  return (A-B)/C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef game_calculator(A, B):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculateGames(A, B):\n    C = (A - B) / C \n    return C \nprint(calculateGames(A, B))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buyGames(A, B): \n    C = (A - B) // 10\n    return C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Will made 104 dollars mowing lawns over the summer. If he spent 41 dollars buying new mower blades, how many 9 dollar games could he buy with the money he had left? ",
      "final_answer": 7.0,
      "index": 590
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 57.124348163604736,
      "templates": [
        "For Halloween Bianca received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a Python function that returns the answer.",
        "For Halloween Bianca received A pieces of candy. She ate B pieces then placed the rest into piles with C in each pile. How many piles could she make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef candy_piles(A, B, C): \n    return (A - B) // C\n\ncandy_piles(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\nA = Num of candy\nB = Num of candy eaten\nC = Num of candy in each pile\n\ndef pileMaker(A, B, C):\n    result =  (A - B) // C\n    return result\n\npileMaker(A, B, C)",
          "\n\nA - B / C = Answer\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef halloween_candy(A, B, C):\n    return (A - B) // C\n\nprint(halloween_candy(10, 3, 2))  # Returns 3",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B) // C\n  \n# Calling the function\ncandy_piles(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\n\ndef piles(A, B, C):\n    return (A - B) // C\n\npiles(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef makePiles(A, B, C):\n    return (A-B)//C\n\nprint(makePiles(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    remaining_candy = A - B\n    piles = remaining_candy // C\n    return piles",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef halloween_piles(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numPiles(a, b, c): \n  return (a - b) // c\n  \nprint(numPiles(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef piles(A, B, C):\n  return (A - B) // C\n  \npiles(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_piles(A,B,C):\n  return (A-B)//C\n\nnum_of_piles(A,B,C)",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef makePiles(A, B, C): \n  return (A - B) // C\n  \nmakePiles(40, 3, 5) # returns 7",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_piles(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A - B) // C\n  \nprint(candy_piles(10, 5, 2))                 # Output: 2",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Halloween_candy(A, B, C):\n    return (A-B)//C\n    \nprint(Halloween_candy(25, 5, 5)) # Output: 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calc_piles(A, B, C):\n  piles = (A - B) // C\n  return piles",
          "\n\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef get_num_piles(A,B,C): \n  return (A-B)//C\n\nget_num_piles(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPiles(A, B, C):\n  return (A - B) // C\n  \n# example inputs\nnumPiles(10, 5, 2) # answer would be 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef num_of_piles(A, B, C):\n return (A-B)//C \n\nprint(num_of_piles(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piles_of_candy(a,b,c):\n  return (a-b)//c\n  \npiles_of_candy(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef halloween(A, B, C):\n  return (A-B) // C\n\n# For example, if A = 10, B = 3 and C = 2, the result would be 3.",
          "\nAnswer = (A-B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n  return (A-B) // C\n  \n#example\ncandy_piles(15, 8, 3)\n#returns 2",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef candy_piles(A, B, C):\n    piles = (A - B) // C\n    return piles",
          "\n\nA - B = C(x)\n\nAnswer = x = (A - B) / C"
        ],
        [
          "\n\ndef candyPiles(A, B, C):\n    return (A - B) // C\n\nprint(candyPiles(A, B, C))",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " For Halloween Bianca received 32 pieces of candy. She ate 12 pieces then placed the rest into piles with 5 in each pile. How many piles could she make? ",
      "final_answer": 4.0,
      "index": 591
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 48,
      "duration": 63.66611409187317,
      "templates": [
        "Luke was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a Python function that returns the answer.",
        "Luke was selling his old games. He started out with A but sold B of them. He packed the rest up putting C games into each box. How many boxes did he have to use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef boxes_needed(A, B, C):\n  return (A - B) // C + (1 if (A - B) % C > 0 else 0)",
          "\n\nAnswer = (B - (B % C)) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_boxes(A, B, C):\n  return max(1, (A - B) // C)",
          "\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef games_box(A, B, C): \n    return (A - B) // C \n\nAnswer: (A - B) // C",
          "\n\nAnswer = (B \u00f7 C) + ((B mod C) > 0 ? 1 : 0)"
        ],
        [
          "\n\ndef num_boxes(A,B,C):\n  return (A-B)//C \n\nnum_boxes(A,B,C)",
          "\nAnswer = (B/C) + (A % C)"
        ],
        [
          "\n\ndef games_boxes(a, b, c):\n  return (a - b) // c\n  \n# calling the function\ngames_boxes(25, 10, 5)  # answer: 3 boxes",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef boxes_needed(a, b, c):\n  boxes = (a - b) // c\n  if (a - b) % c > 0:\n    boxes += 1\n  return boxes",
          "\nAnswer = (B-A) \u00f7 C"
        ],
        [
          "\n\ndef numberOfBoxes(A, B, C): \n  return (A-B) // C\n  \nnumberOfBoxes(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A-B)//C + (A-B)%C > 0",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef calculateNumberOfBoxes(games, sold, perBox):\n  leftoverGames = games - sold\n  numberOfBoxes = leftoverGames // perBox\n  if leftoverGames % perBox != 0:\n    numberOfBoxes += 1\n  return numberOfBoxes\n \nprint(calculateNumberOfBoxes(A, B, C))",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef game_boxes(A, B, C):\n  return (A-B) // C\n  \n game_boxes(20, 10, 4)\n #returns 2",
          "\n\nAnswer = (B - A)/C"
        ],
        [
          "\n\ndef number_boxes(A, B, C):\n  return (A - B) // C\n\n# Test\nprint(number_boxes(20, 10, 4)) # Returns 2",
          "\n\nAnswer = (B-A) / C"
        ],
        [
          "\n\ndef numberOfBoxes(A, B, C):\n  return (A-B)//C\n\nprint(numberOfBoxes(50,25,10)) # answer: 2",
          "\nAnswer = (B-A)\u00f7C"
        ],
        [
          "\n\ndef calculate_boxes(A, B, C):\n  return (A - B) // C\n\nprint(calculate_boxes(A, B, C))",
          "\n\nAnswer = (B \u00f7 C) + (B % C)"
        ],
        [
          "\n\ndef boxes_used(A, B, C): \n  return int((A-B)/C) + 1",
          "\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef boxes(A, B, C):\n  return (A - B) // C \n\nprint(boxes(10, 6, 2))\n#This would return 2 boxes.",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n  return (A-B)//C + 1\n  \nresult = num_boxes(A, B, C)",
          "\n\nAnswer = (B-(B%C))/C"
        ],
        [
          "\n\ndef calculate_boxes(A, B, C):\n  return (A - B) // C\n  \n#Example\ncalculate_boxes(20, 8, 6) # returns 2",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef calculateBoxes(a, b, c):\n  return (a-b) // c\n \nprint(calculateBoxes(a, b, c))",
          "\n\nAnswer = (B-A)/C"
        ],
        [
          "\n\ndef calc_boxes(A, B, C):\n  return (A - B) // C\n  \n#Example\ncalc_boxes(20, 15, 5) #returns 1",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_boxes(A, B, C):\n    boxes = (A - B) // C\n    if (A - B) % C > 0:\n        boxes += 1\n    return boxes",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef numBoxes(A, B, C):\n  return (A - B) // C + 1\n  \nnumBoxes(10, 6, 4) \n#returns 2",
          "\n\nAnswer = (B - (B mod C)) / C"
        ],
        [
          "\n\ndef boxes_needed(A,B,C):\n  return (A-B)//C + (1 if (A-B)%C !=0 else 0)",
          "\n\nAnswer = (B - A) / C"
        ],
        [
          "\n\ndef num_of_boxes(A, B, C):\n  return (A-B) // C\n  \nnum_of_boxes(30, 10, 5)\n#Returns 4",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef calculate_boxes(a, b, c):\n  return (a - b) // c\n  \ncalculate_boxes(a, b, c)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Luke was selling his old games. He started out with 57 but sold 39 of them. He packed the rest up putting 2 games into each box. How many boxes did he have to use? ",
      "final_answer": 9.0,
      "index": 592
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 42,
      "duration": 46.3555588722229,
      "templates": [
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a Python function that returns the answer.",
        "A pet store had A puppies. In one day they sold B of them and put the rest into cages with C in each cage. How many cages did they use?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0
      ],
      "completions": [
        [
          "\n\ndef getNumCages(A,B,C):\n  return (A - B) / C\n  \nprint(getNumCages(A,B,C))",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef cages_needed(A, B, C): \n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store_cages(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cagesUsed(A, B, C):\n  return (A - B) // C\n  \nprint (cagesUsed(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateCages(A, B, C): \n  cages = (A - B) // C\n  return cages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef answer(A,B,C): \n  return (A - B) // C\n\nprint(answer(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C): \n  return (A - B) // C if (A - B) % C == 0 else (A - B) // C + 1",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cages(A, B, C):\n  return (A - B) // C \n\ncages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_cages(A, B, C):\n    return (A - B) // C\n\nprint(num_cages(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculateCages(A, B, C):\n    return (A-B) // C\n\ncalculateCages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages (A,B,C):\n  cages = (A-B) // C\n  return cages",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calc_cages(puppies, sold, per_cage):\n  return (puppies - sold) // per_cage",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numCages(A, B, C):\n  return (A-B) // C + (1 if (A-B) % C != 0 else 0)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_cages(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B) /C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n  \nprint(cages_used(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pet_store_cages(A, B, C):\n  return (A-B)//C + (A-B)%C\n\n# Example\npet_store_cages(10, 5, 2) \n# Returns 3",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef cages_used(A, B, C):\n  return (A - B) // C\n  \nprint(cages_used(20, 4, 3)) # Returns 3",
          "\n\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef calculate_cages(A, B, C):\n  return (A - B) // C\n  \n #Example call\nprint (calculate_cages(10, 4, 3))\n#This will return 2, since 2 cages were used.",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef find_cages(A, B, C):\n    cages = (A - B) // C \n    return cages\n\nfind_cages(10, 2, 3) # 3 cages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef puppyCages(A, B, C):\n  return (A - B) // C\n\npuppyCages(A, B, C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pet_store(A, B, C):\n   return (A-B) // C\n \nprint(pet_store(20, 10, 5)) # answer: 2",
          "\n\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " A pet store had 88 puppies. In one day they sold 34 of them and put the rest into cages with 6 in each cage. How many cages did they use? ",
      "final_answer": 9.0,
      "index": 593
    }
  },
  {
    "result": 9.0,
    "meta": {
      "n_calls": 36,
      "duration": 45.43342185020447,
      "templates": [
        "Katie had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Katie end up with?\nWrite a Python function that returns the answer.",
        "Katie had A files on her computer. She deleted B of them and put the rest into folders with C files in each one. How many folders did Katie end up with?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        9.0,
        9.0,
        9.0
      ],
      "completions": [
        [
          "\n\ndef folders():\n  A = int(input(\"How many files did Katie have? \"))\n  B = int(input(\"How many files did Katie delete? \"))\n  C = int(input(\"How many files in each folder? \"))\n  \n  return (A - B) / C\n\nprint(folders())",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folderCount(A, B, C):\n  return (A - B) / C\n\nfolderCount(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A-B)/C\n  \nprint(num_of_folders(A, B, C))",
          "\n\nAnswer = (A-B)/C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef number_of_folders(files, deleted, files_per_folder):\n  return (files - deleted) // files_per_folder\n\n#example\nanswer = number_of_folders(50, 10, 5)\nprint(answer) # Prints 8",
          "\n\nA-B/C = Answer \nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef numFolders(A, B, C):\n  return (A-B)//C\n  \nprint(numFolders(A, B, C))",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef how_many_folders(a, b, c): \n  folders = (a - b) // c \n  return folders\n\nprint(how_many_folders(a,b,c))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  return (A-B)//C\n\nAnswer: num_of_folders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_folders(A, B, C):\n  num_folders = (A - B) / C\n  return num_folders\n\nprint(num_of_folders(A, B, C))",
          "\nAnswer = (B + C - 1) / C"
        ],
        [
          "\n\ndef numFolders(A, B, C):\n  folders = (A - B)//C\n  return folders\n  \nAnswer: numFolders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numFolders(A, B, C):\n  return (A - B) // C\n  \nnumFolders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A - B) // C\n  \nprint(num_folders(A, B, C))",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef folders(A, B, C):\n  return (A-B)//C\n\nAnswer: folders(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef foldersCount(a, b, c):\n  return (a - b) // c\n\nprint(foldersCount(A, B, C))",
          "\nAnswer = (B/C) + 1"
        ],
        [
          "\n\ndef howManyFolders(files, deleted, filesInFolder): \n  return (files - deleted) // filesInFolder\n  \nAnswer\nhowManyFolders(A, B, C)",
          "\nAnswer = (B+C) / C"
        ],
        [
          "\n\ndef num_folders(A, B, C):\n  return (A - B) // C\n\nAnswer: num_folders(A, B, C)",
          "\nAnswer = A/C"
        ],
        [
          "\n\ndef num_of_folders(files, deleted, files_per_folder):\n  folders = (files - deleted) // files_per_folder\n  return folders\n  \nanswer = num_of_folders(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef folder_count(files, deleted, files_per_folder):\n  return (files - deleted) // files_per_folder\n\nprint(folder_count(A, B, C))",
          "\n\nAnswer = (A-B) / C"
        ]
      ]
    },
    "source": {
      "question": " Katie had 85 files on her computer. She deleted 40 of them and put the rest into folders with 5 files in each one. How many folders did Katie end up with? ",
      "final_answer": 9.0,
      "index": 594
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 44,
      "duration": 42.21696400642395,
      "templates": [
        "Roger had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a Python function that returns the answer.",
        "Roger had A dollars. If he spent B bucks on a new game, how many C dollar toys could he buy with the money he had left?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0
      ],
      "completions": [
        [
          "\n\ndef toys(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef purchase(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_remaining_funds(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef amount_remaining(A,B,C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef Roger_game(A, B, C):\n  return ((A - B) // C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef toy_calc(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buy_toys(A, B, C):\n  return (A - B)//C\n\nprint(buy_toys(A, B, C))",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef calculateRemainingfunds(A, B, C):\n  return (A - B) / C",
          "\n\nAnswer = (A \u2212 B) / C"
        ],
        [
          "\n\ndef calcToys(A, B, C):\n\n  return (A - B)//C",
          "\nAnswer = A - B / C"
        ],
        [
          "\n\ndef bought_toys(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A - B) // C\n  \ncalculate_toys(A, B, C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toysBought(A, B, C): \n  return (A - B) // C \n\nprint(toysBought(A, B, C))",
          "\nAnswer = (A - B)/C"
        ],
        [
          "\n\ndef calculate_toys(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef toys(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef find_toys(A, B, C):\n  return round((A - B) / C)",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef buyToys(a, b,c):\n    return (a-b)//c\n\nbuyToys(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_toys(A, B, C):\n  return (A - B) // C\n\nprint(num_toys(100, 24, 5)) # Prints 16",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef toys(A, B, C):\n    remaining = A - B\n    num_toys = remaining // C\n    return num_toys",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calc_toys(A, B, C):\n  return (A - B) // C  \n\ntoys = calc_toys(A, B, C)\nprint(toys)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculate(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Roger had 68 dollars. If he spent 47 bucks on a new game, how many 7 dollar toys could he buy with the money he had left? ",
      "final_answer": 3.0,
      "index": 595
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 38,
      "duration": 33.42383098602295,
      "templates": [
        "Tom bought A tickets at the state fair. He spent B tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost C tickets, how many rides could he go on?\nWrite a Python function that returns the answer.",
        "Tom bought A tickets at the state fair. He spent B tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost C tickets, how many rides could he go on?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef num_rides(A,B,C):\n  return (A-B)/C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_rides(A, B, C):\n    return (A - B) / C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef rides(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numRides(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  total_tickets = A - B\n  num_rides = total_tickets // C\n  return num_rides",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_rides(A,B,C):\n    return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A - B) // C",
          " \nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides (A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef rides(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_rides(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef fair_rides(A, B, C):\n  return (A-B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef rides(A, B, C):\n    return (A-B)//C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef rides(A, B, C):\n  return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numRides(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef fair_rides(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " Tom bought 40 tickets at the state fair. He spent 28 tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost 4 tickets, how many rides could he go on? ",
      "final_answer": 3.0,
      "index": 596
    }
  },
  {
    "result": 7.0,
    "meta": {
      "n_calls": 44,
      "duration": 43.33583903312683,
      "templates": [
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a Python function that returns the answer.",
        "The cafeteria had A apples. For lunch they handed out B to students and decided to use the rest to make pies. If each pie takes C apples, how many pies could they make?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        7.0
      ],
      "completions": [
        [
          "\n\ndef num_pies(A, B, C):\n  return (A - B) / C",
          "\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef pies(A,B,C):\n  return (A-B)//C",
          "\nAnswer = (A - B) / C"
        ],
        [
          " \n\ndef pies(A,B,C):\n    return (A - B) // C\n\npies(A,B,C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(A, B, C):\n  return (A - B) // C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n   pies = (A-B) // C\n   return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A,B,C):\n  return ((A-B) // C)\n\nprint(pies(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pie_maker(A, B, C):\n  pies = (A - B) // C\n  return pies",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_pies(A, B, C):\n    pies = (A - B) // C\n    return pies",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef number_of_pies(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(A, B, C):\n  remaining = A - B\n  return remaining // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef apple_pies(A, B, C):\n    pies = (A - B) // C\n    return pies",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies_made(A, B, C):\n  num_pies = (A - B) // C\n  return num_pies",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef piesMade(A, B, C):\n  return (A - B) // C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef pies_made(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef numPies(A, B, C): \n  return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef number_of_pies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef pies(a,b,c):\n  return (a-b) // c",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef apple_pies(A, B, C):\n  return (A - B) // C\n  \n# suppose A = 28, B = 10, C = 8\n\napple_pies(28, 10, 8)  # returns 3",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef calculatePies(A, B, C):\n    return (A - B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_pies(A,B,C):\n    return (A - B) // C\n\n# For example:\nnum_pies(15, 6, 4) # Output: 2",
          "\nAnswer = (A - B) / C"
        ]
      ]
    },
    "source": {
      "question": " The cafeteria had 75 apples. For lunch they handed out 19 to students and decided to use the rest to make pies. If each pie takes 8 apples, how many pies could they make? ",
      "final_answer": 7.0,
      "index": 597
    }
  },
  {
    "result": 3.0,
    "meta": {
      "n_calls": 38,
      "duration": 39.06054902076721,
      "templates": [
        "Sarah baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a Python function that returns the answer.",
        "Sarah baked A cupcakes for her school's bake sale. If her brother, Todd, ate B of them how many packages could she make if she put C cupcake in each package?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [
        3.0,
        3.0
      ],
      "completions": [
        [
          "\n\ndef numPackages(A, B, C):\n  return (A - B) / C\n  \nnumPackages(A, B, C)",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef cupcakes(A,B,C):\n  return (A - B) / C\n\nprint(cupcakes(A,B,C))",
          "\n\nAnswer = (A - B) / C"
        ]
      ],
      "discarded_completions": [
        [
          "\n\ndef num_of_packages(a, b, c):\n  return (a - b) // c",
          "\n\nAnswer = (A - B)/ C"
        ],
        [
          "\n\ndef cupcakes(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages(A,B,C):\n  packages = (A - B) / C\n  return packages",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_packages(a,b,c):\n  return (a-b)//c\n\nanswer = num_of_packages(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packages_of_cupcakes(A, B, C):\n    return (A - B) // C",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n  return (A-B) // C",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef num_of_packages(a, b, c):\n  return (a-b)//c\n\n# example:\nnum_of_packages(12, 3, 4)\n# returns 2",
          "\nAnswer = A/C (B + 1)"
        ],
        [
          "\n\ndef bakeSale(A, B, C): \n    return (A - B) // C\n  \n# Example: \nbakeSale(30, 5, 12) # Returns 2",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages(a, b, c):\n  return (a - b)//c\n  \n# Answer: packages(A,B,C)",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef packagesCupcakes(A, B, C):\n    return (A-B)//C",
          "\n\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_packages(A, B, C):\n  return (A - B) // C\n\nprint(calculate_packages(A, B, C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef make_packages(A, B, C):\n  return (A - B)//C\nmake_packages(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages(A, B, C):\n  return (A-B)//C",
          "\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef bake_sale(A, B, C):\n    return (A-B)//C\n\nbake_sale(A, B, C)",
          "\nAnswer = A / (B/C)"
        ],
        [
          "\n\ndef packages(A, B, C): \n    return ((A-B)//C) +1",
          "\n\nAnswer = (A-B)/C"
        ],
        [
          "\n\ndef packages(a,b,c):\n    return (a-b)//c\n\nprint(packages(A,B,C))",
          "\nAnswer = (A - B) / C"
        ],
        [
          "\n\ndef calculate_packages(a, b, c):\n    return (a - b) // c\n\n# Usage\nanswer = calculate_packages(A, B, C)",
          "\n\nAnswer = (A-B)/C"
        ]
      ]
    },
    "source": {
      "question": " Sarah baked 38 cupcakes for her school's bake sale. If her brother, Todd, ate 14 of them how many packages could she make if she put 8 cupcake in each package? ",
      "final_answer": 3.0,
      "index": 598
    }
  },
  {
    "result": null,
    "meta": {
      "n_calls": 50,
      "duration": 68.75867986679077,
      "templates": [
        "Nancy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a Python function that returns the answer.",
        "Nancy uploaded A pictures to Facebook. She put B pics into one album and put the rest into C different albums. How many pictures were in each album?\nWrite a mathematical equation and generate the answer format starting with'Answer ='"
      ],
      "answers": [],
      "completions": [],
      "discarded_completions": [
        [
          "\n\ndef album_pics(a, b, c):\n  return a//(b+c), b, a-(b+c*(a//(b+c)))\n\nalbum_pics(A, B, C)",
          "\nAnswer = (A - B) / C + B"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  album1 = B\n  album2 = A - B\n  album3 = album2 // C\n  album4 = album2 % C\n  return [album1, album3, album4]",
          "\nAnswer = A/B + A/C"
        ],
        [
          "\n\ndef album_separator(A, B, C):\n    album1 = B\n    album2 = (A - B) // C\n    album3 = A - B - album2\n    return album1, album2, album3",
          "\nAnswer = A-(B+C) pictures in each album."
        ],
        [
          "\n\ndef num_pics(A, B, C): \n  return A, B // C, (A - (B // C)) \n  \nprint(num_pics(A, B, C))",
          "\nAnswer = [A-(B+C)]/C"
        ],
        [
          "\n\ndef album_picture_divider(A,B,C):\n  return (A // (B+C))",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef picturesAlbum(A, B, C): \n    return [B//A, (A-B)//C] \n  \n# A is the total number of pictures, \n# B is the number of pictures in one album, \n# and C is the number of different albums. \n  \nprint(picturesAlbum(19, 4, 5))",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef photoAlbum(A, B, C):\n  return (B // C + B % C, B // C, A - B)\n\nprint(photoAlbum(A, B, C))",
          "\nAnswer = A = B + C"
        ],
        [
          "\n\ndef num_pics(A, B, C):\n  return (A//B, A//C)\n  \nprint(num_pics(25, 5, 3))\n# (5, 8)",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef num_pictures(A, B, C): \n\n  return A//(B+C), B, A%(B+C)",
          "\nAnswer = A - B = C"
        ],
        [
          "\n\ndef numOfPics(A, B, C):\n  return A//(B + C), A//B, A//C\n\nprint(numOfPics(A, B, C))",
          "\n\nAnswer = (A-B)/C + B"
        ],
        [
          "\n\ndef album_quantity(A,B,C):\n  album1 = B\n  album2 = (A - B) // C\n  album3 = (A - B) % C\n  return album1, album2, album3\n\nprint(album_quantity(A,B,C))",
          "\n\nA = x\nB = y\nC = z\n\nAnswer = x=y+z"
        ],
        [
          "\n\ndef pictureAlbum(A,B,C):\n  album1 = B\n  album2 = A - B\n  album3 = C - album2\n  return [album1, album2, album3]",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef photo_albums(A, B, C):\n  total_albums = B + C\n  pics_per_album = A // total_albums\n  return \"Each album contains\", str(pics_per_album), \"pictures.\"\n  \nprint(photo_albums(A, B, C))",
          "\nAnswer = A/B + (A-(A/B))/C"
        ],
        [
          "\n\ndef album_pic_count(A,B,C):\n  album_A_count = B\n  album_C_count = (A - B) // C\n  # The number of pictures in each album C will be rounded down\n  return album_A_count, album_C_count\n\nprint(album_pic_count(A,B,C))",
          "\n\nAnswer = A/B = C"
        ],
        [
          "\n\ndef album_split(a, b, c):\n  return (int(a/b)) + c, (a % b) \n\nalbum_split(A, B, C)",
          "\n\nAnswer = A / (B + C)"
        ],
        [
          "\n\ndef album_pictures(A, B, C):\n  return f\"{B} pictures in one album, and {A-B} pictures in the {C} different albums\"\n\nprint(album_pictures(A, B, C))",
          "\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef album_pic_count(total_pic, album_num):\n  return total_pic // album_num\n\nprint(album_pic_count(A, B))\nprint(album_pic_count(A, C))",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\n\ndef pic_albums(A, B, C):\n  album_1 = B\n  album_2 = A - B\n  per_album = album_2 / C\n  return [album_1, per_album]\n\nprint(pic_albums(20, 5, 3)) # [5, 5]",
          "\nAnswer = Album A: A pictures, Album B: B pictures, Album C: (A - B) pictures"
        ],
        [
          "\n\n\ndef album_pictures(a, b, c):\n  return a // (b + c), b, a % (b + c)\n  \nprint(album_pictures(A, B, C))",
          "\n\nAnswer = A/(B+C)"
        ],
        [
          "\n\ndef album_sum(A, B, C):\n  return A//(B + C), B, A%(B + C)\n  \nAnswer: (A//(B + C), B, A%(B + C))",
          "\nAnswer = B + C."
        ],
        [
          " \n\ndef pics_in_albums(A, B, C):\n  album1 = B\n  album2 = (A-B)/C\n  return album1, album2\n\npics_in_albums(10, 4, 3)\n# Output: 4, 2",
          "\nAnswer = A/ (B + C)"
        ],
        [
          "\n\ndef pictures(A, B, C):\n  return A, A // B, A // C\n\nprint(pictures(A, B, C))",
          "\nAnswer = A/B + (A-B)/C"
        ],
        [
          "\n\ndef number_of_pictures (A, B, C): \n  return A, B/A, (A-B)/C  \n\nanswer = number_of_pictures(A, B, C) \nprint(\"Each album has\", answer, \"pictures.\")",
          "\nAnswer = A = B + (C x (A - B))"
        ],
        [
          "\n\ndef number_of_pics(A, B, C):\n  return ((A-B)//C, B)",
          "\nAnswer = A/(B+(C-1))"
        ],
        [
          "\n\ndef album_pics(A, B, C): \n  return [ B, A-B, A//C, (A-B)//(C-1) ]",
          "\nAnswer = (A - B) / C + B"
        ]
      ]
    },
    "source": {
      "question": " Nancy uploaded 41 pictures to Facebook. She put 37 pics into one album and put the rest into 2 different albums. How many pictures were in each album? ",
      "final_answer": 2.0,
      "index": 599
    }
  }
]